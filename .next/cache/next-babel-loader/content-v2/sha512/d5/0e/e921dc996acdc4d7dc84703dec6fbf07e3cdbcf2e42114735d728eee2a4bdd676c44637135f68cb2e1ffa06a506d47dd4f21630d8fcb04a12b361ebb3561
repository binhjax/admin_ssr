{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as userService from '@/services/user';\nexport default {\n  namespace: 'user',\n  state: {\n    search: {},\n    data: {\n      list: [],\n      pagination: {}\n    },\n    submitting: false,\n    formTitle: '',\n    formID: '',\n    formVisible: false,\n    formData: {}\n  },\n  effects: {\n    *fetch({\n      search,\n      pagination\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let params = {};\n\n      if (search) {\n        params = _objectSpread(_objectSpread({}, params), search);\n        yield put({\n          type: 'saveSearch',\n          payload: search\n        });\n      } else {\n        const s = yield select(state => state.user.search);\n\n        if (s) {\n          params = _objectSpread(_objectSpread({}, params), s);\n        }\n      }\n\n      if (pagination) {\n        params = _objectSpread(_objectSpread({}, params), pagination);\n        yield put({\n          type: 'savePagination',\n          payload: pagination\n        });\n      } else {\n        const p = yield select(state => state.user.pagination);\n\n        if (p) {\n          params = _objectSpread(_objectSpread({}, params), p);\n        }\n      }\n\n      const response = yield call(userService.query, params);\n      yield put({\n        type: 'saveData',\n        payload: response\n      });\n    },\n\n    *loadForm({\n      payload\n    }, {\n      put\n    }) {\n      yield put({\n        type: 'changeFormVisible',\n        payload: true\n      });\n      yield [put({\n        type: 'saveFormType',\n        payload: payload.type\n      }), put({\n        type: 'saveFormTitle',\n        payload: 'New User'\n      }), put({\n        type: 'saveFormID',\n        payload: ''\n      }), put({\n        type: 'saveFormData',\n        payload: {}\n      })];\n\n      if (payload.type === 'E') {\n        yield [put({\n          type: 'saveFormTitle',\n          payload: 'Edit user'\n        }), put({\n          type: 'saveFormID',\n          payload: payload.id\n        }), put({\n          type: 'fetchForm',\n          payload: {\n            id: payload.id\n          }\n        })];\n      }\n    },\n\n    *fetchForm({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(userService.get, payload.id);\n      yield put({\n        type: 'saveFormData',\n        payload: response\n      });\n    },\n\n    *submit({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true\n      });\n\n      const params = _objectSpread({}, payload);\n\n      const formType = yield select(state => state.user.formType);\n      let success = false;\n\n      if (formType === 'E') {\n        const id = yield select(state => state.user.formID);\n        const response = yield call(userService.update, id, params);\n\n        if (response.status === 'OK') {\n          success = true;\n        }\n      } else {\n        const response = yield call(userService.create, params);\n\n        if (response.id && response.id !== '') {\n          success = true;\n        }\n      }\n\n      yield put({\n        type: 'changeSubmitting',\n        payload: false\n      });\n\n      if (success) {\n        _message.success('Saved successfully');\n\n        yield put({\n          type: 'changeFormVisible',\n          payload: false\n        });\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *del({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(userService.del, payload.id);\n\n      if (response.status === 'OK') {\n        _message.success('successfully deleted');\n\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *changeStatus({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let response;\n\n      if (payload.status === 1) {\n        response = yield call(userService.enable, payload.id);\n      } else {\n        response = yield call(userService.disable, payload.id);\n      }\n\n      if (response.status === 'OK') {\n        let msg = 'Successfully activated';\n\n        if (payload.status === 2) {\n          msg = 'Deactivated successfully';\n        }\n\n        _message.success(msg);\n\n        const data = yield select(state => state.user.data);\n        const newData = {\n          list: [],\n          pagination: data.pagination\n        };\n\n        for (let i = 0; i < data.list.length; i += 1) {\n          const item = data.list[i];\n\n          if (item.id === payload.id) {\n            item.status = payload.status;\n          }\n\n          newData.list.push(item);\n        }\n\n        yield put({\n          type: 'saveData',\n          payload: newData\n        });\n      }\n    }\n\n  },\n  reducers: {\n    saveData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: payload\n      });\n    },\n\n    saveSearch(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        search: payload\n      });\n    },\n\n    changeFormVisible(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formVisible: payload\n      });\n    },\n\n    saveFormTitle(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formTitle: payload\n      });\n    },\n\n    saveFormType(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formType: payload\n      });\n    },\n\n    saveFormID(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formID: payload\n      });\n    },\n\n    saveFormData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formData: payload\n      });\n    },\n\n    changeSubmitting(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/models/user.js"],"names":["userService","namespace","state","search","data","list","pagination","submitting","formTitle","formID","formVisible","formData","effects","fetch","call","put","select","params","type","payload","s","user","p","response","query","loadForm","id","fetchForm","get","submit","formType","success","update","status","create","del","changeStatus","enable","disable","msg","newData","i","length","item","push","reducers","saveData","saveSearch","changeFormVisible","saveFormTitle","saveFormType","saveFormID","saveFormData","changeSubmitting"],"mappings":"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","sourcesContent":["import { message } from 'antd';\nimport * as userService from '@/services/user';\n\nexport default {\n  namespace: 'user',\n  state: {\n    search: {},\n    data: {\n      list: [],\n      pagination: {},\n    },\n    submitting: false,\n    formTitle: '',\n    formID: '',\n    formVisible: false,\n    formData: {},\n  },\n  effects: {\n    *fetch({ search, pagination }, { call, put, select }) {\n      let params = {};\n\n      if (search) {\n        params = { ...params, ...search };\n        yield put({\n          type: 'saveSearch',\n          payload: search,\n        });\n      } else {\n        const s = yield select(state => state.user.search);\n        if (s) {\n          params = { ...params, ...s };\n        }\n      }\n\n      if (pagination) {\n        params = { ...params, ...pagination };\n        yield put({\n          type: 'savePagination',\n          payload: pagination,\n        });\n      } else {\n        const p = yield select(state => state.user.pagination);\n        if (p) {\n          params = { ...params, ...p };\n        }\n      }\n\n      const response = yield call(userService.query, params);\n      yield put({\n        type: 'saveData',\n        payload: response,\n      });\n    },\n    *loadForm({ payload }, { put }) {\n      yield put({\n        type: 'changeFormVisible',\n        payload: true,\n      });\n\n      yield [\n        put({\n          type: 'saveFormType',\n          payload: payload.type,\n        }),\n        put({\n          type: 'saveFormTitle',\n          payload: 'New User',\n        }),\n        put({\n          type: 'saveFormID',\n          payload: '',\n        }),\n        put({\n          type: 'saveFormData',\n          payload: {},\n        }),\n      ];\n\n      if (payload.type === 'E') {\n        yield [\n          put({\n            type: 'saveFormTitle',\n            payload: 'Edit user',\n          }),\n          put({\n            type: 'saveFormID',\n            payload: payload.id,\n          }),\n          put({\n            type: 'fetchForm',\n            payload: { id: payload.id },\n          }),\n        ];\n      }\n    },\n    *fetchForm({ payload }, { call, put }) {\n      const response = yield call(userService.get, payload.id);\n      yield put({\n        type: 'saveFormData',\n        payload: response,\n      });\n    },\n    *submit({ payload }, { call, put, select }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true,\n      });\n\n      const params = { ...payload };\n      const formType = yield select(state => state.user.formType);\n      let success = false;\n      if (formType === 'E') {\n        const id = yield select(state => state.user.formID);\n        const response = yield call(userService.update, id, params);\n        if (response.status === 'OK') {\n          success = true;\n        }\n      } else {\n        const response = yield call(userService.create, params);\n        if (response.id && response.id !== '') {\n          success = true;\n        }\n      }\n\n      yield put({\n        type: 'changeSubmitting',\n        payload: false,\n      });\n\n      if (success) {\n        message.success('Saved successfully');\n        yield put({\n          type: 'changeFormVisible',\n          payload: false,\n        });\n        yield put({\n          type: 'fetch',\n        });\n      }\n    },\n    *del({ payload }, { call, put }) {\n      const response = yield call(userService.del, payload.id);\n      if (response.status === 'OK') {\n        message.success('successfully deleted');\n        yield put({ type: 'fetch' });\n      }\n    },\n    *changeStatus({ payload }, { call, put, select }) {\n      let response;\n      if (payload.status === 1) {\n        response = yield call(userService.enable, payload.id);\n      } else {\n        response = yield call(userService.disable, payload.id);\n      }\n\n      if (response.status === 'OK') {\n        let msg = 'Successfully activated';\n        if (payload.status === 2) {\n          msg = 'Deactivated successfully';\n        }\n        message.success(msg);\n        const data = yield select(state => state.user.data);\n        const newData = { list: [], pagination: data.pagination };\n\n        for (let i = 0; i < data.list.length; i += 1) {\n          const item = data.list[i];\n          if (item.id === payload.id) {\n            item.status = payload.status;\n          }\n          newData.list.push(item);\n        }\n\n        yield put({\n          type: 'saveData',\n          payload: newData,\n        });\n      }\n    },\n  },\n  reducers: {\n    saveData(state, { payload }) {\n      return { ...state, data: payload };\n    },\n    saveSearch(state, { payload }) {\n      return { ...state, search: payload };\n    },\n    changeFormVisible(state, { payload }) {\n      return { ...state, formVisible: payload };\n    },\n    saveFormTitle(state, { payload }) {\n      return { ...state, formTitle: payload };\n    },\n    saveFormType(state, { payload }) {\n      return { ...state, formType: payload };\n    },\n    saveFormID(state, { payload }) {\n      return { ...state, formID: payload };\n    },\n    saveFormData(state, { payload }) {\n      return { ...state, formData: payload };\n    },\n    changeSubmitting(state, { payload }) {\n      return { ...state, submitting: payload };\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}