{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SelectingState, State, Action, InputType, DragCanvasState } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../CustomPortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\nexport class DefaultDiagramState extends State {\n  constructor() {\n    super({\n      name: 'default-diagrams'\n    });\n\n    _defineProperty(this, \"dragCanvas\", void 0);\n\n    _defineProperty(this, \"dragNewLink\", void 0);\n\n    _defineProperty(this, \"dragItems\", void 0);\n\n    this.childStates = [new SelectingState()];\n    this.dragCanvas = new DragCanvasState();\n    this.dragNewLink = new DragNewLinkState();\n    this.dragItems = new DragDiagramItemsState(); // determine what was clicked on\n\n    this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event); // the canvas was clicked on, transition to the dragging canvas state\n\n        if (!element) {\n          this.transitionWithEvent(this.dragCanvas, event);\n        } // initiate dragging a new link\n        else if (element instanceof PortModel) {\n            this.transitionWithEvent(this.dragNewLink, event);\n          } // move the items (and potentially link points)\n          else {\n              this.transitionWithEvent(this.dragItems, event);\n            }\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/state/DefaultDiagramState.ts"],"names":["SelectingState","State","Action","InputType","DragCanvasState","PortModel","DragNewLinkState","DragDiagramItemsState","DefaultDiagramState","constructor","name","childStates","dragCanvas","dragNewLink","dragItems","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent"],"mappings":";;AACA,SACCA,cADD,EAECC,KAFD,EAGCC,MAHD,EAICC,SAJD,EAMCC,eAND,QAOO,iCAPP;AAQA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AAEA,SAASC,qBAAT,QAAsC,yBAAtC;AAEA,OAAO,MAAMC,mBAAN,SAAkCP,KAAlC,CAAuD;AAK7DQ,EAAAA,WAAW,GAAG;AACb,UAAM;AACLC,MAAAA,IAAI,EAAE;AADD,KAAN;;AADa;;AAAA;;AAAA;;AAIb,SAAKC,WAAL,GAAmB,CAAC,IAAIX,cAAJ,EAAD,CAAnB;AACA,SAAKY,UAAL,GAAkB,IAAIR,eAAJ,EAAlB;AACA,SAAKS,WAAL,GAAmB,IAAIP,gBAAJ,EAAnB;AACA,SAAKQ,SAAL,GAAiB,IAAIP,qBAAJ,EAAjB,CAPa,CASb;;AACA,SAAKQ,cAAL,CACC,IAAIb,MAAJ,CAAW;AACVc,MAAAA,IAAI,EAAEb,SAAS,CAACc,UADN;AAEVC,MAAAA,IAAI,EAAGC,KAAD,IAAoC;AACzC,cAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB,CADyC,CAGzC;;AACA,YAAI,CAACC,OAAL,EAAc;AACb,eAAKI,mBAAL,CAAyB,KAAKZ,UAA9B,EAA0CO,KAA1C;AACA,SAFD,CAGA;AAHA,aAIK,IAAIC,OAAO,YAAYf,SAAvB,EAAkC;AACtC,iBAAKmB,mBAAL,CAAyB,KAAKX,WAA9B,EAA2CM,KAA3C;AACA,WAFI,CAGL;AAHK,eAIA;AACJ,mBAAKK,mBAAL,CAAyB,KAAKV,SAA9B,EAAyCK,KAAzC;AACA;AACD;AAjBS,KAAX,CADD;AAqBA;;AApC4D","sourcesContent":["import { MouseEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel } from '../CustomPortModel';\nimport { DragNewLinkState } from './DragNewLinkState';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { DragDiagramItemsState } from './DragDiagramItemsState';\n\nexport class DefaultDiagramState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tdragNewLink: DragNewLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tname: 'default-diagrams'\n\t\t});\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.dragNewLink = new DragNewLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragNewLink, event);\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}