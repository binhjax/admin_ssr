{"ast":null,"code":"import _regeneratorRuntime from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport '@projectstorm/react-canvas-core';\nimport { DefaultPortModel } from '@projectstorm/react-diagrams-defaults';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport var RightAnglePortModel = /*#__PURE__*/function (_DefaultPortModel) {\n  _inherits(RightAnglePortModel, _DefaultPortModel);\n\n  var _super = _createSuper(RightAnglePortModel);\n\n  function RightAnglePortModel() {\n    _classCallCheck(this, RightAnglePortModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RightAnglePortModel, [{\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      return new CustomLinkModel();\n    }\n  }]);\n\n  return RightAnglePortModel;\n}(DefaultPortModel);\nexport var Application = /*#__PURE__*/function () {\n  function Application() {\n    var _this = this;\n\n    _classCallCheck(this, Application);\n\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"dispatch\", useDispatch());\n\n    _defineProperty(this, \"saveNode\", function () {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", function () {\n      var tables = [];\n      var relationships = [];\n\n      _this.activeModel.getNodes().forEach(function (node) {\n        var table = {\n          name: node.getOptions().extras,\n          columns: []\n        };\n        Object.values(node.getPorts()).forEach(function (port) {\n          table.columns.push({\n            name: port.getOptions().extras.name,\n            type: port.getOptions().extras.type,\n            key: port.getOptions().extras.key\n          });\n        });\n        tables.push(table);\n      });\n\n      _this.activeModel.getLinks().forEach(function (link) {\n        var relationship = {\n          parentTable: link.getSourcePort().getNode().getOptions().extras,\n          parentColumn: link.getSourcePort().getOptions().extras.name,\n          childTable: link.getTargetPort().getNode().getOptions().extras,\n          childColumn: link.getTargetPort().getOptions().extras.name\n        };\n        relationships.push(relationship);\n      });\n\n      tables.push(relationships);\n      localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n      window.postMessage(tables, '*');\n    });\n\n    _defineProperty(this, \"zoomToFit\", function () {\n      _this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", function () {\n      _this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", function () {\n      _this.engine.redistribute(_this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n\n      _this.reroute();\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() + 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() - 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = Customdefault({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new CustomDiagramModel();\n    this.engine = new CustomDagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  _createClass(Application, [{\n    key: \"reroute\",\n    value: function reroute() {\n      this.diagramEngine.getLinkFactories().getFactory(CustomPathFindingLinkFactory.NAME).calculateRoutingMatrix();\n    }\n  }, {\n    key: \"newModel\",\n    value: function () {\n      var _newModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var node, port1, node2, port2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.activeModel = new CustomDiagramModel();\n                this.activeModel.getZoomLevel();\n                this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n                this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', function () {\n                  return new CustomPortModel('', '', '');\n                }));\n                this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n                node = new CustomNodeModel('Quang');\n                port1 = node.addCustomPort('quang', 'char', 'PK');\n                node.addCustomPort('test', 'char', '');\n                node2 = new CustomNodeModel('Test');\n                port2 = node2.addCustomPort('test', 'char', 'PK');\n                node2.addPort(new CustomPortModel('test', 'char', ''));\n                this.activeModel.addAll(node, node2);\n                this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n                // const nodes = await db.collection('saveDiagram').doc('quang').get();\n                // let data = nodes.data().data;\n                // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n                // this.diagramEngine.setModel(this.activeModel);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function newModel() {\n        return _newModel.apply(this, arguments);\n      }\n\n      return newModel;\n    }()\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}();","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["DefaultPortModel","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","RightAnglePortModel","Application","tables","relationships","activeModel","getNodes","forEach","node","table","name","getOptions","extras","columns","Object","values","getPorts","port","push","type","key","getLinks","link","relationship","parentTable","getSourcePort","getNode","parentColumn","childTable","getTargetPort","childColumn","localStorage","setItem","JSON","stringify","window","postMessage","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","Customdefault","registerDefaultZoomCanvasAction","CustomDiagramModel","CustomDagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","CustomPathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","port1","addCustomPort","node2","port2","addPort","addAll","setModel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {} from '@projectstorm/react-canvas-core';\nimport { DefaultPortModel } from '@projectstorm/react-diagrams-defaults';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\n\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: DiagramModel;\n  protected diagramEngine: CustomDiagramEngine;\n  protected engine: CustomDagreEngine;\n\n  constructor() {\n    this.diagramEngine = Customdefault({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new CustomDiagramModel();\n    this.engine = new CustomDagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach(node => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach(port => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach(link => {\n      let relationship = {\n        parentTable: link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n    tables.push(relationships);\n    localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n    window.postMessage(tables, '*');\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<CustomPathFindingLinkFactory>(CustomPathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new CustomDiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addCustomPort('test', 'char', '');\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): CustomDiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): CustomDiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}