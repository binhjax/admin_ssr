{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/index.tsx\",\n    _this = this;\n\nimport createEngine, { DefaultNodeModel, DiagramModel, PortModelAlignment } from '@projectstorm/react-diagrams';\nimport * as React from 'react'; // import the custom models\n\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiamondNodeFactory } from './DiamondNodeFactory';\nimport { SimplePortFactory } from './SimplePortFactory';\nimport { DiamondPortModel } from './DiamondPortModel';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../helpers1/DemoCanvasWidget';\n/**\n * @Author Dylan Vorster\n */\n\nexport default (function () {\n  //1) setup the diagram engine\n  var engine = createEngine(); // register some other factories as well\n\n  engine.getPortFactories().registerFactory(new SimplePortFactory('diamond', function (config) {\n    return new DiamondPortModel(PortModelAlignment.LEFT);\n  }));\n  engine.getNodeFactories().registerFactory(new DiamondNodeFactory()); //2) setup the diagram model\n\n  var model = new DiagramModel(); //3-A) create a default node\n\n  var node1 = new DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n  var port1 = node1.addOutPort('Out');\n  node1.setPosition(100, 200); //3-B) create our new custom node\n\n  var node2 = new DiamondNodeModel();\n  node2.setPosition(250, 108);\n  var node3 = new DefaultNodeModel('Node 3', 'red');\n  var port3 = node3.addInPort('In');\n  node3.setPosition(500, 100); //3-C) link the 2 nodes together\n\n  var link1 = port1.link(node2.getPort(PortModelAlignment.LEFT));\n  var link2 = port3.link(node2.getPort(PortModelAlignment.RIGHT));\n  var node4 = new DefaultNodeModel('Node 4', 'rgb(0,192,255)');\n  var port4 = node4.addOutPort('Out');\n  node4.setPosition(200, 10); //4) add the models to the root graph\n\n  model.addAll(node1, node2, node3, link1, link2, node4); //5) load model into engine\n\n  engine.setModel(model); //6) render the diagram!\n\n  return /*#__PURE__*/_jsxDEV(DemoCanvasWidget, {\n    children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n      engine: engine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 4\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 3\n  }, _this);\n});","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/index.tsx"],"names":["createEngine","DefaultNodeModel","DiagramModel","PortModelAlignment","React","DiamondNodeModel","DiamondNodeFactory","SimplePortFactory","DiamondPortModel","CanvasWidget","DemoCanvasWidget","engine","getPortFactories","registerFactory","config","LEFT","getNodeFactories","model","node1","port1","addOutPort","setPosition","node2","node3","port3","addInPort","link1","link","getPort","link2","RIGHT","node4","port4","addAll","setModel"],"mappings":";;;;;AAAA,OAAOA,YAAP,IAAuBC,gBAAvB,EAAyCC,YAAzC,EAAuDC,kBAAvD,QAAiF,8BAAjF;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB,C,CACA;;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,gBAAT,QAAiC,8BAAjC;AAEA;AACA;AACA;;AACA,gBAAe,YAAM;AACpB;AACA,MAAIC,MAAM,GAAGX,YAAY,EAAzB,CAFoB,CAIpB;;AACAW,EAAAA,MAAM,CACJC,gBADF,GAEEC,eAFF,CAEkB,IAAIN,iBAAJ,CAAsB,SAAtB,EAAiC,UAACO,MAAD;AAAA,WAAY,IAAIN,gBAAJ,CAAqBL,kBAAkB,CAACY,IAAxC,CAAZ;AAAA,GAAjC,CAFlB;AAGAJ,EAAAA,MAAM,CAACK,gBAAP,GAA0BH,eAA1B,CAA0C,IAAIP,kBAAJ,EAA1C,EARoB,CAUpB;;AACA,MAAIW,KAAK,GAAG,IAAIf,YAAJ,EAAZ,CAXoB,CAapB;;AACA,MAAIgB,KAAK,GAAG,IAAIjB,gBAAJ,CAAqB,QAArB,EAA+B,gBAA/B,CAAZ;AACA,MAAIkB,KAAK,GAAGD,KAAK,CAACE,UAAN,CAAiB,KAAjB,CAAZ;AACAF,EAAAA,KAAK,CAACG,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAhBoB,CAkBpB;;AACA,MAAIC,KAAK,GAAG,IAAIjB,gBAAJ,EAAZ;AACAiB,EAAAA,KAAK,CAACD,WAAN,CAAkB,GAAlB,EAAuB,GAAvB;AAEA,MAAIE,KAAK,GAAG,IAAItB,gBAAJ,CAAqB,QAArB,EAA+B,KAA/B,CAAZ;AACA,MAAIuB,KAAK,GAAGD,KAAK,CAACE,SAAN,CAAgB,IAAhB,CAAZ;AACAF,EAAAA,KAAK,CAACF,WAAN,CAAkB,GAAlB,EAAuB,GAAvB,EAxBoB,CA0BpB;;AACA,MAAIK,KAAK,GAAGP,KAAK,CAACQ,IAAN,CAAWL,KAAK,CAACM,OAAN,CAAczB,kBAAkB,CAACY,IAAjC,CAAX,CAAZ;AACA,MAAIc,KAAK,GAAGL,KAAK,CAACG,IAAN,CAAWL,KAAK,CAACM,OAAN,CAAczB,kBAAkB,CAAC2B,KAAjC,CAAX,CAAZ;AAEA,MAAIC,KAAK,GAAG,IAAI9B,gBAAJ,CAAqB,QAArB,EAA+B,gBAA/B,CAAZ;AACA,MAAI+B,KAAK,GAAGD,KAAK,CAACX,UAAN,CAAiB,KAAjB,CAAZ;AACAW,EAAAA,KAAK,CAACV,WAAN,CAAkB,GAAlB,EAAuB,EAAvB,EAhCoB,CAsCpB;;AACAJ,EAAAA,KAAK,CAACgB,MAAN,CAAaf,KAAb,EAAoBI,KAApB,EAA2BC,KAA3B,EAAkCG,KAAlC,EAAyCG,KAAzC,EAAgDE,KAAhD,EAvCoB,CAyCpB;;AACApB,EAAAA,MAAM,CAACuB,QAAP,CAAgBjB,KAAhB,EA1CoB,CA4CpB;;AACA,sBACC,QAAC,gBAAD;AAAA,2BACC,QAAC,YAAD;AAAc,MAAA,MAAM,EAAEN;AAAtB;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,WADD;AAKA,CAlDD","sourcesContent":["import createEngine, { DefaultNodeModel, DiagramModel, PortModelAlignment } from '@projectstorm/react-diagrams';\nimport * as React from 'react';\n// import the custom models\nimport { DiamondNodeModel } from './DiamondNodeModel';\nimport { DiamondNodeFactory } from './DiamondNodeFactory';\nimport { SimplePortFactory } from './SimplePortFactory';\nimport { DiamondPortModel } from './DiamondPortModel';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../helpers1/DemoCanvasWidget';\n\n/**\n * @Author Dylan Vorster\n */\nexport default () => {\n\t//1) setup the diagram engine\n\tvar engine = createEngine();\n\n\t// register some other factories as well\n\tengine\n\t\t.getPortFactories()\n\t\t.registerFactory(new SimplePortFactory('diamond', (config) => new DiamondPortModel(PortModelAlignment.LEFT)));\n\tengine.getNodeFactories().registerFactory(new DiamondNodeFactory());\n\n\t//2) setup the diagram model\n\tvar model = new DiagramModel();\n\n\t//3-A) create a default node\n\tvar node1 = new DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n\tvar port1 = node1.addOutPort('Out');\n\tnode1.setPosition(100, 200);\n\n\t//3-B) create our new custom node\n\tvar node2 = new DiamondNodeModel();\n\tnode2.setPosition(250, 108);\n\n\tvar node3 = new DefaultNodeModel('Node 3', 'red');\n\tvar port3 = node3.addInPort('In');\n\tnode3.setPosition(500, 100);\n\n\t//3-C) link the 2 nodes together\n\tvar link1 = port1.link(node2.getPort(PortModelAlignment.LEFT));\n\tvar link2 = port3.link(node2.getPort(PortModelAlignment.RIGHT));\n\n\tvar node4 = new DefaultNodeModel('Node 4', 'rgb(0,192,255)');\n\tvar port4 = node4.addOutPort('Out');\n\tnode4.setPosition(200, 10);\n\n\n\n\n\n\t//4) add the models to the root graph\n\tmodel.addAll(node1, node2, node3, link1, link2, node4);\n\n\t//5) load model into engine\n\tengine.setModel(model);\n\n\t//6) render the diagram!\n\treturn (\n\t\t<DemoCanvasWidget>\n\t\t\t<CanvasWidget engine={engine} />\n\t\t</DemoCanvasWidget>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}