{"ast":null,"code":"import _defineProperty from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { history } from 'umi';\nimport { parse } from 'qs';\nimport { setToken, logout as _logout } from '@/utils/request';\nimport * as loginService from '@/services/login';\nexport default {\n  namespace: 'login',\n  state: {\n    status: '',\n    tip: '',\n    submitting: false,\n    captchaID: '',\n    captcha: ''\n  },\n  effects: {\n    loadCaptcha: /*#__PURE__*/_regeneratorRuntime.mark(function loadCaptcha(_, _ref) {\n      var call, put, response, captchaID;\n      return _regeneratorRuntime.wrap(function loadCaptcha$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              call = _ref.call, put = _ref.put;\n              _context.next = 3;\n              return call(loginService.captchaID);\n\n            case 3:\n              response = _context.sent;\n              captchaID = response.captcha_id;\n              _context.next = 7;\n              return put({\n                type: 'saveCaptchaID',\n                payload: captchaID\n              });\n\n            case 7:\n              _context.next = 9;\n              return put({\n                type: 'saveCaptcha',\n                payload: loginService.captcha(captchaID)\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, loadCaptcha);\n    }),\n    reloadCaptcha: /*#__PURE__*/_regeneratorRuntime.mark(function reloadCaptcha(_, _ref2) {\n      var put, select, captchaID;\n      return _regeneratorRuntime.wrap(function reloadCaptcha$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              put = _ref2.put, select = _ref2.select;\n              _context2.next = 3;\n              return select(function (state) {\n                return state.login.captchaID;\n              });\n\n            case 3:\n              captchaID = _context2.sent;\n              _context2.next = 6;\n              return put({\n                type: 'saveCaptcha',\n                payload: \"\".concat(loginService.captcha(captchaID), \"&reload=\").concat(Math.random())\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, reloadCaptcha);\n    }),\n    submit: /*#__PURE__*/_regeneratorRuntime.mark(function submit(_ref3, _ref4) {\n      var payload, call, put, response, message, status, params, redirect;\n      return _regeneratorRuntime.wrap(function submit$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              payload = _ref3.payload;\n              call = _ref4.call, put = _ref4.put;\n              _context3.next = 4;\n              return put({\n                type: 'changeSubmitting',\n                payload: true\n              });\n\n            case 4:\n              _context3.next = 6;\n              return call(loginService.login, payload);\n\n            case 6:\n              response = _context3.sent;\n\n              if (!(response.data && response.data.error)) {\n                _context3.next = 12;\n                break;\n              }\n\n              message = response.data.error.message, status = response.status;\n              _context3.next = 11;\n              return [put({\n                type: 'saveTip',\n                payload: message\n              }), put({\n                type: 'saveStatus',\n                payload: status >= 500 ? 'ERROR' : 'FAIL'\n              }), put({\n                type: 'changeSubmitting',\n                payload: false\n              }), put({\n                type: 'loadCaptcha'\n              })];\n\n            case 11:\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              // Save the access token\n              setToken(response);\n              _context3.next = 15;\n              return [put({\n                type: 'saveTip',\n                payload: ''\n              }), put({\n                type: 'saveStatus',\n                payload: ''\n              }), put({\n                type: 'changeSubmitting',\n                payload: false\n              })];\n\n            case 15:\n              params = parse(window.location.href.split('?')[1]);\n              redirect = params.redirect;\n\n              if (!redirect) {\n                _context3.next = 20;\n                break;\n              }\n\n              window.location.href = redirect;\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              history.replace('/');\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, submit);\n    }),\n    logout: /*#__PURE__*/_regeneratorRuntime.mark(function logout(_, _ref5) {\n      var call;\n      return _regeneratorRuntime.wrap(function logout$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              call = _ref5.call;\n              console.log('Model process logout');\n\n              _logout(); // const response = yield call(loginService.logout);\n              // if (response.status === 'OK') {\n              // logout();\n              // }\n\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, logout);\n    })\n  },\n  reducers: {\n    saveCaptchaID: function saveCaptchaID(state, _ref6) {\n      var payload = _ref6.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captchaID: payload\n      });\n    },\n    saveCaptcha: function saveCaptcha(state, _ref7) {\n      var payload = _ref7.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captcha: payload\n      });\n    },\n    saveStatus: function saveStatus(state, _ref8) {\n      var payload = _ref8.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: payload\n      });\n    },\n    saveTip: function saveTip(state, _ref9) {\n      var payload = _ref9.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tip: payload\n      });\n    },\n    changeSubmitting: function changeSubmitting(state, _ref10) {\n      var payload = _ref10.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}