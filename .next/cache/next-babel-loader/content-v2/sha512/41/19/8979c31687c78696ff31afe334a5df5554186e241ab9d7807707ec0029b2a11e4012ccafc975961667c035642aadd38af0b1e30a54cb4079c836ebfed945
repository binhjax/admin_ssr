{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\t\\tuser-select: none;\\n\\t\\tpointer-events: auto;\\n\\t\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\nvar S;\n\n(function (_S) {\n  var Label = _S.Label = styled.div(_templateObject());\n})(S || (S = {})); // now we can render all what we want in the label\n\n\nexport var EditableLabelWidget = function EditableLabelWidget(props) {\n  _s();\n\n  var _React$useState = React.useState(props.model.value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      str = _React$useState2[0],\n      setStr = _React$useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(S.Label, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: str,\n      onChange: function onChange(event) {\n        var newVal = event.target.value; // update value both in internal component state\n\n        setStr(newVal); // and in model object\n\n        props.model.value = newVal;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: function onClick() {\n        return action('model eventDidFire')('You clicked the button');\n      },\n      children: \"Click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, _this);\n};\n\n_s(EditableLabelWidget, \"y1tafCweUTFWIMbcJp0xr1+jfbw=\");\n\n_c = EditableLabelWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableLabelWidget\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx"],"names":["React","styled","action","Label","div","S","EditableLabelWidget","props","useState","model","value","str","setStr","event","newVal","target"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;;;AAQQ,MAAMC,KAAK,cAAGF,MAAM,CAACG,GAAV,mBAAX;GAFEC,C,KAAAA,C,SAQV;;;AACA,OAAO,IAAMC,mBAAuE,GAAG,SAA1EA,mBAA0E,CAACC,KAAD,EAAW;AAAA;;AAAA,wBAC3EP,KAAK,CAACQ,QAAN,CAAeD,KAAK,CAACE,KAAN,CAAYC,KAA3B,CAD2E;AAAA;AAAA,MAC1FC,GAD0F;AAAA,MACrFC,MADqF;;AAGjG,sBACC,QAAC,CAAD,CAAG,KAAH;AAAA,4BACC;AACC,MAAA,KAAK,EAAED,GADR;AAEC,MAAA,QAAQ,EAAE,kBAACE,KAAD,EAAW;AACpB,YAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaL,KAA5B,CADoB,CAGpB;;AACAE,QAAAA,MAAM,CAACE,MAAD,CAAN,CAJoB,CAKpB;;AACAP,QAAAA,KAAK,CAACE,KAAN,CAAYC,KAAZ,GAAoBI,MAApB;AACA;AATF;AAAA;AAAA;AAAA;AAAA,aADD,eAaC;AAAQ,MAAA,OAAO,EAAE;AAAA,eAAMZ,MAAM,CAAC,oBAAD,CAAN,CAA6B,wBAA7B,CAAN;AAAA,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAbD;AAAA;AAAA;AAAA;AAAA;AAAA,WADD;AAiBA,CApBM;;GAAMI,mB;;KAAAA,mB","sourcesContent":["import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}