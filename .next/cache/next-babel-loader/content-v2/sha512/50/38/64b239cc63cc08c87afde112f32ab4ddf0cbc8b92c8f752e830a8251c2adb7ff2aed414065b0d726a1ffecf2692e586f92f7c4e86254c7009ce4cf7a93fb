{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { newUUID } from '@/utils/utils';\nimport { EditableCell, EditableFormRow } from './EditableCell';\nimport styles from './index.less';\n\nfunction fillKey(data) {\n  if (!data) {\n    return [];\n  }\n\n  return data.map(item => {\n    const nitem = _objectSpread({}, item);\n\n    if (!nitem.key) {\n      nitem.key = newUUID();\n    }\n\n    return nitem;\n  });\n}\n\nexport default class MenuAction extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleDelete\", key => {\n      const {\n        dataSource\n      } = this.state;\n      const data = dataSource.filter(item => item.key !== key);\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleAddTpl\", () => {\n      const tplData = [{\n        code: 'add',\n        name: 'Add'\n      }, {\n        code: 'edit',\n        name: 'Edit'\n      }, {\n        code: 'del',\n        name: 'Delete'\n      }, {\n        code: 'query',\n        name: 'Query'\n      }];\n      const newData = tplData.map(v => _objectSpread({\n        key: v.code\n      }, v));\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n\n      for (let i = 0; i < newData.length; i += 1) {\n        let exists = false;\n\n        for (let j = 0; j < dataSource.length; j += 1) {\n          if (dataSource[j].key === newData[i].key) {\n            exists = true;\n            break;\n          }\n        }\n\n        if (!exists) {\n          data.push(newData[i]);\n        }\n      }\n\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleAdd\", () => {\n      const {\n        dataSource\n      } = this.state;\n      const item = {\n        key: newUUID(),\n        code: '',\n        name: ''\n      };\n      const data = [...dataSource, item];\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleSave\", row => {\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n      const index = data.findIndex(item => row.key === item.key);\n      const item = data[index];\n      data.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"triggerChange\", data => {\n      const {\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        onChange(data);\n      }\n    });\n\n    this.columns = [{\n      title: 'Action Number',\n      dataIndex: 'code',\n      editable: true,\n      width: '40%'\n    }, {\n      title: 'Action Name',\n      dataIndex: 'name',\n      editable: true,\n      width: '45%'\n    }, {\n      title: 'Key',\n      dataIndex: 'key',\n      width: '10%',\n      render: (_, record) => {\n        const {\n          dataSource\n        } = this.state;\n\n        if (dataSource.length === 0) {\n          return null;\n        }\n\n        return __jsx(_Popconfirm, {\n          title: \"Are you sure you want to delete this data?\",\n          onConfirm: () => this.handleDelete(record.key)\n        }, __jsx(\"a\", null, \"Delete\"));\n      }\n    }];\n    this.state = {\n      dataSource: fillKey(props.value)\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if ('value' in nextProps) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dataSource: fillKey(nextProps.value)\n      });\n    }\n\n    return state;\n  }\n\n  render() {\n    const {\n      dataSource\n    } = this.state;\n    const components = {\n      body: {\n        row: EditableFormRow,\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread(_objectSpread({}, col), {}, {\n        onCell: record => ({\n          record,\n          editable: col.editable,\n          dataIndex: col.dataIndex,\n          title: col.title,\n          handleSave: this.handleSave\n        })\n      });\n    });\n    return __jsx(\"div\", {\n      className: styles.tableList\n    }, __jsx(\"div\", {\n      className: styles.tableListOperator\n    }, __jsx(_Button, {\n      onClick: this.handleAdd,\n      size: \"small\",\n      type: \"primary\"\n    }, \"Add\"), __jsx(_Button, {\n      onClick: this.handleAddTpl,\n      size: \"small\",\n      type: \"primary\"\n    }, \"Use templates\")), __jsx(_Table, {\n      rowKey: record => record.key,\n      components: components,\n      bordered: true,\n      dataSource: dataSource,\n      columns: columns,\n      pagination: false\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}