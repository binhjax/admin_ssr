{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Diagram/BodyWidget.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  flex-grow: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nexport var Layer = styled.div(_templateObject());\n_c = Layer;\n\nvar BodyWidget = function BodyWidget(props) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      updateState = _React$useState2[1]; // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n\n  var forceUpdate = React.useCallback(function () {\n    return updateState({});\n  }, []);\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      port = _React$useState4[0],\n      setPort = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedNode = _React$useState6[0],\n      setSelectedNode = _React$useState6[1];\n\n  var _React$useState7 = React.useState('table'),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      active = _React$useState8[0],\n      setActive = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      selectedPort = _React$useState10[0],\n      setSelectedPort = _React$useState10[1];\n\n  var _React$useState11 = React.useState(),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      link = _React$useState12[0],\n      setLink = _React$useState12[1]; // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n\n  var handelChangeName = function handelChangeName(e) {\n    selectedNode.getOptions().extras = e.target.value;\n    dispatch(action.setSelectedNode(selectedNode));\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  var handleChangePort = function handleChangePort(e) {\n    var _e$target = e.target,\n        id = _e$target.id,\n        value = _e$target.value;\n    port.getOptions().extras[id] = value;\n    dispatch(action.setPorts(_objectSpread({}, ports)));\n  };\n\n  var openDetail = function openDetail(value) {\n    setPort(value);\n    setActive('detail');\n  };\n\n  var confirmDeletePort = function confirmDeletePort(port) {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: __jsx(ExclamationCircleOutlined, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }),\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk: function onOk() {\n        selectedNode.deletePort(port);\n        dispatch(action.setPorts(selectedNode.getPorts()));\n      }\n    });\n  };\n\n  var selectPort = function selectPort(value) {\n    setSelectedPort(value);\n  };\n\n  var addPort = function addPort() {\n    var port = selectedNode.addCustomPort('new_col', '', '');\n    dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  var dispatchPorts = function dispatchPorts() {\n    dispatch(action.setPorts(_objectSpread({}, ports)));\n  };\n\n  return __jsx(_Card, {\n    extra: __jsx(ActionMenu, {\n      app: props.app,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 18\n      }\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(_Row, {\n    gutter: 16,\n    style: {\n      width: '100%',\n      marginTop: '5px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(_Col, {\n    lg: 18,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Layer, {\n    onClick: function onClick(e) {\n      e.stopPropagation();\n      setSelectedPort(undefined);\n    },\n    onDrop: function onDrop(event) {\n      var node;\n      node = new CustomNodeModel('Name');\n      var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n      node.setPosition(point);\n      props.app.getDiagramEngine().getModel().addNode(node);\n      forceUpdate();\n    },\n    onDragOver: function onDragOver(event) {\n      event.preventDefault();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(DemoCanvasWidget, {\n    background: \"#ffff\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(CanvasWidget, {\n    engine: props.app.getDiagramEngine(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  })))), __jsx(_Col, {\n    lg: 6,\n    md: 24,\n    xs: 24,\n    sm: 24,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(TrayWidget, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, active === 'table' ? __jsx(TableDetail, {\n    selectedPort: selectedPort,\n    selectedNode: selectedNode,\n    selectPort: selectPort,\n    addPort: addPort,\n    confirmDeletePort: confirmDeletePort,\n    handelChangeName: handelChangeName,\n    openDetail: openDetail,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }) : '', active === 'detail' ? __jsx(PortDetail, {\n    port: port,\n    selectedNode: selectedNode,\n    dispatchPorts: dispatchPorts,\n    handleChangePort: handleChangePort,\n    setActive: setActive,\n    setSelectedPort: setSelectedPort,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }) : '', active === 'link' ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, link !== undefined ? __jsx(LinkDetail, {\n    link: link,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 42\n    }\n  }) : '') : ''))));\n};\n\n_s(BodyWidget, \"pwdWvlutXPtao4mtB0H221CkGP4=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = BodyWidget;\nexport default BodyWidget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Layer\");\n$RefreshReg$(_c2, \"BodyWidget\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Diagram/BodyWidget.tsx"],"names":["React","TrayWidget","ActionMenu","LinkDetail","TableDetail","PortDetail","CanvasWidget","DemoCanvasWidget","CustomNodeModel","styled","ExclamationCircleOutlined","useDispatch","Layer","div","BodyWidget","props","dispatch","useState","updateState","forceUpdate","useCallback","port","setPort","selectedNode","setSelectedNode","active","setActive","selectedPort","setSelectedPort","link","setLink","handelChangeName","e","getOptions","extras","target","value","action","app","getDiagramEngine","repaintCanvas","handleChangePort","id","setPorts","ports","openDetail","confirmDeletePort","confirm","title","icon","content","okText","cancelText","onOk","deletePort","getPorts","selectPort","addPort","addCustomPort","dispatchPorts","width","marginTop","stopPropagation","undefined","event","node","point","getRelativeMousePoint","setPosition","getModel","addNode","preventDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AAGA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA,SAAsBC,WAAtB,QAAyC,aAAzC;AASA,OAAO,IAAMC,KAAK,GAAGH,MAAM,CAACI,GAAV,mBAAX;KAAMD,K;;AAKb,IAAME,UAAqC,GAAG,SAAxCA,UAAwC,CAACC,KAAD,EAAW;AAAA;;AACvD,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AADuD,wBAE/BX,KAAK,CAACiB,QAAN,EAF+B;AAAA;AAAA,MAE9CC,WAF8C,wBAGvD;AACA;;;AAEA,MAAMC,WAAW,GAAGnB,KAAK,CAACoB,WAAN,CAAkB;AAAA,WAAMF,WAAW,CAAC,EAAD,CAAjB;AAAA,GAAlB,EAAyC,EAAzC,CAApB;;AANuD,yBAO/BlB,KAAK,CAACiB,QAAN,EAP+B;AAAA;AAAA,MAOhDI,IAPgD;AAAA,MAO1CC,OAP0C;;AAAA,yBAQftB,KAAK,CAACiB,QAAN,EARe;AAAA;AAAA,MAQhDM,YARgD;AAAA,MAQlCC,eARkC;;AAAA,yBAS3BxB,KAAK,CAACiB,QAAN,CAAe,OAAf,CAT2B;AAAA;AAAA,MAShDQ,MATgD;AAAA,MASxCC,SATwC;;AAAA,yBAUf1B,KAAK,CAACiB,QAAN,EAVe;AAAA;AAAA,MAUhDU,YAVgD;AAAA,MAUlCC,eAVkC;;AAAA,0BAW/B5B,KAAK,CAACiB,QAAN,EAX+B;AAAA;AAAA,MAWhDY,IAXgD;AAAA,MAW1CC,OAX0C,yBAYvD;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAY;AACnCT,IAAAA,YAAY,CAACU,UAAb,GAA0BC,MAA1B,GAAmCF,CAAC,CAACG,MAAF,CAASC,KAA5C;AACApB,IAAAA,QAAQ,CAACqB,MAAM,CAACb,eAAP,CAAuBD,YAAvB,CAAD,CAAR;AACAR,IAAAA,KAAK,CAACuB,GAAN,CAAUC,gBAAV,GAA6BC,aAA7B;AACD,GAJD;;AAMA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACT,CAAD,EAAO;AAAA,oBACRA,CAAC,CAACG,MADM;AAAA,QACtBO,EADsB,aACtBA,EADsB;AAAA,QAClBN,KADkB,aAClBA,KADkB;AAE9Bf,IAAAA,IAAI,CAACY,UAAL,GAAkBC,MAAlB,CAAyBQ,EAAzB,IAA+BN,KAA/B;AACApB,IAAAA,QAAQ,CACNqB,MAAM,CAACM,QAAP,mBACKC,KADL,EADM,CAAR;AAKD,GARD;;AASA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACT,KAAD,EAAW;AAC5Bd,IAAAA,OAAO,CAACc,KAAD,CAAP;AACAV,IAAAA,SAAS,CAAC,QAAD,CAAT;AACD,GAHD;;AAIA,MAAMoB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACzB,IAAD,EAAqB;AAC7C,WAAM0B,OAAN,CAAc;AACZC,MAAAA,KAAK,EAAE,SADK;AAEZC,MAAAA,IAAI,EAAE,MAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFM;AAGZC,MAAAA,OAAO,EAAE,qBAHG;AAIZC,MAAAA,MAAM,EAAE,KAJI;AAKZC,MAAAA,UAAU,EAAE,IALA;AAMZC,MAAAA,IANY,kBAML;AACL9B,QAAAA,YAAY,CAAC+B,UAAb,CAAwBjC,IAAxB;AACAL,QAAAA,QAAQ,CAACqB,MAAM,CAACM,QAAP,CAAgBpB,YAAY,CAACgC,QAAb,EAAhB,CAAD,CAAR;AACD;AATW,KAAd;AAWD,GAZD;;AAaA,MAAMC,UAAU,GAAG,SAAbA,UAAa,CAACpB,KAAD,EAAW;AAC5BR,IAAAA,eAAe,CAACQ,KAAD,CAAf;AACD,GAFD;;AAIA,MAAMqB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAIpC,IAAI,GAAGE,YAAY,CAACmC,aAAb,CAA2B,SAA3B,EAAsC,EAAtC,EAA0C,EAA1C,CAAX;AACA1C,IAAAA,QAAQ,CAACqB,MAAM,CAACM,QAAP,CAAgBpB,YAAY,CAACgC,QAAb,EAAhB,CAAD,CAAR;AACAV,IAAAA,UAAU,CAACxB,IAAD,CAAV;AACD,GAJD;;AAMA,MAAMsC,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AAC1B3C,IAAAA,QAAQ,CACNqB,MAAM,CAACM,QAAP,mBACKC,KADL,EADM,CAAR;AAKD,GAND;;AAOA,SACE;AAAM,IAAA,KAAK,EAAE,MAAC,UAAD;AAAY,MAAA,GAAG,EAAE7B,KAAK,CAACuB,GAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,MAAM,EAAE,EAAb;AAAiB,IAAA,KAAK,EAAE;AAAEsB,MAAAA,KAAK,EAAE,MAAT;AAAiBC,MAAAA,SAAS,EAAE;AAA5B,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,EAAE,EAAE,EAAT;AAAa,IAAA,EAAE,EAAE,EAAjB;AAAqB,IAAA,EAAE,EAAE,EAAzB;AAA6B,IAAA,EAAE,EAAE,EAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,OAAO,EAAE,iBAAC7B,CAAD,EAAO;AACdA,MAAAA,CAAC,CAAC8B,eAAF;AACAlC,MAAAA,eAAe,CAACmC,SAAD,CAAf;AACD,KAJH;AAKE,IAAA,MAAM,EAAE,gBAACC,KAAD,EAAW;AACjB,UAAIC,IAAJ;AACAA,MAAAA,IAAI,GAAG,IAAIzD,eAAJ,CAAoB,MAApB,CAAP;AACA,UAAI0D,KAAK,GAAGnD,KAAK,CAACuB,GAAN,CAAUC,gBAAV,GAA6B4B,qBAA7B,CAAmDH,KAAnD,CAAZ;AACAC,MAAAA,IAAI,CAACG,WAAL,CAAiBF,KAAjB;AACAnD,MAAAA,KAAK,CAACuB,GAAN,CAAUC,gBAAV,GAA6B8B,QAA7B,GAAwCC,OAAxC,CAAgDL,IAAhD;AACA9C,MAAAA,WAAW;AACZ,KAZH;AAaE,IAAA,UAAU,EAAE,oBAAC6C,KAAD,EAAW;AACrBA,MAAAA,KAAK,CAACO,cAAN;AACD,KAfH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAiBE,MAAC,gBAAD;AAAkB,IAAA,UAAU,EAAC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAExD,KAAK,CAACuB,GAAN,CAAUC,gBAAV,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAjBF,CADF,CADF,EAwBE;AAAK,IAAA,EAAE,EAAE,CAAT;AAAY,IAAA,EAAE,EAAE,EAAhB;AAAoB,IAAA,EAAE,EAAE,EAAxB;AAA4B,IAAA,EAAE,EAAE,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,MAAM,KAAK,OAAX,GACC,MAAC,WAAD;AACE,IAAA,YAAY,EAAEE,YADhB;AAEE,IAAA,YAAY,EAAEJ,YAFhB;AAGE,IAAA,UAAU,EAAEiC,UAHd;AAIE,IAAA,OAAO,EAAEC,OAJX;AAKE,IAAA,iBAAiB,EAAEX,iBALrB;AAME,IAAA,gBAAgB,EAAEf,gBANpB;AAOE,IAAA,UAAU,EAAEc,UAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAWC,EAZJ,EAcGpB,MAAM,KAAK,QAAX,GACC,MAAC,UAAD;AACE,IAAA,IAAI,EAAEJ,IADR;AAEE,IAAA,YAAY,EAAEE,YAFhB;AAGE,IAAA,aAAa,EAAEoC,aAHjB;AAIE,IAAA,gBAAgB,EAAElB,gBAJpB;AAKE,IAAA,SAAS,EAAEf,SALb;AAME,IAAA,eAAe,EAAEE,eANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAUC,EAxBJ,EA0BGH,MAAM,KAAK,MAAX,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMI,IAAI,KAAKkC,SAAT,GAAqB,MAAC,UAAD;AAAY,IAAA,IAAI,EAAElC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAArB,GAAkD,EAAxD,CADD,GAGC,EA7BJ,CADF,CAxBF,CADF,CADF;AA+DD,CAlID;;GAAMf,U;UACaH,W;;;MADbG,U;AAmIN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\n\nimport { Application } from './Application';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Card, Col, Row, Modal } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\n// import * as action from '../../actions/node';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nexport interface BodyWidgetProps {\n  app: Application;\n}\n\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget: React.FC<BodyWidgetProps> = (props) => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState();\n  // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState<CustomPortModel>();\n  const [selectedNode, setSelectedNode] = React.useState<CustomNodeModel>();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState<PortModel>();\n  const [link, setLink] = React.useState<CustomLinkModel>();\n  // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = (e: any) => {\n    selectedNode.getOptions().extras = e.target.value;\n    dispatch(action.setSelectedNode(selectedNode));\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = (e) => {\n    const { id, value } = e.target;\n    port.getOptions().extras[id] = value;\n    dispatch(\n      action.setPorts({\n        ...ports\n      })\n    );\n  };\n  const openDetail = (value) => {\n    setPort(value as CustomPortModel);\n    setActive('detail');\n  };\n  const confirmDeletePort = (port: PortModel) => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        selectedNode.deletePort(port as CustomPortModel);\n        dispatch(action.setPorts(selectedNode.getPorts()));\n      },\n    });\n  };\n  const selectPort = (value) => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', '');\n    dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  const dispatchPorts = () => {\n    dispatch(\n      action.setPorts({\n        ...ports,\n      })\n    );\n  };\n  return (\n    <Card extra={<ActionMenu app={props.app} />}>\n      <Row gutter={16} style={{ width: '100%', marginTop: '5px' }}>\n        <Col lg={18} md={24} sm={24} xs={24}>\n          <Layer\n            onClick={(e) => {\n              e.stopPropagation();\n              setSelectedPort(undefined);\n            }}\n            onDrop={(event) => {\n              var node: CustomNodeModel;\n              node = new CustomNodeModel('Name');\n              var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n              node.setPosition(point);\n              props.app.getDiagramEngine().getModel().addNode(node);\n              forceUpdate();\n            }}\n            onDragOver={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <DemoCanvasWidget background='#ffff'>\n              <CanvasWidget engine={props.app.getDiagramEngine()} />\n            </DemoCanvasWidget>\n          </Layer>\n        </Col>\n        <Col lg={6} md={24} xs={24} sm={24}>\n          <TrayWidget>\n            {active === 'table' ? (\n              <TableDetail\n                selectedPort={selectedPort}\n                selectedNode={selectedNode}\n                selectPort={selectPort}\n                addPort={addPort}\n                confirmDeletePort={confirmDeletePort}\n                handelChangeName={handelChangeName}\n                openDetail={openDetail}\n              />\n            ) : (\n              ''\n            )}\n            {active === 'detail' ? (\n              <PortDetail\n                port={port}\n                selectedNode={selectedNode}\n                dispatchPorts={dispatchPorts}\n                handleChangePort={handleChangePort}\n                setActive={setActive}\n                setSelectedPort={setSelectedPort}\n              />\n            ) : (\n              ''\n            )}\n            {active === 'link' ? (\n              <div>{link !== undefined ? <LinkDetail link={link} /> : ''}</div>\n            ) : (\n              ''\n            )}\n          </TrayWidget>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\nexport default BodyWidget;\n"]},"metadata":{},"sourceType":"module"}