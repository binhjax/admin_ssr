{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\n\nclass Application extends React.Component {\n  constructor() {\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  reroute() {\n    this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n  }\n\n  async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["React","SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","RightAnglePortModel","DefaultPortModel","createLinkModel","Application","Component","constructor","diagramEngine","default","registerDefaultZoomCanvasAction","activeModel","DiagramModel","engine","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","reroute","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getZoomLevel","getNodeFactories","registerFactory","getPortFactories","node","addPort","node2","addAll","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { message } from 'antd';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport withDva from '@/utils/store';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nclass Application extends React.Component {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach(node => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach(port => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach(link => {\n      let relationship = {\n        parentTable: link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n\n    localStorage.setItem('json-diagram', tables.toString());\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}