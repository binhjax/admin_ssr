{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as loginService from '@/services/login';\nexport default {\n  namespace: 'global',\n  state: {\n    title: '权限管理脚手架',\n    copyRight: '2020 LyricTian',\n    defaultURL: '/dashboard',\n    collapsed: false,\n    openKeys: [],\n    selectedKeys: [],\n    user: {\n      user_name: 'admin',\n      real_name: '管理员',\n      role_names: []\n    },\n    menuPaths: {},\n    menuMap: {},\n    menus: []\n  },\n  effects: {\n    *menuEvent({\n      pathname\n    }, {\n      put,\n      select\n    }) {\n      let p = pathname;\n\n      if (p === '/') {\n        p = yield select(state => state.global.defaultURL);\n      }\n\n      const menuPaths = yield select(state => state.global.menuPaths);\n      const item = menuPaths[p];\n\n      if (!item) {\n        return;\n      }\n\n      if (item.parent_path && item.parent_path !== '') {\n        yield put({\n          type: 'changeOpenKeys',\n          payload: item.parent_path.split('/')\n        });\n      }\n\n      yield put({\n        type: 'changeSelectedKeys',\n        payload: [item.id]\n      });\n    },\n\n    *fetchUser(_, {\n      call,\n      put\n    }) {\n      const response = yield call(loginService.getCurrentUser);\n      yield put({\n        type: 'saveUser',\n        payload: response\n      });\n    },\n\n    *fetchMenuTree({\n      pathname\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(loginService.queryMenuTree);\n      const menuData = response.list || [];\n      yield put({\n        type: 'saveMenus',\n        payload: menuData\n      });\n      const menuPaths = {};\n      const menuMap = {};\n\n      function fillData(data) {\n        for (let i = 0; i < data.length; i += 1) {\n          menuMap[data[i].id] = data[i];\n\n          if (data[i].router !== '') {\n            menuPaths[data[i].router] = data[i];\n          }\n\n          if (data[i].children && data[i].children.length > 0) {\n            fillData(data[i].children);\n          }\n        }\n      }\n\n      fillData(menuData);\n      yield [put({\n        type: 'saveMenuPaths',\n        payload: menuPaths\n      }), put({\n        type: 'saveMenuMap',\n        payload: menuMap\n      }), put({\n        type: 'menuEvent',\n        pathname\n      })];\n    }\n\n  },\n  reducers: {\n    changeLayoutCollapsed(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        collapsed: payload\n      });\n    },\n\n    changeOpenKeys(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        openKeys: payload\n      });\n    },\n\n    changeSelectedKeys(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectedKeys: payload\n      });\n    },\n\n    saveUser(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: payload\n      });\n    },\n\n    saveMenuPaths(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        menuPaths: payload\n      });\n    },\n\n    saveMenuMap(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        menuMap: payload\n      });\n    },\n\n    saveMenus(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        menus: payload\n      });\n    }\n\n  },\n  subscriptions: {\n    setup({\n      dispatch,\n      history\n    }) {\n      console.log(\"store.global:  subscriptions\"); // history.listen(({ pathname }) => {\n      //   dispatch({\n      //     type: 'menuEvent',\n      //     pathname,\n      //   });\n      // });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}