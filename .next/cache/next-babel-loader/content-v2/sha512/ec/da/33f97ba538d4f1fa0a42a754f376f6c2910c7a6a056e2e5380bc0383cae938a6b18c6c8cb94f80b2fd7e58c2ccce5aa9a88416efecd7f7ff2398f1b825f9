{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as roleService from '@/services/role';\nexport default {\n  namespace: 'role',\n  state: {\n    search: {},\n    pagination: {},\n    data: {\n      list: [],\n      pagination: {}\n    },\n    submitting: false,\n    formTitle: '',\n    formID: '',\n    formVisible: false,\n    formData: {},\n    selectData: []\n  },\n  effects: {\n    *fetch({\n      search,\n      pagination\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let params = {};\n\n      if (search) {\n        params = _objectSpread(_objectSpread({}, params), search);\n        yield put({\n          type: 'saveSearch',\n          payload: search\n        });\n      } else {\n        const s = yield select(state => state.role.search);\n\n        if (s) {\n          params = _objectSpread(_objectSpread({}, params), s);\n        }\n      }\n\n      if (pagination) {\n        params = _objectSpread(_objectSpread({}, params), pagination);\n        yield put({\n          type: 'savePagination',\n          payload: pagination\n        });\n      } else {\n        const p = yield select(state => state.role.pagination);\n\n        if (p) {\n          params = _objectSpread(_objectSpread({}, params), p);\n        }\n      }\n\n      const response = yield call(roleService.query, params);\n      yield put({\n        type: 'saveData',\n        payload: response\n      });\n    },\n\n    *loadForm({\n      payload\n    }, {\n      put\n    }) {\n      yield put({\n        type: 'changeFormVisible',\n        payload: true\n      });\n      yield [put({\n        type: 'saveFormType',\n        payload: payload.type\n      }), put({\n        type: 'saveFormTitle',\n        payload: 'New role'\n      }), put({\n        type: 'saveFormID',\n        payload: ''\n      }), put({\n        type: 'saveFormData',\n        payload: {}\n      })];\n\n      if (payload.type === 'E') {\n        yield [put({\n          type: 'saveFormTitle',\n          payload: 'Edit role'\n        }), put({\n          type: 'saveFormID',\n          payload: payload.id\n        }), put({\n          type: 'fetchForm',\n          payload: {\n            id: payload.id\n          }\n        })];\n      }\n    },\n\n    *fetchForm({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(roleService.get, payload.id);\n      const {\n        role_menus: roleMenus\n      } = response;\n\n      if (roleMenus) {\n        const mRoleMenus = {};\n        const nRoleMenus = [];\n        roleMenus.forEach(item => {\n          if (mRoleMenus[item.menu_id]) {\n            mRoleMenus[item.menu_id] = [...mRoleMenus[item.menu_id], item.action_id];\n          } else {\n            mRoleMenus[item.menu_id] = [item.action_id];\n          }\n        });\n        Object.keys(mRoleMenus).forEach(key => {\n          nRoleMenus.push({\n            menu_id: key,\n            actions: mRoleMenus[key]\n          });\n        });\n        response.role_menus = nRoleMenus;\n      }\n\n      yield [put({\n        type: 'saveFormData',\n        payload: response\n      })];\n    },\n\n    *submit({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true\n      });\n\n      const params = _objectSpread({}, payload);\n\n      const formType = yield select(state => state.role.formType);\n      let success = false;\n\n      if (formType === 'E') {\n        const id = yield select(state => state.role.formID);\n        const response = yield call(roleService.update, id, params);\n\n        if (response.status === 'OK') {\n          success = true;\n        }\n      } else {\n        const response = yield call(roleService.create, params);\n\n        if (response.id && response.id !== '') {\n          success = true;\n        }\n      }\n\n      yield put({\n        type: 'changeSubmitting',\n        payload: false\n      });\n\n      if (success) {\n        _message.success('Saved successfully');\n\n        yield put({\n          type: 'changeFormVisible',\n          payload: false\n        });\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *del({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(roleService.del, payload.id);\n\n      if (response.status === 'OK') {\n        _message.success('successfully deleted');\n\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *fetchSelect(_, {\n      call,\n      put\n    }) {\n      const response = yield call(roleService.querySelect);\n      yield put({\n        type: 'saveSelectData',\n        payload: response.list || []\n      });\n    },\n\n    *changeStatus({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let response;\n\n      if (payload.status === 1) {\n        response = yield call(roleService.enable, payload.id);\n      } else {\n        response = yield call(roleService.disable, payload.id);\n      }\n\n      if (response.status === 'OK') {\n        let msg = 'Successfully activated';\n\n        if (payload.status === 2) {\n          msg = 'Deactivated successfully';\n        }\n\n        _message.success(msg);\n\n        const data = yield select(state => state.role.data);\n        const newData = {\n          list: [],\n          pagination: data.pagination\n        };\n\n        for (let i = 0; i < data.list.length; i += 1) {\n          const item = data.list[i];\n\n          if (item.id === payload.id) {\n            item.status = payload.status;\n          }\n\n          newData.list.push(item);\n        }\n\n        yield put({\n          type: 'saveData',\n          payload: newData\n        });\n      }\n    }\n\n  },\n  reducers: {\n    saveData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: payload\n      });\n    },\n\n    saveSearch(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        search: payload\n      });\n    },\n\n    savePagination(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pagination: payload\n      });\n    },\n\n    changeFormVisible(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formVisible: payload\n      });\n    },\n\n    saveFormTitle(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formTitle: payload\n      });\n    },\n\n    saveFormType(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formType: payload\n      });\n    },\n\n    saveFormID(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formID: payload\n      });\n    },\n\n    saveFormData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formData: payload\n      });\n    },\n\n    changeSubmitting(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    },\n\n    saveSelectData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        selectData: payload\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/models/role.js"],"names":["roleService","namespace","state","search","pagination","data","list","submitting","formTitle","formID","formVisible","formData","selectData","effects","fetch","call","put","select","params","type","payload","s","role","p","response","query","loadForm","id","fetchForm","get","role_menus","roleMenus","mRoleMenus","nRoleMenus","forEach","item","menu_id","action_id","Object","keys","key","push","actions","submit","formType","success","update","status","create","del","fetchSelect","_","querySelect","changeStatus","enable","disable","msg","newData","i","length","reducers","saveData","saveSearch","savePagination","changeFormVisible","saveFormTitle","saveFormType","saveFormID","saveFormData","changeSubmitting","saveSelectData"],"mappings":"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","sourcesContent":["import { message } from 'antd';\r\nimport * as roleService from '@/services/role';\r\n\r\nexport default {\r\n  namespace: 'role',\r\n  state: {\r\n    search: {},\r\n    pagination: {},\r\n    data: {\r\n      list: [],\r\n      pagination: {},\r\n    },\r\n    submitting: false,\r\n    formTitle: '',\r\n    formID: '',\r\n    formVisible: false,\r\n    formData: {},\r\n    selectData: [],\r\n  },\r\n  effects: {\r\n    *fetch({ search, pagination }, { call, put, select }) {\r\n      let params = {};\r\n\r\n      if (search) {\r\n        params = { ...params, ...search };\r\n        yield put({\r\n          type: 'saveSearch',\r\n          payload: search,\r\n        });\r\n      } else {\r\n        const s = yield select(state => state.role.search);\r\n        if (s) {\r\n          params = { ...params, ...s };\r\n        }\r\n      }\r\n\r\n      if (pagination) {\r\n        params = { ...params, ...pagination };\r\n        yield put({\r\n          type: 'savePagination',\r\n          payload: pagination,\r\n        });\r\n      } else {\r\n        const p = yield select(state => state.role.pagination);\r\n        if (p) {\r\n          params = { ...params, ...p };\r\n        }\r\n      }\r\n\r\n      const response = yield call(roleService.query, params);\r\n      yield put({\r\n        type: 'saveData',\r\n        payload: response,\r\n      });\r\n    },\r\n    *loadForm({ payload }, { put }) {\r\n      yield put({\r\n        type: 'changeFormVisible',\r\n        payload: true,\r\n      });\r\n\r\n      yield [\r\n        put({\r\n          type: 'saveFormType',\r\n          payload: payload.type,\r\n        }),\r\n        put({\r\n          type: 'saveFormTitle',\r\n          payload: 'New role',\r\n        }),\r\n        put({\r\n          type: 'saveFormID',\r\n          payload: '',\r\n        }),\r\n        put({\r\n          type: 'saveFormData',\r\n          payload: {},\r\n        }),\r\n      ];\r\n\r\n      if (payload.type === 'E') {\r\n        yield [\r\n          put({\r\n            type: 'saveFormTitle',\r\n            payload: 'Edit role',\r\n          }),\r\n          put({\r\n            type: 'saveFormID',\r\n            payload: payload.id,\r\n          }),\r\n          put({\r\n            type: 'fetchForm',\r\n            payload: { id: payload.id },\r\n          }),\r\n        ];\r\n      }\r\n    },\r\n    *fetchForm({ payload }, { call, put }) {\r\n      const response = yield call(roleService.get, payload.id);\r\n\r\n      const { role_menus: roleMenus } = response;\r\n      if (roleMenus) {\r\n        const mRoleMenus = {};\r\n        const nRoleMenus = [];\r\n        roleMenus.forEach(item => {\r\n          if (mRoleMenus[item.menu_id]) {\r\n            mRoleMenus[item.menu_id] = [...mRoleMenus[item.menu_id], item.action_id];\r\n          } else {\r\n            mRoleMenus[item.menu_id] = [item.action_id];\r\n          }\r\n        });\r\n        Object.keys(mRoleMenus).forEach(key => {\r\n          nRoleMenus.push({ menu_id: key, actions: mRoleMenus[key] });\r\n        });\r\n        response.role_menus = nRoleMenus;\r\n      }\r\n\r\n      yield [\r\n        put({\r\n          type: 'saveFormData',\r\n          payload: response,\r\n        }),\r\n      ];\r\n    },\r\n    *submit({ payload }, { call, put, select }) {\r\n      yield put({\r\n        type: 'changeSubmitting',\r\n        payload: true,\r\n      });\r\n\r\n      const params = { ...payload };\r\n      const formType = yield select(state => state.role.formType);\r\n\r\n      let success = false;\r\n      if (formType === 'E') {\r\n        const id = yield select(state => state.role.formID);\r\n        const response = yield call(roleService.update, id, params);\r\n        if (response.status === 'OK') {\r\n          success = true;\r\n        }\r\n      } else {\r\n        const response = yield call(roleService.create, params);\r\n        if (response.id && response.id !== '') {\r\n          success = true;\r\n        }\r\n      }\r\n\r\n      yield put({\r\n        type: 'changeSubmitting',\r\n        payload: false,\r\n      });\r\n\r\n      if (success) {\r\n        message.success('Saved successfully');\r\n        yield put({\r\n          type: 'changeFormVisible',\r\n          payload: false,\r\n        });\r\n        yield put({\r\n          type: 'fetch',\r\n        });\r\n      }\r\n    },\r\n    *del({ payload }, { call, put }) {\r\n      const response = yield call(roleService.del, payload.id);\r\n      if (response.status === 'OK') {\r\n        message.success('successfully deleted');\r\n        yield put({ type: 'fetch' });\r\n      }\r\n    },\r\n    *fetchSelect(_, { call, put }) {\r\n      const response = yield call(roleService.querySelect);\r\n      yield put({\r\n        type: 'saveSelectData',\r\n        payload: response.list || [],\r\n      });\r\n    },\r\n    *changeStatus({ payload }, { call, put, select }) {\r\n      let response;\r\n      if (payload.status === 1) {\r\n        response = yield call(roleService.enable, payload.id);\r\n      } else {\r\n        response = yield call(roleService.disable, payload.id);\r\n      }\r\n\r\n      if (response.status === 'OK') {\r\n        let msg = 'Successfully activated';\r\n        if (payload.status === 2) {\r\n          msg = 'Deactivated successfully';\r\n        }\r\n        message.success(msg);\r\n        const data = yield select(state => state.role.data);\r\n        const newData = { list: [], pagination: data.pagination };\r\n\r\n        for (let i = 0; i < data.list.length; i += 1) {\r\n          const item = data.list[i];\r\n          if (item.id === payload.id) {\r\n            item.status = payload.status;\r\n          }\r\n          newData.list.push(item);\r\n        }\r\n\r\n        yield put({\r\n          type: 'saveData',\r\n          payload: newData,\r\n        });\r\n      }\r\n    },\r\n  },\r\n  reducers: {\r\n    saveData(state, { payload }) {\r\n      return { ...state, data: payload };\r\n    },\r\n    saveSearch(state, { payload }) {\r\n      return { ...state, search: payload };\r\n    },\r\n    savePagination(state, { payload }) {\r\n      return { ...state, pagination: payload };\r\n    },\r\n    changeFormVisible(state, { payload }) {\r\n      return { ...state, formVisible: payload };\r\n    },\r\n    saveFormTitle(state, { payload }) {\r\n      return { ...state, formTitle: payload };\r\n    },\r\n    saveFormType(state, { payload }) {\r\n      return { ...state, formType: payload };\r\n    },\r\n    saveFormID(state, { payload }) {\r\n      return { ...state, formID: payload };\r\n    },\r\n    saveFormData(state, { payload }) {\r\n      return { ...state, formData: payload };\r\n    },\r\n    changeSubmitting(state, { payload }) {\r\n      return { ...state, submitting: payload };\r\n    },\r\n    saveSelectData(state, { payload }) {\r\n      return { ...state, selectData: payload };\r\n    },\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}