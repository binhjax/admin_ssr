{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Diagram/BodyWidget.tsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget = props => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState(); // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState();\n  const [selectedNode, setSelectedNode] = React.useState();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState();\n  const [link, setLink] = React.useState(); // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = e => {\n    selectedNode.getOptions().extras = e.target.value; // dispatch(action.setSelectedNode(selectedNode));\n\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    port.getOptions().extras[id] = value; // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n\n  const openDetail = value => {\n    setPort(value);\n    setActive('detail');\n  };\n\n  const confirmDeletePort = port => {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: __jsx(ExclamationCircleOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }\n      }),\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n\n      onOk() {\n        selectedNode.deletePort(port); // dispatch(action.setPorts(selectedNode.getPorts()));\n      }\n\n    });\n  };\n\n  const selectPort = value => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', ''); // dispatch(action.setPorts(selectedNode.getPorts()));\n\n    openDetail(port);\n  }; // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n\n\n  return __jsx(_Card, {\n    extra: __jsx(ActionMenu, {\n      app: props.app,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 18\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 5\n    }\n  }, __jsx(_Row, {\n    gutter: 16,\n    style: {\n      width: '100%',\n      marginTop: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }\n  }, __jsx(_Col, {\n    lg: 18,\n    md: 24,\n    sm: 24,\n    xs: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, __jsx(Layer, {\n    onClick: e => {\n      e.stopPropagation();\n      setSelectedPort(undefined);\n    },\n    onDrop: event => {\n      var node;\n      node = new CustomNodeModel('Name');\n      var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n      node.setPosition(point);\n      props.app.getDiagramEngine().getModel().addNode(node);\n      forceUpdate();\n    },\n    onDragOver: event => {\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, __jsx(DemoCanvasWidget, {\n    background: \"#ffff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, __jsx(CanvasWidget, {\n    engine: props.app.getDiagramEngine(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 15\n    }\n  })))), __jsx(_Col, {\n    lg: 6,\n    md: 24,\n    xs: 24,\n    sm: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }, __jsx(TrayWidget, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, active === 'table' ? __jsx(TableDetail, {\n    selectedPort: selectedPort,\n    selectedNode: selectedNode,\n    selectPort: selectPort,\n    addPort: addPort,\n    confirmDeletePort: confirmDeletePort,\n    handelChangeName: handelChangeName,\n    openDetail: openDetail,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }) : '', active === 'detail' ? __jsx(PortDetail, {\n    port: port,\n    selectedNode: selectedNode,\n    dispatchPorts: dispatchPorts,\n    handleChangePort: handleChangePort,\n    setActive: setActive,\n    setSelectedPort: setSelectedPort,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }) : '', active === 'link' ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, link !== undefined ? __jsx(LinkDetail, {\n    link: link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 42\n    }\n  }) : '') : ''))));\n};\n\nexport default BodyWidget;","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Diagram/BodyWidget.tsx"],"names":["React","TrayWidget","ActionMenu","LinkDetail","TableDetail","PortDetail","CanvasWidget","DemoCanvasWidget","CustomNodeModel","styled","ExclamationCircleOutlined","useDispatch","Layer","div","BodyWidget","props","dispatch","updateState","useState","forceUpdate","useCallback","port","setPort","selectedNode","setSelectedNode","active","setActive","selectedPort","setSelectedPort","link","setLink","handelChangeName","e","getOptions","extras","target","value","app","getDiagramEngine","repaintCanvas","handleChangePort","id","openDetail","confirmDeletePort","confirm","title","icon","content","okText","cancelText","onOk","deletePort","selectPort","addPort","addCustomPort","width","marginTop","stopPropagation","undefined","event","node","point","getRelativeMousePoint","setPosition","getModel","addNode","preventDefault","dispatchPorts"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\n\nimport { Application } from './Application';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Card, Col, Row, Modal } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\n// import * as action from '../../actions/node';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nexport interface BodyWidgetProps {\n  app: Application;\n}\n\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget: React.FC<BodyWidgetProps> = (props) => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState();\n  // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState<CustomPortModel>();\n  const [selectedNode, setSelectedNode] = React.useState<CustomNodeModel>();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState<PortModel>();\n  const [link, setLink] = React.useState<CustomLinkModel>();\n  // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = (e: any) => {\n    selectedNode.getOptions().extras = e.target.value;\n    // dispatch(action.setSelectedNode(selectedNode));\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = (e) => {\n    const { id, value } = e.target;\n    port.getOptions().extras[id] = value;\n    // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n  const openDetail = (value) => {\n    setPort(value as CustomPortModel);\n    setActive('detail');\n  };\n  const confirmDeletePort = (port: PortModel) => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        selectedNode.deletePort(port as CustomPortModel);\n        // dispatch(action.setPorts(selectedNode.getPorts()));\n      },\n    });\n  };\n  const selectPort = (value) => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', '');\n    // dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n  return (\n    <Card extra={<ActionMenu app={props.app} />}>\n      <Row gutter={16} style={{ width: '100%', marginTop: '5px' }}>\n        <Col lg={18} md={24} sm={24} xs={24}>\n          <Layer\n            onClick={(e) => {\n              e.stopPropagation();\n              setSelectedPort(undefined);\n            }}\n            onDrop={(event) => {\n              var node: CustomNodeModel;\n              node = new CustomNodeModel('Name');\n              var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n              node.setPosition(point);\n              props.app.getDiagramEngine().getModel().addNode(node);\n              forceUpdate();\n            }}\n            onDragOver={(event) => {\n              event.preventDefault();\n            }}\n          >\n            <DemoCanvasWidget background='#ffff'>\n              <CanvasWidget engine={props.app.getDiagramEngine()} />\n            </DemoCanvasWidget>\n          </Layer>\n        </Col>\n        <Col lg={6} md={24} xs={24} sm={24}>\n          <TrayWidget>\n            {active === 'table' ? (\n              <TableDetail\n                selectedPort={selectedPort}\n                selectedNode={selectedNode}\n                selectPort={selectPort}\n                addPort={addPort}\n                confirmDeletePort={confirmDeletePort}\n                handelChangeName={handelChangeName}\n                openDetail={openDetail}\n              />\n            ) : (\n              ''\n            )}\n            {active === 'detail' ? (\n              <PortDetail\n                port={port}\n                selectedNode={selectedNode}\n                dispatchPorts={dispatchPorts}\n                handleChangePort={handleChangePort}\n                setActive={setActive}\n                setSelectedPort={setSelectedPort}\n              />\n            ) : (\n              ''\n            )}\n            {active === 'link' ? (\n              <div>{link !== undefined ? <LinkDetail link={link} /> : ''}</div>\n            ) : (\n              ''\n            )}\n          </TrayWidget>\n        </Col>\n      </Row>\n    </Card>\n  );\n};\nexport default BodyWidget;\n"]},"metadata":{},"sourceType":"module"}