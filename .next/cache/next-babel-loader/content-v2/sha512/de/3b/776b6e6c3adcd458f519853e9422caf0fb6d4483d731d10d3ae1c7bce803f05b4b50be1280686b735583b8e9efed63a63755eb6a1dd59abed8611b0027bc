{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState } from '@projectstorm/react-diagrams'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\nexport class Application {\n  constructor() {\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"dispatch\", useDispatch());\n\n    _defineProperty(this, \"saveNode\", () => {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", () => {\n      let diagram = '';\n      this.activeModel.getNodes().forEach(node => {\n        let table = 'Table ' + node.getOptions().extras + ' {';\n        Object.values(node.getPorts()).forEach(port => {\n          table = table + ' \\n \\t' + port.getOptions().extras.name + ' ' + port.getOptions().extras.type;\n\n          if (port.getOptions().extras.key == 'pk') {\n            table = table + ' [' + port.getOptions().extras.key + '] ';\n          }\n        });\n        diagram = diagram + table + '\\n}\\n \\n';\n      });\n      this.activeModel.getLinks().forEach(link => {\n        diagram = diagram + '\\nRef: ' + link.getTargetPort().getNode().getOptions().extras + '.' + link.getTargetPort().getOptions().extras.name + ' > ' + link.getSourcePort().getNode().getOptions().extras + '.' + link.getSourcePort().getOptions().extras.name + '\\n';\n      });\n      localStorage.setItem('json-diagram', diagram);\n      window.postMessage(diagram, '*');\n    });\n\n    _defineProperty(this, \"zoomToFit\", () => {\n      this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", () => {\n      this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", () => {\n      this.engine.redistribute(this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n\n    const node = new CustomNodeModel('employee');\n    node.addCustomPort('quang', 'char', 'pk');\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('company');\n    node2.addCustomPort('test', 'char', 'pk');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","DefaultDiagramState","RightAnglePortModel","DefaultPortModel","createLinkModel","Application","constructor","diagram","activeModel","getNodes","forEach","node","table","getOptions","extras","Object","values","getPorts","port","name","type","key","getLinks","link","getTargetPort","getNode","getSourcePort","localStorage","setItem","window","postMessage","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","repaintCanvas","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getNodeFactories","registerFactory","getPortFactories","getLinkFactories","state","getStateMachine","getCurrentState","dragNewLink","config","allowLooseLinks","addCustomPort","addPort","node2","addAll","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState } from '@projectstorm/react-diagrams';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let diagram = '';\n    this.activeModel.getNodes().forEach(node => {\n      let table = 'Table ' + node.getOptions().extras + ' {';\n      Object.values(node.getPorts()).forEach(port => {\n        table =\n          table + ' \\n \\t' + port.getOptions().extras.name + ' ' + port.getOptions().extras.type;\n        if (port.getOptions().extras.key == 'pk') {\n          table = table + ' [' + port.getOptions().extras.key + '] ';\n        }\n      });\n      diagram = diagram + table + '\\n}\\n \\n';\n    });\n\n    this.activeModel.getLinks().forEach(link => {\n      diagram =\n        diagram +\n        '\\nRef: ' +\n        link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras +\n        '.' +\n        link.getTargetPort().getOptions().extras.name +\n        ' > ' +\n        link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras +\n        '.' +\n        link.getSourcePort().getOptions().extras.name +\n        '\\n';\n    });\n\n    localStorage.setItem('json-diagram', diagram);\n    window.postMessage(diagram, '*');\n  };\n\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n    const node = new CustomNodeModel('employee');\n    node.addCustomPort('quang', 'char', 'pk');\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('company');\n    node2.addCustomPort('test', 'char', 'pk');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}