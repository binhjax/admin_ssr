{"ast":null,"code":"import \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar _jsxFileName = \"/Users/nguyenthanhbinh/Work/vnshop/admin/src/pages/menu/MenuResource/EditableCell.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nconst FormItem = Form.Item;\nconst EditableContext = /*#__PURE__*/React.createContext();\n\nconst EditableRow = (_ref) => {\n  let {\n    form,\n    index\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return __jsx(EditableContext.Provider, {\n    value: form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }\n  }, __jsx(\"tr\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport const EditableFormRow = Form.create()(EditableRow);\nexport class EditableCell extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"save\", () => {\n      const {\n        record,\n        handleSave\n      } = this.props;\n      this.form.validateFields((error, values) => {\n        if (error) {\n          return;\n        }\n\n        handleSave(_objectSpread(_objectSpread({}, record), values));\n      });\n    });\n\n    _defineProperty(this, \"renderFormItem\", (dataIndex, title, record) => {\n      if (dataIndex === 'method') {\n        return __jsx(FormItem, {\n          style: {\n            margin: 0\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 9\n          }\n        }, this.form.getFieldDecorator(dataIndex, {\n          rules: [{\n            required: true,\n            message: `请选择${title}`\n          }],\n          initialValue: record[dataIndex]\n        })(__jsx(_Select, {\n          style: {\n            width: '100%'\n          },\n          onBlur: () => {\n            this.save();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }\n        }, __jsx(_Select.Option, {\n          value: \"GET\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 15\n          }\n        }, \"GET\"), __jsx(_Select.Option, {\n          value: \"POST\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 15\n          }\n        }, \"POST\"), __jsx(_Select.Option, {\n          value: \"PUT\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }\n        }, \"PUT\"), __jsx(_Select.Option, {\n          value: \"DELETE\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }\n        }, \"DELETE\"), __jsx(_Select.Option, {\n          value: \"PATCH\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 15\n          }\n        }, \"PATCH\"), __jsx(_Select.Option, {\n          value: \"HEAD\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }\n        }, \"HEAD\"), __jsx(_Select.Option, {\n          value: \"OPTIONS\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 15\n          }\n        }, \"OPTIONS\"))));\n      }\n\n      return __jsx(FormItem, {\n        style: {\n          margin: 0\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 7\n        }\n      }, this.form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `请输入${title}`\n        }],\n        initialValue: record[dataIndex]\n      })(__jsx(_Input, {\n        onBlur: () => {\n          this.save();\n        },\n        style: {\n          width: '100%'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }\n      })));\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave\n    } = _this$props,\n          restProps = _objectWithoutProperties(_this$props, [\"editable\", \"dataIndex\", \"title\", \"record\", \"index\", \"handleSave\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }), editable ? __jsx(EditableContext.Consumer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, form => {\n      this.form = form;\n      return this.renderFormItem(dataIndex, title, record);\n    }) : restProps.children);\n  }\n\n}\n\nconst Test = () => {};\n\nexport default Test;","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/pages/menu/MenuResource/EditableCell.js"],"names":["React","PureComponent","Form","FormItem","Item","EditableContext","createContext","EditableRow","form","index","props","EditableFormRow","create","EditableCell","record","handleSave","validateFields","error","values","dataIndex","title","margin","getFieldDecorator","rules","required","message","initialValue","width","save","render","editable","restProps","renderFormItem","children","Test"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Form } from '@ant-design/compatible';\r\nimport '@ant-design/compatible/assets/index.css';\r\nimport { Input, Select } from 'antd';\r\n\r\n\r\nconst FormItem = Form.Item;\r\nconst EditableContext = React.createContext();\r\n\r\nconst EditableRow = ({ form, index, ...props }) => (\r\n  <EditableContext.Provider value={form}>\r\n    <tr {...props} />\r\n  </EditableContext.Provider>\r\n);\r\n\r\nexport const EditableFormRow = Form.create()(EditableRow);\r\n\r\nexport class EditableCell extends PureComponent {\r\n  save = () => {\r\n    const { record, handleSave } = this.props;\r\n    this.form.validateFields((error, values) => {\r\n      if (error) {\r\n        return;\r\n      }\r\n      handleSave({ ...record, ...values });\r\n    });\r\n  };\r\n\r\n  renderFormItem = (dataIndex, title, record) => {\r\n    if (dataIndex === 'method') {\r\n      return (\r\n        <FormItem style={{ margin: 0 }}>\r\n          {this.form.getFieldDecorator(dataIndex, {\r\n            rules: [\r\n              {\r\n                required: true,\r\n                message: `请选择${title}`,\r\n              },\r\n            ],\r\n            initialValue: record[dataIndex],\r\n          })(\r\n            <Select\r\n              style={{ width: '100%' }}\r\n              onBlur={() => {\r\n                this.save();\r\n              }}\r\n            >\r\n              <Select.Option value=\"GET\">GET</Select.Option>\r\n              <Select.Option value=\"POST\">POST</Select.Option>\r\n              <Select.Option value=\"PUT\">PUT</Select.Option>\r\n              <Select.Option value=\"DELETE\">DELETE</Select.Option>\r\n              <Select.Option value=\"PATCH\">PATCH</Select.Option>\r\n              <Select.Option value=\"HEAD\">HEAD</Select.Option>\r\n              <Select.Option value=\"OPTIONS\">OPTIONS</Select.Option>\r\n            </Select>\r\n          )}\r\n        </FormItem>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <FormItem style={{ margin: 0 }}>\r\n        {this.form.getFieldDecorator(dataIndex, {\r\n          rules: [\r\n            {\r\n              required: true,\r\n              message: `请输入${title}`,\r\n            },\r\n          ],\r\n          initialValue: record[dataIndex],\r\n        })(\r\n          <Input\r\n            onBlur={() => {\r\n              this.save();\r\n            }}\r\n            style={{ width: '100%' }}\r\n          />\r\n        )}\r\n      </FormItem>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { editable, dataIndex, title, record, index, handleSave, ...restProps } = this.props;\r\n    return (\r\n      <td {...restProps}>\r\n        {editable ? (\r\n          <EditableContext.Consumer>\r\n            {form => {\r\n              this.form = form;\r\n              return this.renderFormItem(dataIndex, title, record);\r\n            }}\r\n          </EditableContext.Consumer>\r\n        ) : (\r\n            restProps.children\r\n          )}\r\n      </td>\r\n    );\r\n  }\r\n}\r\nconst Test = () => { }\r\nexport default Test;\r\n"]},"metadata":{},"sourceType":"module"}