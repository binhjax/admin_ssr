{"ast":null,"code":"import \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar _jsxFileName = \"/Volumes/ExternalData/Work/vnshop/admin/src/components/User/RoleSelect.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react'; // React.useLayoutEffect = React.useEffect;\n\nimport { query } from '@/services/role';\n\nfunction parseValue(value) {\n  if (!value) {\n    return [];\n  }\n\n  return value.map(v => v.role_id);\n}\n\nexport default class RoleSelect extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"handleChange\", value => {\n      this.setState({\n        value\n      });\n      this.triggerChange(value);\n    });\n\n    _defineProperty(this, \"triggerChange\", data => {\n      const {\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        const newData = data.map(v => ({\n          role_id: v\n        }));\n        onChange(newData);\n      }\n    });\n\n    this.state = {\n      value: parseValue(props.value),\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    query({\n      q: 'select'\n    }).then(data => {\n      this.setState({\n        data: data.list || []\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if ('value' in nextProps) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        value: parseValue(nextProps.value)\n      });\n    }\n\n    return state;\n  }\n\n  render() {\n    const {\n      value,\n      data\n    } = this.state;\n    return __jsx(_Select, {\n      mode: \"tags\",\n      value: value,\n      onChange: this.handleChange,\n      placeholder: \"Please choose a role\",\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, data.map(item => __jsx(_Select.Option, {\n      key: item.id,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, item.name)));\n  }\n\n}","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/components/User/RoleSelect.js"],"names":["React","PureComponent","query","parseValue","value","map","v","role_id","RoleSelect","constructor","props","setState","triggerChange","data","onChange","newData","state","componentDidMount","q","then","list","getDerivedStateFromProps","nextProps","render","handleChange","width","item","id","name"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC,C,CACA;;AAGA,SAASC,KAAT,QAAsB,iBAAtB;;AAEA,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AACzB,MAAI,CAACA,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACD,SAAOA,KAAK,CAACC,GAAN,CAAUC,CAAC,IAAIA,CAAC,CAACC,OAAjB,CAAP;AACD;;AAED,eAAe,MAAMC,UAAN,SAAyBP,aAAzB,CAAuC;AACpDQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,0CAsBJN,KAAK,IAAI;AACtB,WAAKO,QAAL,CAAc;AAAEP,QAAAA;AAAF,OAAd;AACA,WAAKQ,aAAL,CAAmBR,KAAnB;AACD,KAzBkB;;AAAA,2CA2BHS,IAAI,IAAI;AACtB,YAAM;AAAEC,QAAAA;AAAF,UAAe,KAAKJ,KAA1B;;AACA,UAAII,QAAJ,EAAc;AACZ,cAAMC,OAAO,GAAGF,IAAI,CAACR,GAAL,CAASC,CAAC,KAAK;AAAEC,UAAAA,OAAO,EAAED;AAAX,SAAL,CAAV,CAAhB;AACAQ,QAAAA,QAAQ,CAACC,OAAD,CAAR;AACD;AACF,KAjCkB;;AAGjB,SAAKC,KAAL,GAAa;AACXZ,MAAAA,KAAK,EAAED,UAAU,CAACO,KAAK,CAACN,KAAP,CADN;AAEXS,MAAAA,IAAI,EAAE;AAFK,KAAb;AAID;;AAEDI,EAAAA,iBAAiB,GAAG;AAClBf,IAAAA,KAAK,CAAC;AAAEgB,MAAAA,CAAC,EAAE;AAAL,KAAD,CAAL,CAAuBC,IAAvB,CAA4BN,IAAI,IAAI;AAClC,WAAKF,QAAL,CAAc;AAAEE,QAAAA,IAAI,EAAEA,IAAI,CAACO,IAAL,IAAa;AAArB,OAAd;AACD,KAFD;AAGD;;AAED,SAAOC,wBAAP,CAAgCC,SAAhC,EAA2CN,KAA3C,EAAkD;AAChD,QAAI,WAAWM,SAAf,EAA0B;AACxB,6CAAYN,KAAZ;AAAmBZ,QAAAA,KAAK,EAAED,UAAU,CAACmB,SAAS,CAAClB,KAAX;AAApC;AACD;;AACD,WAAOY,KAAP;AACD;;AAeDO,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEnB,MAAAA,KAAF;AAASS,MAAAA;AAAT,QAAkB,KAAKG,KAA7B;AAEA,WACE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAEZ,KAFT;AAGE,MAAA,QAAQ,EAAE,KAAKoB,YAHjB;AAIE,MAAA,WAAW,EAAC,sBAJd;AAKE,MAAA,KAAK,EAAE;AAAEC,QAAAA,KAAK,EAAE;AAAT,OALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGZ,IAAI,CAACR,GAAL,CAASqB,IAAI,IACZ,cAAQ,MAAR;AAAe,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAzB;AAA6B,MAAA,KAAK,EAAED,IAAI,CAACC,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,IAAI,CAACE,IADR,CADD,CAPH,CADF;AAeD;;AAtDmD","sourcesContent":["import React, { PureComponent } from 'react';\n// React.useLayoutEffect = React.useEffect;\n\nimport { Select } from 'antd';\nimport { query } from '@/services/role';\n\nfunction parseValue(value) {\n  if (!value) {\n    return [];\n  }\n  return value.map(v => v.role_id);\n}\n\nexport default class RoleSelect extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: parseValue(props.value),\n      data: [],\n    };\n  }\n\n  componentDidMount() {\n    query({ q: 'select' }).then(data => {\n      this.setState({ data: data.list || [] });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if ('value' in nextProps) {\n      return { ...state, value: parseValue(nextProps.value) };\n    }\n    return state;\n  }\n\n  handleChange = value => {\n    this.setState({ value });\n    this.triggerChange(value);\n  };\n\n  triggerChange = data => {\n    const { onChange } = this.props;\n    if (onChange) {\n      const newData = data.map(v => ({ role_id: v }));\n      onChange(newData);\n    }\n  };\n\n  render() {\n    const { value, data } = this.state;\n\n    return (\n      <Select\n        mode=\"tags\"\n        value={value}\n        onChange={this.handleChange}\n        placeholder=\"Please choose a role\"\n        style={{ width: '100%' }}\n      >\n        {data.map(item => (\n          <Select.Option key={item.id} value={item.id}>\n            {item.name}\n          </Select.Option>\n        ))}\n      </Select>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}