{"ast":null,"code":"import \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nconst FormItem = Form.Item;\nconst EditableContext = /*#__PURE__*/React.createContext();\n\nconst EditableRow = (_ref) => {\n  let {\n    form,\n    index\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"form\", \"index\"]);\n\n  return __jsx(EditableContext.Provider, {\n    value: form\n  }, __jsx(\"tr\", props));\n};\n\nexport const EditableFormRow = Form.create()(EditableRow);\nexport class EditableCell extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"save\", () => {\n      const {\n        record,\n        handleSave\n      } = this.props;\n      this.form.validateFields((error, values) => {\n        if (error) {\n          return;\n        }\n\n        handleSave(_objectSpread(_objectSpread({}, record), values));\n      });\n    });\n\n    _defineProperty(this, \"renderFormItem\", (dataIndex, title, record) => {\n      if (dataIndex === 'method') {\n        return __jsx(FormItem, {\n          style: {\n            margin: 0\n          }\n        }, this.form.getFieldDecorator(dataIndex, {\n          rules: [{\n            required: true,\n            message: `Please enter${title}`\n          }],\n          initialValue: record[dataIndex]\n        })(__jsx(_Select, {\n          style: {\n            width: '100%'\n          },\n          onBlur: () => {\n            this.save();\n          }\n        }, __jsx(_Select.Option, {\n          value: \"GET\"\n        }, \"GET\"), __jsx(_Select.Option, {\n          value: \"POST\"\n        }, \"POST\"), __jsx(_Select.Option, {\n          value: \"PUT\"\n        }, \"PUT\"), __jsx(_Select.Option, {\n          value: \"DELETE\"\n        }, \"DELETE\"), __jsx(_Select.Option, {\n          value: \"PATCH\"\n        }, \"PATCH\"), __jsx(_Select.Option, {\n          value: \"HEAD\"\n        }, \"HEAD\"), __jsx(_Select.Option, {\n          value: \"OPTIONS\"\n        }, \"OPTIONS\"))));\n      }\n\n      return __jsx(FormItem, {\n        style: {\n          margin: 0\n        }\n      }, this.form.getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: `Please enter ${title}`\n        }],\n        initialValue: record[dataIndex]\n      })(__jsx(_Input, {\n        onBlur: () => {\n          this.save();\n        },\n        style: {\n          width: '100%'\n        }\n      })));\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      editable,\n      dataIndex,\n      title,\n      record,\n      index,\n      handleSave\n    } = _this$props,\n          restProps = _objectWithoutProperties(_this$props, [\"editable\", \"dataIndex\", \"title\", \"record\", \"index\", \"handleSave\"]);\n\n    return __jsx(\"td\", restProps, editable ? __jsx(EditableContext.Consumer, null, form => {\n      this.form = form;\n      return this.renderFormItem(dataIndex, title, record);\n    }) : restProps.children);\n  }\n\n}\n\nconst Test = () => {};\n\nexport default Test;","map":null,"metadata":{},"sourceType":"module"}