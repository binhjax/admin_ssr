{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/tree/style\";\nimport _Tree from \"antd/lib/tree\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\n\nvar _jsxFileName = \"/Volumes/ExternalData/Work/vnshop/admin/src/pages/system/menu.js\",\n    _dec,\n    _class,\n    _temp;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport PageHeaderLayout from '@/layouts/PageHeaderLayout';\nimport PButton from '@/components/PermButton';\nimport { formatDate } from '@/utils/utils';\nimport MenuCard from '../../components/Menu/MenuCard';\nimport WithDva from '../../utils/store';\nimport styles from './menu.less'; // @connect(({ menu, loading }) => ({\n//   menu,\n//   loading: loading.models.menu,\n// }))\n\nlet MenuList = (_dec = Form.create(), _dec(_class = (_temp = class MenuList extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedRowKeys: [],\n      selectedRows: [],\n      treeSelectedKeys: []\n    });\n\n    _defineProperty(this, \"onItemDisableClick\", item => {\n      this.dispatch({\n        type: 'menu/changeStatus',\n        payload: {\n          id: item.id,\n          status: 2\n        }\n      });\n    });\n\n    _defineProperty(this, \"onItemEnableClick\", item => {\n      this.dispatch({\n        type: 'menu/changeStatus',\n        payload: {\n          id: item.id,\n          status: 1\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleEditClick\", () => {\n      const {\n        selectedRows\n      } = this.state;\n\n      if (selectedRows.length === 0) {\n        return;\n      }\n\n      const item = selectedRows[0];\n      this.dispatch({\n        type: 'menu/loadForm',\n        payload: {\n          type: 'E',\n          id: item.id\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleAddClick\", () => {\n      this.dispatch({\n        type: 'menu/loadForm',\n        payload: {\n          type: 'A'\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleDelClick\", () => {\n      const {\n        selectedRows\n      } = this.state;\n\n      if (selectedRows.length === 0) {\n        return;\n      }\n\n      const item = selectedRows[0];\n\n      _Modal.confirm({\n        title: `Confirm to delete【menu data: ${item.name}】？`,\n        okText: 'confirm',\n        okType: 'danger',\n        cancelText: 'cancel',\n        onOk: this.handleDelOKClick.bind(this, item.id)\n      });\n    });\n\n    _defineProperty(this, \"handleTableSelectRow\", (record, selected) => {\n      const keys = [];\n      const rows = [];\n\n      if (selected) {\n        keys.push(record.id);\n        rows.push(record);\n      }\n\n      this.setState({\n        selectedRowKeys: keys,\n        selectedRows: rows\n      });\n    });\n\n    _defineProperty(this, \"onTableChange\", pagination => {\n      this.dispatch({\n        type: 'menu/fetch',\n        pagination: {\n          current: pagination.current,\n          pageSize: pagination.pageSize\n        }\n      });\n      this.clearSelectRows();\n    });\n\n    _defineProperty(this, \"onResetFormClick\", () => {\n      const {\n        form\n      } = this.props;\n      form.resetFields();\n      this.dispatch({\n        type: 'menu/fetch',\n        search: {\n          parent_id: this.getParentID()\n        },\n        pagination: {}\n      });\n    });\n\n    _defineProperty(this, \"onSearchFormSubmit\", e => {\n      if (e) {\n        e.preventDefault();\n      }\n\n      const {\n        form\n      } = this.props;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        }\n\n        this.dispatch({\n          type: 'menu/fetch',\n          search: _objectSpread(_objectSpread({}, values), {}, {\n            parent_id: this.getParentID()\n          }),\n          pagination: {}\n        });\n        this.clearSelectRows();\n      });\n    });\n\n    _defineProperty(this, \"handleFormSubmit\", data => {\n      this.dispatch({\n        type: 'menu/submit',\n        payload: data\n      });\n      this.clearSelectRows();\n    });\n\n    _defineProperty(this, \"handleFormCancel\", () => {\n      this.dispatch({\n        type: 'menu/changeFormVisible',\n        payload: false\n      });\n    });\n\n    _defineProperty(this, \"clearSelectRows\", () => {\n      const {\n        selectedRowKeys\n      } = this.state;\n\n      if (selectedRowKeys.length === 0) {\n        return;\n      }\n\n      this.setState({\n        selectedRowKeys: [],\n        selectedRows: []\n      });\n    });\n\n    _defineProperty(this, \"dispatch\", action => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(action);\n    });\n\n    _defineProperty(this, \"getParentID\", () => {\n      const {\n        treeSelectedKeys\n      } = this.state;\n      let parentID = '';\n\n      if (treeSelectedKeys.length > 0) {\n        [parentID] = treeSelectedKeys;\n      }\n\n      return parentID;\n    });\n\n    _defineProperty(this, \"renderTreeNodes\", data => data.map(item => {\n      if (item.children) {\n        return __jsx(_Tree.TreeNode, {\n          title: item.name,\n          key: item.id,\n          dataRef: item,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 11\n          }\n        }, this.renderTreeNodes(item.children));\n      }\n\n      return __jsx(_Tree.TreeNode, {\n        title: item.name,\n        key: item.id,\n        dataRef: item,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 14\n        }\n      });\n    }));\n  }\n\n  componentDidMount() {\n    this.dispatch({\n      type: 'menu/fetchTree'\n    });\n    this.dispatch({\n      type: 'menu/fetch',\n      search: {},\n      pagination: {}\n    });\n  }\n\n  handleDelOKClick(id) {\n    this.dispatch({\n      type: 'menu/del',\n      payload: {\n        id\n      }\n    });\n    this.clearSelectRows();\n  }\n\n  renderDataForm() {\n    return __jsx(MenuCard, {\n      onCancel: this.handleFormCancel,\n      onSubmit: this.handleFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 12\n      }\n    });\n  }\n\n  renderSearchForm() {\n    const {\n      form: {\n        getFieldDecorator\n      }\n    } = this.props;\n    return __jsx(Form, {\n      onSubmit: this.onSearchFormSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 7\n      }\n    }, __jsx(_Row, {\n      gutter: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, __jsx(_Col, {\n      span: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, getFieldDecorator('queryValue')(__jsx(_Input, {\n      placeholder: \"\\u8BF7\\u8F93\\u5165\\u9700\\u8981\\u67E5\\u8BE2\\u7684\\u5185\\u5BB9\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 48\n      }\n    })))), __jsx(_Col, {\n      span: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      style: {\n        overflow: 'hidden',\n        paddingTop: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 13\n      }\n    }, __jsx(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 15\n      }\n    }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n      style: {\n        marginLeft: 8\n      },\n      onClick: this.onResetFormClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 15\n      }\n    }, \"\\u91CD\\u7F6E\")))));\n  }\n\n  render() {\n    const {\n      loading,\n      menu: {\n        data: {\n          list,\n          pagination\n        },\n        treeData,\n        expandedKeys\n      }\n    } = this.props;\n    const {\n      selectedRowKeys,\n      selectedRows\n    } = this.state;\n    const columns = [{\n      title: 'Menu Name',\n      dataIndex: 'name',\n      width: 130,\n      render: (val, row) => {\n        if (row.show_status !== 1) {\n          return __jsx(_Badge, {\n            status: \"default\",\n            text: val,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 20\n            }\n          });\n        }\n\n        return __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 18\n          }\n        }, val);\n      }\n    }, {\n      title: 'Sort Value',\n      dataIndex: 'sequence',\n      width: 100\n    }, {\n      title: 'Menu Icon',\n      dataIndex: 'icon',\n      width: 100\n    }, {\n      title: 'Access Routing',\n      dataIndex: 'router',\n      width: 150\n    }, {\n      title: 'Status',\n      dataIndex: 'status',\n      width: 80,\n      render: val => {\n        if (val === 1) {\n          return __jsx(_Badge, {\n            status: \"success\",\n            text: \"Enable\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 20\n            }\n          });\n        }\n\n        return __jsx(_Badge, {\n          status: \"error\",\n          text: \"Deactivate\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 18\n          }\n        });\n      }\n    }, {\n      title: 'Created Time',\n      width: 150,\n      dataIndex: 'created_at',\n      render: val => __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 24\n        }\n      }, formatDate(val, 'YYYY-MM-DD'))\n    }, {\n      title: 'Remarks',\n      dataIndex: 'memo'\n    }];\n\n    const paginationProps = _objectSpread({\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: total => __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 27\n        }\n      }, \"Total \", total, \" pages\")\n    }, pagination);\n\n    const breadcrumbList = [{\n      title: 'System Management'\n    }, {\n      title: 'Menu management',\n      href: '/system/menu'\n    }];\n    return __jsx(PageHeaderLayout, {\n      title: \"Menu management\",\n      breadcrumbList: breadcrumbList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 7\n      }\n    }, __jsx(_Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }\n    }, __jsx(_Layout.Sider, {\n      width: 180,\n      style: {\n        background: '#fff',\n        borderRight: '1px solid lightGray',\n        padding: 15,\n        overflow: 'auto'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 11\n      }\n    }, __jsx(_Tree, {\n      expandedKeys: expandedKeys,\n      onSelect: keys => {\n        this.setState({\n          treeSelectedKeys: keys\n        });\n        const {\n          menu: {\n            search\n          }\n        } = this.props;\n        const item = {\n          parentID: undefined\n        };\n\n        if (keys.length > 0) {\n          [item.parentID] = keys;\n        }\n\n        this.dispatch({\n          type: 'menu/fetch',\n          search: _objectSpread(_objectSpread({}, search), item),\n          pagination: {}\n        });\n      },\n      onExpand: keys => {\n        this.dispatch({\n          type: 'menu/saveExpandedKeys',\n          payload: keys\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, this.renderTreeNodes(treeData))), __jsx(_Layout.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }\n    }, __jsx(_Card, {\n      bordered: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 13\n      }\n    }, __jsx(\"div\", {\n      className: styles.tableList,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      className: styles.tableListForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 17\n      }\n    }, this.renderSearchForm()), __jsx(\"div\", {\n      className: styles.tableListOperator,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 17\n      }\n    }, __jsx(PButton, {\n      code: \"add\",\n      type: \"primary\",\n      onClick: () => this.handleAddClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 19\n      }\n    }, \"New\"), selectedRowKeys.length === 1 && [__jsx(PButton, {\n      key: \"edit\",\n      code: \"edit\",\n      onClick: () => this.handleEditClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 21\n      }\n    }, \"Edit\"), __jsx(PButton, {\n      key: \"del\",\n      code: \"del\",\n      type: \"danger\",\n      onClick: () => this.handleDelClick(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 21\n      }\n    }, \"Delete\"), selectedRows[0].status === 2 && __jsx(PButton, {\n      key: \"enable\",\n      code: \"enable\",\n      onClick: () => this.onItemEnableClick(selectedRows[0]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 23\n      }\n    }, \"Enable\"), selectedRows[0].status === 1 && __jsx(PButton, {\n      key: \"disable\",\n      code: \"disable\",\n      type: \"danger\",\n      onClick: () => this.onItemDisableClick(selectedRows[0]),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 23\n      }\n    }, \"Disable\")]), __jsx(_Table, {\n      rowSelection: {\n        selectedRowKeys,\n        onSelect: this.handleTableSelectRow\n      },\n      loading: loading,\n      rowKey: record => record.id,\n      dataSource: list,\n      columns: columns,\n      pagination: paginationProps,\n      onChange: this.onTableChange,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }\n    }))))), this.renderDataForm());\n  }\n\n}, _temp)) || _class);\nexport default WithDva(({\n  menu,\n  loading\n}) => ({\n  menu,\n  loading: loading.models.menu\n}))(MenuList); // export default MenuList;","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/pages/system/menu.js"],"names":["React","PureComponent","Form","PageHeaderLayout","PButton","formatDate","MenuCard","WithDva","styles","MenuList","create","selectedRowKeys","selectedRows","treeSelectedKeys","item","dispatch","type","payload","id","status","state","length","confirm","title","name","okText","okType","cancelText","onOk","handleDelOKClick","bind","record","selected","keys","rows","push","setState","pagination","current","pageSize","clearSelectRows","form","props","resetFields","search","parent_id","getParentID","e","preventDefault","validateFields","err","values","data","action","parentID","map","children","renderTreeNodes","componentDidMount","renderDataForm","handleFormCancel","handleFormSubmit","renderSearchForm","getFieldDecorator","onSearchFormSubmit","overflow","paddingTop","marginLeft","onResetFormClick","render","loading","menu","list","treeData","expandedKeys","columns","dataIndex","width","val","row","show_status","paginationProps","showSizeChanger","showQuickJumper","showTotal","total","breadcrumbList","href","background","borderRight","padding","undefined","tableList","tableListForm","tableListOperator","handleAddClick","handleEditClick","handleDelClick","onItemEnableClick","onItemDisableClick","onSelect","handleTableSelectRow","onTableChange","models"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { Row, Col, Card, Input, Button, Table, Modal, Layout, Tree, Badge } from 'antd';\nimport PageHeaderLayout from '@/layouts/PageHeaderLayout';\nimport PButton from '@/components/PermButton';\nimport { formatDate } from '@/utils/utils';\nimport MenuCard from '../../components/Menu/MenuCard';\nimport WithDva from '../../utils/store';\n\nimport styles from './menu.less';\n\n// @connect(({ menu, loading }) => ({\n//   menu,\n//   loading: loading.models.menu,\n// }))\n\n@Form.create()\nclass MenuList extends PureComponent {\n  state = {\n    selectedRowKeys: [],\n    selectedRows: [],\n    treeSelectedKeys: [],\n  };\n\n  componentDidMount() {\n    this.dispatch({\n      type: 'menu/fetchTree',\n    });\n\n    this.dispatch({\n      type: 'menu/fetch',\n      search: {},\n      pagination: {},\n    });\n  }\n\n  onItemDisableClick = item => {\n    this.dispatch({\n      type: 'menu/changeStatus',\n      payload: { id: item.id, status: 2 },\n    });\n  };\n\n  onItemEnableClick = item => {\n    this.dispatch({\n      type: 'menu/changeStatus',\n      payload: { id: item.id, status: 1 },\n    });\n  };\n\n  handleEditClick = () => {\n    const { selectedRows } = this.state;\n    if (selectedRows.length === 0) {\n      return;\n    }\n    const item = selectedRows[0];\n    this.dispatch({\n      type: 'menu/loadForm',\n      payload: {\n        type: 'E',\n        id: item.id,\n      },\n    });\n  };\n\n  handleAddClick = () => {\n    this.dispatch({\n      type: 'menu/loadForm',\n      payload: {\n        type: 'A',\n      },\n    });\n  };\n\n  handleDelClick = () => {\n    const { selectedRows } = this.state;\n    if (selectedRows.length === 0) {\n      return;\n    }\n    const item = selectedRows[0];\n    Modal.confirm({\n      title: `Confirm to delete【menu data: ${item.name}】？`,\n      okText: 'confirm',\n      okType: 'danger',\n      cancelText: 'cancel',\n      onOk: this.handleDelOKClick.bind(this, item.id),\n    });\n  };\n\n  handleTableSelectRow = (record, selected) => {\n    const keys = [];\n    const rows = [];\n    if (selected) {\n      keys.push(record.id);\n      rows.push(record);\n    }\n    this.setState({\n      selectedRowKeys: keys,\n      selectedRows: rows,\n    });\n  };\n\n  onTableChange = pagination => {\n    this.dispatch({\n      type: 'menu/fetch',\n      pagination: {\n        current: pagination.current,\n        pageSize: pagination.pageSize,\n      },\n    });\n    this.clearSelectRows();\n  };\n\n  onResetFormClick = () => {\n    const { form } = this.props;\n    form.resetFields();\n    this.dispatch({\n      type: 'menu/fetch',\n      search: { parent_id: this.getParentID() },\n      pagination: {},\n    });\n  };\n\n  onSearchFormSubmit = e => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    const { form } = this.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      this.dispatch({\n        type: 'menu/fetch',\n        search: {\n          ...values,\n          parent_id: this.getParentID(),\n        },\n        pagination: {},\n      });\n      this.clearSelectRows();\n    });\n  };\n\n  handleFormSubmit = data => {\n    this.dispatch({\n      type: 'menu/submit',\n      payload: data,\n    });\n    this.clearSelectRows();\n  };\n\n  handleFormCancel = () => {\n    this.dispatch({\n      type: 'menu/changeFormVisible',\n      payload: false,\n    });\n  };\n\n  clearSelectRows = () => {\n    const { selectedRowKeys } = this.state;\n    if (selectedRowKeys.length === 0) {\n      return;\n    }\n    this.setState({ selectedRowKeys: [], selectedRows: [] });\n  };\n\n  dispatch = action => {\n    const { dispatch } = this.props;\n    dispatch(action);\n  };\n\n  getParentID = () => {\n    const { treeSelectedKeys } = this.state;\n    let parentID = '';\n    if (treeSelectedKeys.length > 0) {\n      [parentID] = treeSelectedKeys;\n    }\n    return parentID;\n  };\n\n  handleDelOKClick(id) {\n    this.dispatch({\n      type: 'menu/del',\n      payload: { id },\n    });\n    this.clearSelectRows();\n  }\n\n  renderDataForm() {\n    return <MenuCard onCancel={this.handleFormCancel} onSubmit={this.handleFormSubmit} />;\n  }\n\n  renderTreeNodes = data =>\n    data.map(item => {\n      if (item.children) {\n        return (\n          <Tree.TreeNode title={item.name} key={item.id} dataRef={item}>\n            {this.renderTreeNodes(item.children)}\n          </Tree.TreeNode>\n        );\n      }\n      return <Tree.TreeNode title={item.name} key={item.id} dataRef={item} />;\n    });\n\n  renderSearchForm() {\n    const {\n      form: { getFieldDecorator },\n    } = this.props;\n    return (\n      <Form onSubmit={this.onSearchFormSubmit}>\n        <Row gutter={16}>\n          <Col span={8}>\n            <Form.Item>\n              {getFieldDecorator('queryValue')(<Input placeholder=\"请输入需要查询的内容\" />)}\n            </Form.Item>\n          </Col>\n          <Col span={8}>\n            <div style={{ overflow: 'hidden', paddingTop: 4 }}>\n              <Button type=\"primary\" htmlType=\"submit\">\n                查询\n              </Button>\n              <Button style={{ marginLeft: 8 }} onClick={this.onResetFormClick}>\n                重置\n              </Button>\n            </div>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n\n  render() {\n    const {\n      loading,\n      menu: {\n        data: { list, pagination },\n        treeData,\n        expandedKeys,\n      },\n    } = this.props;\n\n    const { selectedRowKeys, selectedRows } = this.state;\n\n    const columns = [\n      {\n        title: 'Menu Name',\n        dataIndex: 'name',\n        width: 130,\n        render: (val, row) => {\n          if (row.show_status !== 1) {\n            return <Badge status=\"default\" text={val} />;\n          }\n          return <span>{val}</span>;\n        },\n      },\n      {\n        title: 'Sort Value',\n        dataIndex: 'sequence',\n        width: 100,\n      },\n      {\n        title: 'Menu Icon',\n        dataIndex: 'icon',\n        width: 100,\n      },\n      {\n        title: 'Access Routing',\n        dataIndex: 'router',\n        width: 150,\n      },\n      {\n        title: 'Status',\n        dataIndex: 'status',\n        width: 80,\n        render: val => {\n          if (val === 1) {\n            return <Badge status=\"success\" text=\"Enable\" />;\n          }\n          return <Badge status=\"error\" text=\"Deactivate\" />;\n        },\n      },\n      {\n        title: 'Created Time',\n        width: 150,\n        dataIndex: 'created_at',\n        render: val => <span>{formatDate(val, 'YYYY-MM-DD')}</span>,\n      },\n      {\n        title: 'Remarks',\n        dataIndex: 'memo',\n      },\n    ];\n\n    const paginationProps = {\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: total => <span>Total {total} pages</span>,\n      ...pagination,\n    };\n\n    const breadcrumbList = [\n      { title: 'System Management' },\n      { title: 'Menu management', href: '/system/menu' },\n    ];\n\n    return (\n      <PageHeaderLayout title=\"Menu management\" breadcrumbList={breadcrumbList}>\n        <Layout>\n          <Layout.Sider\n            width={180}\n            style={{\n              background: '#fff',\n              borderRight: '1px solid lightGray',\n              padding: 15,\n              overflow: 'auto',\n            }}\n          >\n            <Tree\n              expandedKeys={expandedKeys}\n              onSelect={keys => {\n                this.setState({\n                  treeSelectedKeys: keys,\n                });\n\n                const {\n                  menu: { search },\n                } = this.props;\n\n                const item = {\n                  parentID: undefined,\n                };\n\n                if (keys.length > 0) {\n                  [item.parentID] = keys;\n                }\n\n                this.dispatch({\n                  type: 'menu/fetch',\n                  search: { ...search, ...item },\n                  pagination: {},\n                });\n              }}\n              onExpand={keys => {\n                this.dispatch({\n                  type: 'menu/saveExpandedKeys',\n                  payload: keys,\n                });\n              }}\n            >\n              {this.renderTreeNodes(treeData)}\n            </Tree>\n          </Layout.Sider>\n          <Layout.Content>\n            <Card bordered={false}>\n              <div className={styles.tableList}>\n                <div className={styles.tableListForm}>{this.renderSearchForm()}</div>\n                <div className={styles.tableListOperator}>\n                  <PButton code=\"add\" type=\"primary\" onClick={() => this.handleAddClick()}>\n                    New\n                  </PButton>\n                  {selectedRowKeys.length === 1 && [\n                    <PButton key=\"edit\" code=\"edit\" onClick={() => this.handleEditClick()}>\n                      Edit\n                    </PButton>,\n                    <PButton\n                      key=\"del\"\n                      code=\"del\"\n                      type=\"danger\"\n                      onClick={() => this.handleDelClick()}\n                    >\n                      Delete\n                    </PButton>,\n                    selectedRows[0].status === 2 && (\n                      <PButton\n                        key=\"enable\"\n                        code=\"enable\"\n                        onClick={() => this.onItemEnableClick(selectedRows[0])}\n                      >\n                        Enable\n                      </PButton>\n                    ),\n                    selectedRows[0].status === 1 && (\n                      <PButton\n                        key=\"disable\"\n                        code=\"disable\"\n                        type=\"danger\"\n                        onClick={() => this.onItemDisableClick(selectedRows[0])}\n                      >\n                        Disable\n                      </PButton>\n                    ),\n                  ]}\n                </div>\n                <Table\n                  rowSelection={{\n                    selectedRowKeys,\n                    onSelect: this.handleTableSelectRow,\n                  }}\n                  loading={loading}\n                  rowKey={record => record.id}\n                  dataSource={list}\n                  columns={columns}\n                  pagination={paginationProps}\n                  onChange={this.onTableChange}\n                  size=\"small\"\n                />\n              </div>\n            </Card>\n          </Layout.Content>\n        </Layout>\n        {this.renderDataForm()}\n      </PageHeaderLayout>\n    );\n  }\n}\n\nexport default WithDva(({ menu, loading }) => ({\n  menu,\n  loading: loading.models.menu,\n}))(MenuList);\n// export default MenuList;\n"]},"metadata":{},"sourceType":"module"}