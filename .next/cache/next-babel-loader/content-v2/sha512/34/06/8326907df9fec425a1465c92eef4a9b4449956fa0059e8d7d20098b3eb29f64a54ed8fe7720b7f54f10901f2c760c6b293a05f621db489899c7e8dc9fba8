{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx\";\nimport React from 'react';\nimport ActionMenu from './components/ActionMenu';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget = props => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState(); // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState();\n  const [selectedNode, setSelectedNode] = React.useState();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState();\n  const [link, setLink] = React.useState(); // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = e => {\n    selectedNode.getOptions().extras = e.target.value; // dispatch(action.setSelectedNode(selectedNode));\n\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    port.getOptions().extras[id] = value; // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n\n  const openDetail = value => {\n    setPort(value);\n    setActive('detail');\n  };\n\n  const confirmDeletePort = port => {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, this),\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n\n      onOk() {\n        selectedNode.deletePort(port); // dispatch(action.setPorts(selectedNode.getPorts()));\n      }\n\n    });\n  };\n\n  const selectPort = value => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', ''); // dispatch(action.setPorts(selectedNode.getPorts()));\n\n    openDetail(port);\n  }; // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ActionMenu, {\n        app: props.app\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Layer, {\n      onClick: e => {\n        e.stopPropagation();\n        setSelectedPort(undefined);\n      },\n      onDrop: event => {\n        var node;\n        node = new CustomNodeModel('Name');\n        var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        props.app.getDiagramEngine().getModel().addNode(node);\n        forceUpdate();\n      },\n      onDragOver: event => {\n        event.preventDefault();\n      },\n      children: /*#__PURE__*/_jsxDEV(DemoCanvasWidget, {\n        background: \"#ffff\",\n        children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n          engine: props.app.getDiagramEngine()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\nexport default BodyWidget;","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx"],"names":["React","ActionMenu","CanvasWidget","DemoCanvasWidget","CustomNodeModel","styled","ExclamationCircleOutlined","useDispatch","Layer","div","BodyWidget","props","dispatch","updateState","useState","forceUpdate","useCallback","port","setPort","selectedNode","setSelectedNode","active","setActive","selectedPort","setSelectedPort","link","setLink","handelChangeName","e","getOptions","extras","target","value","app","getDiagramEngine","repaintCanvas","handleChangePort","id","openDetail","confirmDeletePort","confirm","title","icon","content","okText","cancelText","onOk","deletePort","selectPort","addPort","addCustomPort","stopPropagation","undefined","event","node","point","getRelativeMousePoint","setPosition","getModel","addNode","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\n\nimport { Application } from './Application';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Card, Col, Row, Modal } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\n// import * as action from '../../actions/node';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nexport interface BodyWidgetProps {\n  app: Application;\n}\n\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget: React.FC<BodyWidgetProps> = props => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState();\n  // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState<CustomPortModel>();\n  const [selectedNode, setSelectedNode] = React.useState<CustomNodeModel>();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState<PortModel>();\n  const [link, setLink] = React.useState<CustomLinkModel>();\n  // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = (e: any) => {\n    selectedNode.getOptions().extras = e.target.value;\n    // dispatch(action.setSelectedNode(selectedNode));\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = e => {\n    const { id, value } = e.target;\n    port.getOptions().extras[id] = value;\n    // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n  const openDetail = value => {\n    setPort(value as CustomPortModel);\n    setActive('detail');\n  };\n  const confirmDeletePort = (port: PortModel) => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        selectedNode.deletePort(port as CustomPortModel);\n        // dispatch(action.setPorts(selectedNode.getPorts()));\n      },\n    });\n  };\n  const selectPort = value => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', '');\n    // dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n  return (\n    <div>\n      <div>\n        <ActionMenu app={props.app} />\n      </div>\n      <Layer\n        onClick={e => {\n          e.stopPropagation();\n          setSelectedPort(undefined);\n        }}\n        onDrop={event => {\n          var node: CustomNodeModel;\n          node = new CustomNodeModel('Name');\n          var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n          node.setPosition(point);\n          props.app\n            .getDiagramEngine()\n            .getModel()\n            .addNode(node);\n          forceUpdate();\n        }}\n        onDragOver={event => {\n          event.preventDefault();\n        }}\n      >\n        <DemoCanvasWidget background=\"#ffff\">\n          <CanvasWidget engine={props.app.getDiagramEngine()} />\n        </DemoCanvasWidget>\n      </Layer>\n    </div>\n  );\n};\nexport default BodyWidget;\n"]},"metadata":{},"sourceType":"module"}