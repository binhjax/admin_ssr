{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/popover/style\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/CustomNode/CustomNodeWidget.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  width: 20px;\\n  height: 20px;\\n  background: #f6f6f6;\\n  cursor: pointer;\\n  margin-top: 5px;\\n\\n  &:hover {\\n    background: #deecf3;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\n// import * as action from '../../actions/node';\nimport { PortWidget } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\nimport { KeyOutlined, MoreOutlined } from '@ant-design/icons';\nvar Text = _Typography.Text;\nvar Option = _Select.Option;\n\n/**\n * @author Nguyen Tuan Quang\n */\nexport var Port = styled.div(_templateObject());\n_c = Port;\nvar styles = {\n  cardHeader: {\n    color: 'white',\n    border: ' 0 solid #e2e8f0',\n    fontWeight: 400,\n    fontSize: '20px',\n    padding: '5px 20px',\n    height: '40px',\n    background: '#316896',\n    marginBottom: '-2px'\n  },\n  rightPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '380px'\n  },\n  leftPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '0'\n  },\n  fieldText: {\n    fontSize: '20px'\n  }\n};\n\nvar CustomNodeWidget = /*#__PURE__*/function (_React$Component) {\n  _inherits(CustomNodeWidget, _React$Component);\n\n  var _super = _createSuper(CustomNodeWidget);\n\n  function CustomNodeWidget() {\n    _classCallCheck(this, CustomNodeWidget);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CustomNodeWidget, [{\n    key: \"render\",\n    // const { dispatch } = props;\n    // const [editNode, setEditNode] = React.useState(false);\n    // const [name, setName] = React.useState('');\n    // const [hover, setHover] = React.useState('');\n    // // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n    // const dispatch = useDispatch();\n    // const save = () => {\n    //   props.node.addCustomPort('new_col', '', '');\n    //   props.engine.repaintCanvas();\n    // };\n    // const confirm = () => {\n    //   Modal.confirm({\n    //     title: 'Confirm',\n    //     icon: <ExclamationCircleOutlined />,\n    //     content: 'Confirm delete table',\n    //     okText: 'Yes',\n    //     cancelText: 'No',\n    //     onOk() {\n    //       props.node.remove();\n    //       props.engine.repaintCanvas();\n    //     },\n    //   });\n    // };\n    // const confirmDeletePort = (port: PortModel) => {\n    //   Modal.confirm({\n    //     title: 'Confirm',\n    //     icon: <ExclamationCircleOutlined />,\n    //     content: 'Confirm delete port',\n    //     okText: 'Yes',\n    //     cancelText: 'No',\n    //     onOk() {\n    //       props.node.removePort(port);\n    //       dispatch(action.setPorts(props.node.getPorts()));\n    //       props.engine.repaintCanvas();\n    //     },\n    //   });\n    // };\n    // const openEdit = () => {\n    //   setEditNode(true);\n    //   setName(props.node.getOptions().extras);\n    //   dispatch(action.setPorts(props.node.getPorts()));\n    // };\n    // const closeEdit = () => {\n    //   setEditNode(false);\n    //   setName('');\n    // };\n    // const handelChangeName = (e: any) => {\n    //   setName(e.target.value);\n    // };\n    // const handleChangePort = (e) => {\n    //   const { id, name, value } = e.target;\n    //   ports[name].getOptions().extras[id] = value;\n    //   // dispatch(action.setPorts({ ...ports }));\n    // };\n    // const submit = () => {\n    //   props.node.setName(name);\n    //   closeEdit();\n    // };\n    // const handleDeleteButton = (e, value) => {\n    //   e.stopPropagation();\n    //   if (e.key === 'Delete') {\n    //     confirmDeletePort(value);\n    //   }\n    // };\n    // const handleRowClick = (e, key, value) => {\n    //   setHover(key);\n    //   // dispatch(action.setPort(value));\n    //   props.node.setSelected(false);\n    // };\n    // const selectTable = (e) => {\n    //   props.node.setSelected(false);\n    //   // dispatch(action.setSelectedNode(props.node));\n    //   // dispatch(action.setActive('table'));\n    // };\n    // const content = (\n    //   <Row>\n    //     <Button\n    //       type='ghost'\n    //       icon={<PlusOutlined style={{ color: 'green' }} />}\n    //       onClick={() => save()}\n    //     />\n    //     <Button\n    //       type='ghost'\n    //       icon={<EditOutlined style={{ color: 'cyan' }} />}\n    //       onClick={() => openEdit()}\n    //     />\n    //     <Button\n    //       type='ghost'\n    //       icon={<DeleteOutlined style={{ color: 'red' }} />}\n    //       onClick={() => confirm()}\n    //     />\n    //   </Row>\n    // );\n    value: function render() {\n      var _this = this;\n\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: 'custom-node',\n          style: {\n            position: 'relative',\n            minWidth: props.size * 4,\n            minHeight: props.size\n          },\n          onKeyDown: function onKeyDown(e) {\n            e.stopPropagation();\n\n            if (e.key === 'Delete') {\n              confirm();\n            }\n          },\n          onClick: function onClick(e) {\n            selectTable(e);\n          },\n          tabIndex: -1,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.cardHeader,\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: props.node.getOptions().extras\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 11\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              background: '#F6F6F6',\n              padding: '20px',\n              border: 'none'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                position: 'absolute',\n                top: '0',\n                right: '0'\n              },\n              children: /*#__PURE__*/_jsxDEV(_Popover, {\n                placement: \"rightBottom\",\n                content: content,\n                trigger: \"focus\",\n                children: /*#__PURE__*/_jsxDEV(_Button, {\n                  type: \"ghost\",\n                  style: {\n                    border: 'none'\n                  },\n                  icon: /*#__PURE__*/_jsxDEV(MoreOutlined, {\n                    style: {\n                      color: 'white',\n                      fontSize: '20px',\n                      paddingTop: '5px'\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 313,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 309,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 308,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 307,\n              columnNumber: 11\n            }, this), Object.entries(props.node.getPorts()).map(function (_ref, index) {\n              var _ref2 = _slicedToArray(_ref, 2),\n                  key = _ref2[0],\n                  value = _ref2[1];\n\n              return value.getOptions().extras.key === 'PRIMARY KEY' ? /*#__PURE__*/_jsxDEV(_Row, {\n                onFocus: function onFocus() {\n                  return setHover(key);\n                },\n                onBlur: function onBlur() {\n                  return setHover('');\n                },\n                style: {\n                  backgroundColor: hover === key ? '#4770FF' : '',\n                  fontWeight: 'bold',\n                  fontSize: '20px'\n                },\n                children: [/*#__PURE__*/_jsxDEV(PortWidget, {\n                  port: value,\n                  engine: props.engine,\n                  style: styles.leftPort,\n                  children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 331,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(PortWidget, {\n                  port: value,\n                  engine: props.engine,\n                  style: styles.rightPort,\n                  children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 334,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 333,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(_Col, {\n                  span: 10,\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    children: value.getOptions().extras.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(_Col, {\n                  span: 8,\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    style: {\n                      color: '#dbdd4d'\n                    },\n                    children: value.getOptions().extras.type\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(_Col, {\n                  span: 3,\n                  children: /*#__PURE__*/_jsxDEV(Text, {\n                    children: \"PK\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 343,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 342,\n                  columnNumber: 17\n                }, _this), /*#__PURE__*/_jsxDEV(_Col, {\n                  span: 3,\n                  children: /*#__PURE__*/_jsxDEV(KeyOutlined, {\n                    style: {\n                      color: 'yellow',\n                      fontSize: 20\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 346,\n                    columnNumber: 19\n                  }, _this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 345,\n                  columnNumber: 17\n                }, _this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 320,\n                columnNumber: 15\n              }, _this) : '';\n            }), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 5\n      }, this);\n    }\n  }]);\n\n  return CustomNodeWidget;\n}(React.Component);\n\n;\nexport default CustomNodeWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"Port\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/CustomNode/CustomNodeWidget.tsx"],"names":["React","PortWidget","styled","KeyOutlined","MoreOutlined","Text","Option","Port","div","styles","cardHeader","color","border","fontWeight","fontSize","padding","height","background","marginBottom","rightPort","width","position","left","leftPort","fieldText","CustomNodeWidget","minWidth","props","size","minHeight","e","stopPropagation","key","confirm","selectTable","node","getOptions","extras","top","right","content","paddingTop","Object","entries","getPorts","map","index","value","setHover","backgroundColor","hover","engine","name","type","Component"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch, useSelector } from 'react-redux';\n// import * as action from '../../actions/node';\nimport { DiagramEngine, PortWidget, PortModel } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\nimport { TYPE } from '../../const';\nimport {\n  ExclamationCircleOutlined,\n  PlusOutlined,\n  EditOutlined,\n  KeyOutlined,\n  MoreOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport { Col, Modal, Input, Button, Typography, Row, Popover, AutoComplete, Select } from 'antd';\nconst { Text } = Typography;\nconst { Option } = Select;\nexport interface CustomNodeWidgetProps {\n  node: CustomNodeModel;\n  engine: DiagramEngine;\n  size?: number | undefined;\n  dispatch: any;\n}\n\n/**\n * @author Nguyen Tuan Quang\n */\nexport const Port = styled.div`\n  width: 20px;\n  height: 20px;\n  background: #f6f6f6;\n  cursor: pointer;\n  margin-top: 5px;\n\n  &:hover {\n    background: #deecf3;\n  }\n`;\n\nconst styles = {\n  cardHeader: {\n    color: 'white',\n    border: ' 0 solid #e2e8f0',\n    fontWeight: 400,\n    fontSize: '20px',\n    padding: '5px 20px',\n    height: '40px',\n    background: '#316896',\n    marginBottom: '-2px',\n  },\n  rightPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '380px',\n  },\n  leftPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '0',\n  },\n  fieldText: { fontSize: '20px' },\n};\nclass CustomNodeWidget extends React.Component<CustomNodeWidgetProps>  {\n  \n  // const { dispatch } = props;\n  // const [editNode, setEditNode] = React.useState(false);\n  // const [name, setName] = React.useState('');\n  // const [hover, setHover] = React.useState('');\n  // // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n  // const dispatch = useDispatch();\n  // const save = () => {\n  //   props.node.addCustomPort('new_col', '', '');\n  //   props.engine.repaintCanvas();\n  // };\n  // const confirm = () => {\n  //   Modal.confirm({\n  //     title: 'Confirm',\n  //     icon: <ExclamationCircleOutlined />,\n  //     content: 'Confirm delete table',\n  //     okText: 'Yes',\n  //     cancelText: 'No',\n  //     onOk() {\n  //       props.node.remove();\n  //       props.engine.repaintCanvas();\n  //     },\n  //   });\n  // };\n  // const confirmDeletePort = (port: PortModel) => {\n  //   Modal.confirm({\n  //     title: 'Confirm',\n  //     icon: <ExclamationCircleOutlined />,\n  //     content: 'Confirm delete port',\n  //     okText: 'Yes',\n  //     cancelText: 'No',\n  //     onOk() {\n  //       props.node.removePort(port);\n  //       dispatch(action.setPorts(props.node.getPorts()));\n  //       props.engine.repaintCanvas();\n  //     },\n  //   });\n  // };\n  // const openEdit = () => {\n  //   setEditNode(true);\n  //   setName(props.node.getOptions().extras);\n  //   dispatch(action.setPorts(props.node.getPorts()));\n  // };\n  // const closeEdit = () => {\n  //   setEditNode(false);\n  //   setName('');\n  // };\n  // const handelChangeName = (e: any) => {\n  //   setName(e.target.value);\n  // };\n  // const handleChangePort = (e) => {\n  //   const { id, name, value } = e.target;\n\n  //   ports[name].getOptions().extras[id] = value;\n  //   // dispatch(action.setPorts({ ...ports }));\n  // };\n  // const submit = () => {\n  //   props.node.setName(name);\n  //   closeEdit();\n  // };\n  // const handleDeleteButton = (e, value) => {\n  //   e.stopPropagation();\n  //   if (e.key === 'Delete') {\n  //     confirmDeletePort(value);\n  //   }\n  // };\n  // const handleRowClick = (e, key, value) => {\n  //   setHover(key);\n  //   // dispatch(action.setPort(value));\n  //   props.node.setSelected(false);\n  // };\n  // const selectTable = (e) => {\n  //   props.node.setSelected(false);\n  //   // dispatch(action.setSelectedNode(props.node));\n  //   // dispatch(action.setActive('table'));\n  // };\n  // const content = (\n  //   <Row>\n  //     <Button\n  //       type='ghost'\n  //       icon={<PlusOutlined style={{ color: 'green' }} />}\n  //       onClick={() => save()}\n  //     />\n  //     <Button\n  //       type='ghost'\n  //       icon={<EditOutlined style={{ color: 'cyan' }} />}\n  //       onClick={() => openEdit()}\n  //     />\n  //     <Button\n  //       type='ghost'\n  //       icon={<DeleteOutlined style={{ color: 'red' }} />}\n  //       onClick={() => confirm()}\n  //     />\n  //   </Row>\n  // );\nrender(){\n  return (\n    <div>\n      {/* <Modal\n        visible={editNode}\n        onCancel={() => closeEdit()}\n        okText='Save'\n        cancelText='Cancel'\n        onOk={() => submit()}\n      >\n        Name:\n        <Input value={name} name='name' key='name' onChange={handelChangeName} />\n        Body:\n        {ports !== undefined\n          ? Object.entries(ports).map(([key, value], index: any) =>\n              value.getOptions().extras.key === 'PRIMARY KEY' ? (\n                <Row gutter={16} key={index}>\n                  <Col span='10'>\n                    <Input\n                      id='name'\n                      value={value.getOptions().extras.name}\n                      name={key}\n                      key={index}\n                      onChange={handleChangePort}\n                    />\n                  </Col>\n                  <Col span='8'>\n                    <AutoComplete\n                      style={{ width: 150 }}\n                      options={TYPE}\n                      filterOption={(inputValue, option) =>\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                      }\n                      value={value.getOptions().extras.type}\n                      onChange={(type) => {\n                        value.getOptions().extras.type = type;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                      onSelect={(type) => {\n                        value.getOptions().extras.type = type;\n\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    ></AutoComplete>\n                  </Col>\n                  <Col span='6'>\n                    <Select\n                      defaultValue={value.getOptions().extras.key}\n                      style={{ width: 120 }}\n                      onChange={(key) => {\n                        value.getOptions().extras.key = key;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    >\n                      <Option value=''>null</Option>\n                      <Option value='PRIMARY KEY'>PRIMARY KEY</Option>\n                    </Select>\n                  </Col>\n                </Row>\n              ) : (\n                ''\n              )\n            )\n          : ''}\n        <hr />\n        {ports !== undefined\n          ? Object.entries(ports).map(([key, value], index: any) =>\n              value.getOptions().extras.key !== 'PRIMARY KEY' ? (\n                <Row gutter={16} key={index} style={{ paddingTop: '5px' }}>\n                  <Col span='10'>\n                    <Input\n                      id='name'\n                      value={value.getOptions().extras.name}\n                      name={key}\n                      key={index}\n                      onChange={handleChangePort}\n                    />\n                  </Col>\n                  <Col span='8'>\n                    <AutoComplete\n                      style={{ width: 150 }}\n                      options={TYPE}\n                      filterOption={(inputValue, option) =>\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                      }\n                      value={value.getOptions().extras.type}\n                      onChange={(type) => {\n                        value.getOptions().extras.type = type;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                      onSelect={(type) => {\n                        value.getOptions().extras.type = type;\n\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    ></AutoComplete>\n                  </Col>\n                  <Col span='6'>\n                    <Select\n                      defaultValue={value.getOptions().extras.key}\n                      style={{ width: 120 }}\n                      onChange={(key) => {\n                        value.getOptions().extras.key = key;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    >\n                      <Option value=''>null</Option>\n                      <Option value='PRIMARY KEY'>PRIMARY KEY</Option>\n                    </Select>\n                  </Col>\n                </Row>\n              ) : (\n                ''\n              )\n            )\n          : ''}\n      </Modal> */}\n      <div\n        className={'custom-node'}\n        style={{\n          position: 'relative',\n          minWidth: props.size * 4,\n          minHeight: props.size,\n        }}\n        onKeyDown={(e) => {\n          e.stopPropagation();\n          if (e.key === 'Delete') {\n            confirm();\n          }\n        }}\n        onClick={(e) => {\n          selectTable(e);\n        }}\n        tabIndex={-1}\n      >\n        <div style={styles.cardHeader}>\n          <p>{props.node.getOptions().extras}</p>\n        </div>\n        <div\n          style={{\n            background: '#F6F6F6',\n            padding: '20px',\n            border: 'none',\n          }}\n        >\n          <div style={{ position: 'absolute', top: '0', right: '0' }}>\n            <Popover placement='rightBottom' content={content} trigger='focus'>\n              <Button\n                type='ghost'\n                style={{ border: 'none' }}\n                icon={\n                  <MoreOutlined style={{ color: 'white', fontSize: '20px', paddingTop: '5px' }} />\n                }\n              />\n            </Popover>\n          </div>\n          {Object.entries(props.node.getPorts()).map(([key, value], index: any) =>\n            value.getOptions().extras.key === 'PRIMARY KEY' ? (\n              <Row\n                key={index}\n                onFocus={() => setHover(key)}\n                onBlur={() => setHover('')}\n                style={{\n                  backgroundColor: hover === key ? '#4770FF' : '',\n                  fontWeight: 'bold',\n                  fontSize: '20px',\n                }}\n              >\n                <PortWidget port={value} engine={props.engine} style={styles.leftPort}>\n                  <Port />\n                </PortWidget>\n                <PortWidget port={value} engine={props.engine} style={styles.rightPort}>\n                  <Port />\n                </PortWidget>\n                <Col span={10}>\n                  <Text>{value.getOptions().extras.name}</Text>\n                </Col>\n                <Col span={8}>\n                  <Text style={{ color: '#dbdd4d' }}>{value.getOptions().extras.type}</Text>\n                </Col>\n                <Col span={3}>\n                  <Text>PK</Text>\n                </Col>\n                <Col span={3}>\n                  <KeyOutlined style={{ color: 'yellow', fontSize: 20 }} />\n                </Col>\n              </Row>\n            ) : (\n              ''\n            )\n          )}\n          <hr />\n\n          {/* {Object.entries(props.node.getPorts()).map(([key, value], index: any) =>\n            value.getOptions().extras.key !== 'PRIMARY KEY' ? (\n              <Row\n                key={index}\n                onClick={(e) => handleRowClick(e, key, value)}\n                onBlur={() => setHover('')}\n                style={{ backgroundColor: hover === key ? '#deecf3' : '' }}\n                onKeyDown={(e) => handleDeleteButton(e, value)}\n                tabIndex={-1}\n              >\n                <PortWidget port={value} engine={props.engine} style={styles.leftPort}>\n                  <Port />\n                </PortWidget>\n                <PortWidget port={value} engine={props.engine} style={styles.rightPort}>\n                  <Port />\n                </PortWidget>\n                <Col lg={10}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.name}</Text>\n                </Col>\n                <Col lg={8}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.type}</Text>\n                </Col>\n                <Col lg={3}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.key}</Text>\n                </Col>\n              </Row>\n            ) : (\n              ''\n            )\n          )} */}\n        </div>\n      </div>\n    </div>\n  );\n}\n};\nexport default CustomNodeWidget;\n"]},"metadata":{},"sourceType":"module"}