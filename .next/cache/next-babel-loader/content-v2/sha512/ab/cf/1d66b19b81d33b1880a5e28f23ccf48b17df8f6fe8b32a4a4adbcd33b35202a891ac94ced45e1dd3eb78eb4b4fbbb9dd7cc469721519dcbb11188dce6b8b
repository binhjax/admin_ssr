{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from '../../component/CustomNode/CustomNodeFactory';\nimport { CustomPortFactory } from '../../component/CustomNode/CustomPortFactory';\nimport { CustomPortModel } from '../../component/CustomNode/CustomPortModel';\nimport { CustomLinkModel } from '../../component/CustomNode/CustomLinkModel';\nimport { CustomLinkFactory } from '../../component/CustomNode/CustomLinkFactory'; // import db from '../../.firebase/firebase';\n// import { message } from 'antd';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\nexport class Application {\n  constructor() {\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"saveNode\", () => {\n      db.collection('saveDiagram').doc('quang').set({\n        data: JSON.stringify(this.activeModel.serialize())\n      }).then(function () {\n        message.success('Save successful!');\n      }).catch(function () {\n        message.error('Fail to save data');\n      });\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", () => {\n      let tables = [];\n      let relationships = [];\n      this.activeModel.getNodes().forEach(node => {\n        let table = {\n          name: node.getOptions().extras,\n          columns: []\n        };\n        Object.values(node.getPorts()).forEach(port => {\n          table.columns.push({\n            name: port.getOptions().extras.name,\n            type: port.getOptions().extras.type,\n            key: port.getOptions().extras.key\n          });\n        });\n        tables.push(table);\n      });\n      this.activeModel.getLinks().forEach(link => {\n        let relationship = {\n          parentTable: link.getSourcePort().getNode().getOptions().extras,\n          parentColumn: link.getSourcePort().getOptions().extras.name,\n          childTable: link.getTargetPort().getNode().getOptions().extras,\n          childColumn: link.getTargetPort().getOptions().extras.name\n        };\n        relationships.push(relationship);\n      });\n      store.dispatch(action.setJson({\n        tables,\n        relationships\n      }));\n      store.dispatch(sql.postSQL(JSON.stringify({\n        tables,\n        relationships\n      })));\n    });\n\n    _defineProperty(this, \"zoomToFit\", () => {\n      this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", () => {\n      this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", () => {\n      this.engine.redistribute(this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n      this.reroute();\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  reroute() {\n    this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n  }\n\n  async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Diagram/Application.tsx"],"names":["SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","RightAnglePortModel","DefaultPortModel","createLinkModel","Application","constructor","db","collection","doc","set","data","JSON","stringify","activeModel","serialize","then","message","success","catch","error","diagramEngine","repaintCanvas","tables","relationships","getNodes","forEach","node","table","name","getOptions","extras","columns","Object","values","getPorts","port","push","type","key","getLinks","link","relationship","parentTable","getSourcePort","getNode","parentColumn","childTable","getTargetPort","childColumn","store","dispatch","action","setJson","sql","postSQL","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from '../../component/CustomNode/CustomNodeFactory';\nimport { CustomPortFactory } from '../../component/CustomNode/CustomPortFactory';\nimport { CustomPortModel } from '../../component/CustomNode/CustomPortModel';\nimport { CustomLinkModel } from '../../component/CustomNode/CustomLinkModel';\nimport { CustomLinkFactory } from '../../component/CustomNode/CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\n// import { message } from 'antd';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n\n  public saveNode = () => {\n    db.collection('saveDiagram')\n      .doc('quang')\n      .set({\n        data: JSON.stringify(this.activeModel.serialize()),\n      })\n      .then(function () {\n        message.success('Save successful!');\n      })\n      .catch(function () {\n        message.error('Fail to save data');\n      });\n    this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach((node) => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach((port) => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach((link) => {\n      let relationship = {\n        parentTable: link.getSourcePort().getNode().getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link.getTargetPort().getNode().getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n\n    store.dispatch(\n      action.setJson({\n        tables,\n        relationships,\n      })\n    );\n    store.dispatch(sql.postSQL(JSON.stringify({ tables, relationships })));\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}