{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { newUUID } from '@/utils/utils';\nimport { EditableCell, EditableFormRow } from '../../../components/MenuResource/EditableCell';\nimport styles from './index.less';\n\nfunction fillKey(data) {\n  if (!data) {\n    return [];\n  }\n\n  return data.map(function (item) {\n    var nitem = _objectSpread({}, item);\n\n    if (!nitem.key) {\n      nitem.key = newUUID();\n    }\n\n    return nitem;\n  });\n}\n\nvar MenuAction = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MenuAction, _PureComponent);\n\n  var _super = _createSuper(MenuAction);\n\n  function MenuAction(props) {\n    var _this;\n\n    _classCallCheck(this, MenuAction);\n\n    _this = _super.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddCancel\", function () {\n      _this.setState({\n        addVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDelete\", function (key) {\n      var dataSource = _this.state.dataSource;\n      var data = dataSource.filter(function (item) {\n        return item.key !== key;\n      });\n\n      _this.setState({\n        dataSource: data\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAdd\", function () {\n      var dataSource = _this.state.dataSource;\n      var item = {\n        key: newUUID(),\n        method: '',\n        path: ''\n      };\n      var data = [].concat(_toConsumableArray(dataSource), [item]);\n\n      _this.setState({\n        dataSource: data\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSave\", function (row) {\n      var dataSource = _this.state.dataSource;\n\n      var data = _toConsumableArray(dataSource);\n\n      var index = data.findIndex(function (item) {\n        return row.key === item.key;\n      });\n      var item = data[index];\n      data.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n\n      _this.setState({\n        dataSource: data\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (data) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(data);\n      }\n    });\n\n    _this.columns = [{\n      title: 'Request method',\n      dataIndex: 'method',\n      editable: true,\n      width: '30%'\n    }, {\n      title: 'Request path',\n      dataIndex: 'path',\n      editable: true,\n      width: '45%'\n    }, {\n      title: 'Key',\n      dataIndex: 'key',\n      width: '25%',\n      render: function render(_, record) {\n        var dataSource = _this.state.dataSource;\n\n        if (dataSource.length === 0) {\n          return null;\n        }\n\n        return __jsx(_Popconfirm, {\n          title: \"Are you sure you want to delete this data?\",\n          onConfirm: function onConfirm() {\n            return _this.handleDelete(record.key);\n          }\n        }, __jsx(\"a\", null, \"delete\"));\n      }\n    }];\n    _this.state = {\n      dataSource: fillKey(props.value),\n      addVisible: false\n    };\n    return _this;\n  }\n\n  _createClass(MenuAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var dataSource = this.state.dataSource;\n      var components = {\n        body: {\n          row: EditableFormRow,\n          cell: EditableCell\n        }\n      };\n      var columns = this.columns.map(function (col) {\n        if (!col.editable) {\n          return col;\n        }\n\n        return _objectSpread(_objectSpread({}, col), {}, {\n          onCell: function onCell(record) {\n            return {\n              record: record,\n              editable: col.editable,\n              dataIndex: col.dataIndex,\n              title: col.title,\n              handleSave: _this2.handleSave\n            };\n          }\n        });\n      });\n      return __jsx(\"div\", {\n        className: styles.tableList\n      }, __jsx(\"div\", {\n        className: styles.tableListOperator\n      }, __jsx(_Button, {\n        onClick: this.handleAdd,\n        size: \"small\",\n        type: \"primary\"\n      }, \"Add\")), __jsx(_Table, {\n        rowKey: function rowKey(record) {\n          return record.key;\n        },\n        components: components,\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: false\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if ('value' in nextProps) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          dataSource: fillKey(nextProps.value)\n        });\n      }\n\n      return state;\n    }\n  }]);\n\n  return MenuAction;\n}(PureComponent);\n\nexport { MenuAction as default };","map":null,"metadata":{},"sourceType":"module"}