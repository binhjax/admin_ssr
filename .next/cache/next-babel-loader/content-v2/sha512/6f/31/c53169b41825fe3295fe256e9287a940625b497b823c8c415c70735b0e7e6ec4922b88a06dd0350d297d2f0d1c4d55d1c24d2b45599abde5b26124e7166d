{"ast":null,"code":"import _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport v4 from 'uuid';\nexport var CustomPortModel = /*#__PURE__*/function (_PortModel) {\n  _inherits(CustomPortModel, _PortModel);\n\n  var _super = _createSuper(CustomPortModel);\n\n  function CustomPortModel(name, type, key) {\n    _classCallCheck(this, CustomPortModel);\n\n    return _super.call(this, {\n      type: 'custom',\n      name: v4(),\n      extras: {\n        name: name,\n        type: type,\n        key: key\n      }\n    });\n  }\n\n  _createClass(CustomPortModel, [{\n    key: \"link\",\n    value: function link(target) {\n      var link = new CustomLinkModel();\n      this.reportPosition();\n      target.reportPosition();\n      link.setSourcePort(this);\n      link.setTargetPort(target);\n      return link;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      return new CustomLinkModel();\n    }\n  }, {\n    key: \"deserialize\",\n    value: function deserialize(event) {\n      _get(_getPrototypeOf(CustomPortModel.prototype), \"deserialize\", this).call(this, event);\n\n      this.reportedPosition = false;\n      this.options.name = event.data.name;\n      this.options.alignment = event.data.alignment;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(CustomPortModel.prototype), \"serialize\", this).call(this)), {}, {\n        name: this.options.name,\n        alignment: this.options.alignment,\n        parentNode: this.parent.getID(),\n        links: _.map(this.links, function (link) {\n          return link.getID();\n        })\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      var _this = this;\n\n      var old = this.position;\n\n      _get(_getPrototypeOf(CustomPortModel.prototype), \"setPosition\", this).call(this, x, y);\n\n      _.forEach(this.getLinks(), function (link) {\n        var point = link.getPointForPort(_this);\n        point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n      });\n    }\n  }, {\n    key: \"doClone\",\n    value: function doClone() {\n      var lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var clone = arguments.length > 1 ? arguments[1] : undefined;\n      clone.links = {};\n      clone.parentNode = this.getParent().clone(lookupTable);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode() {\n      return this.getParent();\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.options.name;\n    }\n  }, {\n    key: \"getMaximumLinks\",\n    value: function getMaximumLinks() {\n      return this.options.maximumLinks;\n    }\n  }, {\n    key: \"setMaximumLinks\",\n    value: function setMaximumLinks(maximumLinks) {\n      this.options.maximumLinks = maximumLinks;\n    }\n  }, {\n    key: \"removeLink\",\n    value: function removeLink(link) {\n      delete this.links[link.getID()];\n    }\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this.links[link.getID()] = link;\n    }\n  }, {\n    key: \"getLinks\",\n    value: function getLinks() {\n      return this.links;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      if (_.isFinite(this.options.maximumLinks)) {\n        var numberOfLinks = _.size(this.links);\n\n        if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n          return _.values(this.links)[0];\n        } else if (numberOfLinks >= this.options.maximumLinks) {\n          return null;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"reportPosition\",\n    value: function reportPosition() {\n      var _this2 = this;\n\n      _.forEach(this.getLinks(), function (link) {\n        link.getPointForPort(_this2).setPosition(_this2.getCenter());\n      });\n\n      this.fireEvent({\n        entity: this\n      }, 'reportInitialPosition');\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n    }\n  }, {\n    key: \"updateCoords\",\n    value: function updateCoords(coords) {\n      this.width = coords.getWidth();\n      this.height = coords.getHeight();\n      this.setPosition(coords.getTopLeft());\n      this.reportedPosition = true;\n      this.reportPosition();\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      return true;\n    }\n  }, {\n    key: \"isLocked\",\n    value: function isLocked() {\n      return _get(_getPrototypeOf(CustomPortModel.prototype), \"isLocked\", this).call(this) || this.getParent().isLocked();\n    }\n  }]);\n\n  return CustomPortModel;\n}(PortModel);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/CustomPortModel.ts"],"names":["PortModel","CustomLinkModel","v4","CustomPortModel","name","type","key","extras","target","link","reportPosition","setSourcePort","setTargetPort","event","reportedPosition","options","data","alignment","parentNode","parent","getID","links","_","map","x","y","old","position","forEach","getLinks","point","getPointForPort","setPosition","getX","getY","lookupTable","clone","getParent","maximumLinks","isFinite","numberOfLinks","size","values","getCenter","fireEvent","entity","Point","width","height","coords","getWidth","getHeight","getTopLeft","port","isLocked"],"mappings":"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","sourcesContent":["import { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport v4 from 'uuid';\nexport class CustomPortModel extends PortModel {\n  constructor(name: string, type: string, key: string) {\n    super({\n      type: 'custom',\n      name: v4(),\n      extras: { name: name, type: type, key: key},\n    });\n\n  }\n  link(target: CustomPortModel) {\n    let link = new CustomLinkModel();\n    this.reportPosition();\n    target.reportPosition();\n    link.setSourcePort(this);\n    link.setTargetPort(target);\n\n    return link;\n  }\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n  deserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}