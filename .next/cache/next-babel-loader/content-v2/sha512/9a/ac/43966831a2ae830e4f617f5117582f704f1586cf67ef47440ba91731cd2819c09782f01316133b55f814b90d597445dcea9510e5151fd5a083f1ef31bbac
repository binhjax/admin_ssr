{"ast":null,"code":"import \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/Users/nguyenthanhbinh/Work/vnshop/admin/src/components/PermButton/index.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport context from '@/utils/context';\nexport default _s(function (_ref) {\n  _s();\n\n  var code = _ref.code,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"code\", \"children\"]);\n\n  var GlobalContext = context.GlobalContext;\n  console.log(\"PermButton: function: \", rest);\n  console.log(global);\n  console.log();\n  var pathname = \"\";\n\n  if (true) {}\n\n  useEffect(function mount() {\n    pathname = window.location.pathname;\n    return function unMount() {//Do something when unmoun\n    };\n  });\n  return __jsx(GlobalContext.Consumer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, function (global) {\n    var menuPaths = global.menuPaths;\n\n    if (menuPaths) {\n      var item = menuPaths[pathname];\n\n      if (item && item.actions) {\n        var actions = item.actions;\n\n        for (var i = 0; i < actions.length; i += 1) {\n          if (actions[i].code === code) {\n            return __jsx(_Button, _extends({}, rest, {\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 26\n              }\n            }), children);\n          }\n        }\n      }\n    }\n\n    return null;\n  });\n}, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/components/PermButton/index.js"],"names":["React","useEffect","context","code","children","rest","GlobalContext","console","log","global","pathname","mount","window","location","unMount","menuPaths","item","actions","i","length"],"mappings":";;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,OAAP,MAAoB,iBAApB;AAEA,kBAAe,gBAAiC;AAAA;;AAAA,MAA9BC,IAA8B,QAA9BA,IAA8B;AAAA,MAAxBC,QAAwB,QAAxBA,QAAwB;AAAA,MAAXC,IAAW;;AAAA,MAGtCC,aAHsC,GAGpBJ,OAHoB,CAGtCI,aAHsC;AAK9CC,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsCH,IAAtC;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYC,MAAZ;AACAF,EAAAA,OAAO,CAACC,GAAR;AACA,MAAIE,QAAQ,GAAG,EAAf;;AACA,YAAmC,CAElC;;AAEDT,EAAAA,SAAS,CAAC,SAASU,KAAT,GAAiB;AACzBD,IAAAA,QAAQ,GAAGE,MAAM,CAACC,QAAP,CAAgBH,QAA3B;AACA,WAAO,SAASI,OAAT,GAAmB,CACxB;AACD,KAFD;AAGD,GALQ,CAAT;AAOA,SACE,MAAC,aAAD,CAAe,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,UAAAL,MAAM,EAAI;AAAA,QACAM,SADA,GACcN,MADd,CACAM,SADA;;AAER,QAAIA,SAAJ,EAAe;AACb,UAAMC,IAAI,GAAGD,SAAS,CAACL,QAAD,CAAtB;;AACA,UAAIM,IAAI,IAAIA,IAAI,CAACC,OAAjB,EAA0B;AAAA,YAChBA,OADgB,GACJD,IADI,CAChBC,OADgB;;AAExB,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,OAAO,CAACE,MAA5B,EAAoCD,CAAC,IAAI,CAAzC,EAA4C;AAC1C,cAAID,OAAO,CAACC,CAAD,CAAP,CAAWf,IAAX,KAAoBA,IAAxB,EAA8B;AAC5B,mBAAO,4BAAYE,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAmBD,QAAnB,CAAP;AACD;AACF;AACF;AACF;;AACD,WAAO,IAAP;AACD,GAhBL,CADF;AAoBD,CAxCD","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { Button } from 'antd';\r\nimport context from '@/utils/context';\r\n\r\nexport default ({ code, children, ...rest }) => {\r\n\r\n\r\n  const { GlobalContext } = context;\r\n\r\n  console.log(\"PermButton: function: \", rest)\r\n  console.log(global)\r\n  console.log()\r\n  let pathname = \"\";\r\n  if (typeof window !== \"undefined\") {\r\n\r\n  }\r\n\r\n  useEffect(function mount() {\r\n    pathname = window.location.pathname\r\n    return function unMount() {\r\n      //Do something when unmoun\r\n    };\r\n  });\r\n\r\n  return (\r\n    <GlobalContext.Consumer>\r\n      {\r\n        global => {\r\n          const { menuPaths } = global;\r\n          if (menuPaths) {\r\n            const item = menuPaths[pathname];\r\n            if (item && item.actions) {\r\n              const { actions } = item;\r\n              for (let i = 0; i < actions.length; i += 1) {\r\n                if (actions[i].code === code) {\r\n                  return <Button {...rest}>{children}</Button>;\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return null;\r\n        }}\r\n    </GlobalContext.Consumer>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}