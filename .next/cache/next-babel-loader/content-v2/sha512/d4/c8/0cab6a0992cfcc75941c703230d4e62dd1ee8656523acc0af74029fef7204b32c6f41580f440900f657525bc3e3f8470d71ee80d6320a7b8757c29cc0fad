{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    user-select: none;\\n    pointer-events: auto;\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nvar S;\n\n(function (_S) {\n  var Label = _S.Label = styled.div(_templateObject());\n})(S || (S = {})); // now we can render all what we want in the label\n\n\nexport var EditableLabelWidget = function EditableLabelWidget(props) {\n  _s();\n\n  var _React$useState = React.useState(props.model.value),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      str = _React$useState2[0],\n      setStr = _React$useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(S.Label, {\n    children: /*#__PURE__*/_jsxDEV(\"input\", {\n      value: str,\n      onChange: function onChange(event) {\n        var newVal = event.target.value; // update value both in internal component state\n\n        setStr(newVal); // and in model object\n\n        props.model.value = newVal;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(EditableLabelWidget, \"y1tafCweUTFWIMbcJp0xr1+jfbw=\");\n\n_c = EditableLabelWidget;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditableLabelWidget\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx"],"names":["React","styled","Label","div","S","EditableLabelWidget","props","useState","model","value","str","setStr","event","newVal","target"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;;;;AAQS,MAAMC,KAAK,cAAGD,MAAM,CAACE,GAAV,mBAAX;GAFCC,C,KAAAA,C,SAQV;;;AACA,OAAO,IAAMC,mBAAuE,GAAG,SAA1EA,mBAA0E,CAAAC,KAAK,EAAI;AAAA;;AAAA,wBACxEN,KAAK,CAACO,QAAN,CAAeD,KAAK,CAACE,KAAN,CAAYC,KAA3B,CADwE;AAAA;AAAA,MACvFC,GADuF;AAAA,MAClFC,MADkF;;AAG9F,sBACE,QAAC,CAAD,CAAG,KAAH;AAAA,2BACE;AACE,MAAA,KAAK,EAAED,GADT;AAEE,MAAA,QAAQ,EAAE,kBAAAE,KAAK,EAAI;AACjB,YAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaL,KAA5B,CADiB,CAGjB;;AACAE,QAAAA,MAAM,CAACE,MAAD,CAAN,CAJiB,CAKjB;;AACAP,QAAAA,KAAK,CAACE,KAAN,CAAYC,KAAZ,GAAoBI,MAApB;AACD;AATH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAeD,CAlBM;;GAAMR,mB;;KAAAA,mB","sourcesContent":["import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\n\nexport interface FlowAliasLabelWidgetProps {\n  model: EditableLabelModel;\n}\n\nnamespace S {\n  // NOTE: this CSS rules allows to interact with elements in label\n  export const Label = styled.div`\n    user-select: none;\n    pointer-events: auto;\n  `;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = props => {\n  const [str, setStr] = React.useState(props.model.value);\n\n  return (\n    <S.Label>\n      <input\n        value={str}\n        onChange={event => {\n          const newVal = event.target.value;\n\n          // update value both in internal component state\n          setStr(newVal);\n          // and in model object\n          props.model.value = newVal;\n        }}\n      />\n    </S.Label>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}