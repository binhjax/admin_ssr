{"ast":null,"code":"import _regeneratorRuntime from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _assertThisInitialized from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport var RightAnglePortModel = /*#__PURE__*/function (_SRD$DefaultPortModel) {\n  _inherits(RightAnglePortModel, _SRD$DefaultPortModel);\n\n  var _super = _createSuper(RightAnglePortModel);\n\n  function RightAnglePortModel() {\n    _classCallCheck(this, RightAnglePortModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RightAnglePortModel, [{\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      return new CustomLinkModel();\n    }\n  }]);\n\n  return RightAnglePortModel;\n}(SRD.DefaultPortModel);\n\nvar Application = /*#__PURE__*/function (_React$Component) {\n  _inherits(Application, _React$Component);\n\n  var _super2 = _createSuper(Application);\n\n  function Application(props) {\n    var _this;\n\n    _classCallCheck(this, Application);\n\n    _this = _super2.call(this, props);\n\n    _defineProperty(_assertThisInitialized(_this), \"activeModel\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"diagramEngine\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"engine\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"dispatch\", useDispatch());\n\n    _defineProperty(_assertThisInitialized(_this), \"saveNode\", function () {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"toJson\", function () {\n      var tables = [];\n      var relationships = [];\n\n      _this.activeModel.getNodes().forEach(function (node) {\n        var table = {\n          name: node.getOptions().extras,\n          columns: []\n        };\n        Object.values(node.getPorts()).forEach(function (port) {\n          table.columns.push({\n            name: port.getOptions().extras.name,\n            type: port.getOptions().extras.type,\n            key: port.getOptions().extras.key\n          });\n        });\n        tables.push(table);\n      });\n\n      _this.activeModel.getLinks().forEach(function (link) {\n        var relationship = {\n          parentTable: link.getSourcePort().getNode().getOptions().extras,\n          parentColumn: link.getSourcePort().getOptions().extras.name,\n          childTable: link.getTargetPort().getNode().getOptions().extras,\n          childColumn: link.getTargetPort().getOptions().extras.name\n        };\n        relationships.push(relationship);\n      });\n\n      _this.dispatch({\n        type: 'setJsonDiagram',\n        json: tables\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomToFit\", function () {\n      _this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomNode\", function () {\n      _this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"autoDistribute\", function () {\n      _this.engine.redistribute(_this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n\n      _this.reroute();\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomIn\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() + 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"zoomOut\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() - 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    _this.activeModel = new SRD.DiagramModel();\n    _this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n\n    _this.newModel();\n\n    return _this;\n  }\n\n  _createClass(Application, [{\n    key: \"reroute\",\n    value: function reroute() {\n      this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n    }\n  }, {\n    key: \"newModel\",\n    value: function () {\n      var _newModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var node, node2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.activeModel = new SRD.DiagramModel();\n                this.activeModel.getZoomLevel();\n                this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n                this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', function () {\n                  return new CustomPortModel('', '', '');\n                }));\n                this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n                node = new CustomNodeModel('Quang');\n                node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n                node.addPort(new CustomPortModel('test', 'char', ''));\n                node2 = new CustomNodeModel('Test');\n                node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n                node2.addPort(new CustomPortModel('test', 'char', ''));\n                this.activeModel.addAll(node, node2);\n                this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n                // const nodes = await db.collection('saveDiagram').doc('quang').get();\n                // let data = nodes.data().data;\n                // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n                // this.diagramEngine.setModel(this.activeModel);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function newModel() {\n        return _newModel.apply(this, arguments);\n      }\n\n      return newModel;\n    }()\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}(React.Component);\n\nexport default WithDva(function (state) {\n  return {};\n})(Application);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["React","SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","RightAnglePortModel","DefaultPortModel","Application","props","tables","relationships","activeModel","getNodes","forEach","node","table","name","getOptions","extras","columns","Object","values","getPorts","port","push","type","key","getLinks","link","relationship","parentTable","getSourcePort","getNode","parentColumn","childTable","getTargetPort","childColumn","dispatch","json","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","addPort","node2","addAll","setModel","Component","WithDva","state"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { message } from 'antd';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport withDva from '@/utils/store';\nimport { useDispatch } from 'react-redux';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nclass Application extends React.Component {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor(props) {\n    super(props);\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach(node => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach(port => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach(link => {\n      let relationship = {\n        parentTable: link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n\n    this.dispatch({\n      type: 'setJsonDiagram',\n      json: tables,\n    });\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\nexport default WithDva(state => ({}))(Application);\n"]},"metadata":{},"sourceType":"module"}