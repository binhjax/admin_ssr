{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from '../CustomNode/CustomNodeFactory';\nimport { CustomPortFactory } from '../CustomNode/CustomPortFactory';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nimport { CustomLinkFactory } from '../CustomNode/CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from \"../CustomNode/CustomNodeModel\"; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\nexport class Application {\n  constructor() {\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"saveNode\", () => {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", () => {\n      let tables = [];\n      let relationships = [];\n      this.activeModel.getNodes().forEach(node => {\n        let table = {\n          name: node.getOptions().extras,\n          columns: []\n        };\n        Object.values(node.getPorts()).forEach(port => {\n          table.columns.push({\n            name: port.getOptions().extras.name,\n            type: port.getOptions().extras.type,\n            key: port.getOptions().extras.key\n          });\n        });\n        tables.push(table);\n      });\n      this.activeModel.getLinks().forEach(link => {\n        let relationship = {\n          parentTable: link.getSourcePort().getNode().getOptions().extras,\n          parentColumn: link.getSourcePort().getOptions().extras.name,\n          childTable: link.getTargetPort().getNode().getOptions().extras,\n          childColumn: link.getTargetPort().getOptions().extras.name\n        };\n        relationships.push(relationship);\n      }); // store.dispatch(\n      //   action.setJson({\n      //     tables,\n      //     relationships,\n      //   })\n      // );\n      // store.dispatch(sql.postSQL(JSON.stringify({ tables, relationships })));\n    });\n\n    _defineProperty(this, \"zoomToFit\", () => {\n      this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", () => {\n      this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", () => {\n      this.engine.redistribute(this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n      this.reroute();\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  reroute() {\n    this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n  }\n\n  async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang', 'CHAR', 'PRIMARY'));\n    node.addPort(new CustomPortModel('test', 'CHAR', ''));\n    this.activeModel.addAll(node);\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Diagram/Application.tsx"],"names":["SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","RightAnglePortModel","DefaultPortModel","createLinkModel","Application","constructor","tables","relationships","activeModel","getNodes","forEach","node","table","name","getOptions","extras","columns","Object","values","getPorts","port","push","type","key","getLinks","link","relationship","parentTable","getSourcePort","getNode","parentColumn","childTable","getTargetPort","childColumn","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","addPort","addAll","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from '../CustomNode/CustomNodeFactory';\nimport { CustomPortFactory } from '../CustomNode/CustomPortFactory';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nimport { CustomLinkFactory } from '../CustomNode/CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { message } from 'antd';\nimport { CustomNodeModel } from \"../CustomNode/CustomNodeModel\";\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach((node) => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach((port) => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach((link) => {\n      let relationship = {\n        parentTable: link.getSourcePort().getNode().getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link.getTargetPort().getNode().getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n\n    // store.dispatch(\n    //   action.setJson({\n    //     tables,\n    //     relationships,\n    //   })\n    // );\n    // store.dispatch(sql.postSQL(JSON.stringify({ tables, relationships })));\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang','CHAR','PRIMARY'));\n    node.addPort(new CustomPortModel('test','CHAR',''));\n    this.activeModel.addAll(node)\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}