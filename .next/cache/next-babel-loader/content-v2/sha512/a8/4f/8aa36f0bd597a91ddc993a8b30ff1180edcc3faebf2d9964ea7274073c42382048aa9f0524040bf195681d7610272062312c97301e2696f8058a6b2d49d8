{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { DefaultPortModel } from '@projectstorm/react-diagrams-defaults';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport class RightAnglePortModel extends DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\nexport class Application {\n  constructor() {\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"dispatch\", useDispatch());\n\n    _defineProperty(this, \"saveNode\", () => {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", () => {\n      let tables = [];\n      let relationships = [];\n      this.activeModel.getNodes().forEach(node => {\n        let table = {\n          name: node.getOptions().extras,\n          columns: []\n        };\n        Object.values(node.getPorts()).forEach(port => {\n          table.columns.push({\n            name: port.getOptions().extras.name,\n            type: port.getOptions().extras.type,\n            key: port.getOptions().extras.key\n          });\n        });\n        tables.push(table);\n      });\n      this.activeModel.getLinks().forEach(link => {\n        let relationship = {\n          parentTable: link.getSourcePort().getNode().getOptions().extras,\n          parentColumn: link.getSourcePort().getOptions().extras.name,\n          childTable: link.getTargetPort().getNode().getOptions().extras,\n          childColumn: link.getTargetPort().getOptions().extras.name\n        };\n        relationships.push(relationship);\n      });\n      tables.push(relationships);\n      localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n      window.postMessage(tables, '*');\n    });\n\n    _defineProperty(this, \"zoomToFit\", () => {\n      this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", () => {\n      this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", () => {\n      this.engine.redistribute(this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n      this.reroute();\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = Customdefault({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new CustomDiagramModel();\n    this.engine = new CustomDagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  reroute() {\n    this.diagramEngine.getLinkFactories().getFactory(CustomPathFindingLinkFactory.NAME).calculateRoutingMatrix();\n  }\n\n  async newModel() {\n    this.activeModel = new CustomDiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addCustomPort('test', 'char', '');\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["DefaultPortModel","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","RightAnglePortModel","createLinkModel","Application","constructor","tables","relationships","activeModel","getNodes","forEach","node","table","name","getOptions","extras","columns","Object","values","getPorts","port","push","type","key","getLinks","link","relationship","parentTable","getSourcePort","getNode","parentColumn","childTable","getTargetPort","childColumn","localStorage","setItem","JSON","stringify","window","postMessage","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","Customdefault","registerDefaultZoomCanvasAction","CustomDiagramModel","CustomDagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","CustomPathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","port1","addCustomPort","node2","port2","addPort","addAll","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { DiagramModel } from '@projectstorm/react-diagrams-core';\nimport { DefaultPortModel } from '@projectstorm/react-diagrams-defaults';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\n\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: DiagramModel;\n  protected diagramEngine: CustomDiagramEngine;\n  protected engine: CustomDagreEngine;\n\n  constructor() {\n    this.diagramEngine = Customdefault({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new CustomDiagramModel();\n    this.engine = new CustomDagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach(node => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach(port => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach(link => {\n      let relationship = {\n        parentTable: link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n    tables.push(relationships);\n    localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n    window.postMessage(tables, '*');\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<CustomPathFindingLinkFactory>(CustomPathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new CustomDiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addCustomPort('test', 'char', '');\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): CustomDiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): CustomDiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}