{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { history } from 'umi';\nimport { parse } from 'qs';\nimport { setToken, logout } from '@/utils/request';\nimport * as loginService from '@/services/login';\nexport default {\n  namespace: 'login',\n  state: {\n    status: '',\n    tip: '',\n    submitting: false,\n    captchaID: '',\n    captcha: ''\n  },\n  effects: {\n    *loadCaptcha(_, {\n      call,\n      put\n    }) {\n      const response = yield call(loginService.captchaID);\n      const {\n        captcha_id: captchaID\n      } = response;\n      yield put({\n        type: 'saveCaptchaID',\n        payload: captchaID\n      });\n      yield put({\n        type: 'saveCaptcha',\n        payload: loginService.captcha(captchaID)\n      });\n    },\n\n    *reloadCaptcha(_, {\n      put,\n      select\n    }) {\n      const captchaID = yield select(state => state.login.captchaID);\n      yield put({\n        type: 'saveCaptcha',\n        payload: `${loginService.captcha(captchaID)}&reload=${Math.random()}`\n      });\n    },\n\n    *submit({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true\n      });\n      const response = yield call(loginService.login, payload);\n\n      if (response.data && response.data.error) {\n        const {\n          data: {\n            error: {\n              message\n            }\n          },\n          status\n        } = response;\n        yield [put({\n          type: 'saveTip',\n          payload: message\n        }), put({\n          type: 'saveStatus',\n          payload: status >= 500 ? 'ERROR' : 'FAIL'\n        }), put({\n          type: 'changeSubmitting',\n          payload: false\n        }), put({\n          type: 'loadCaptcha'\n        })];\n        return;\n      } // 保存访问令牌\n\n\n      setToken(response);\n      yield [put({\n        type: 'saveTip',\n        payload: ''\n      }), put({\n        type: 'saveStatus',\n        payload: ''\n      }), put({\n        type: 'changeSubmitting',\n        payload: false\n      })];\n      const params = parse(window.location.href.split('?')[1]);\n      const {\n        redirect\n      } = params;\n\n      if (redirect) {\n        window.location.href = redirect;\n        return;\n      } // history.replace('/');\n\n    },\n\n    *logout(_, {\n      call\n    }) {\n      const response = yield call(loginService.logout);\n\n      if (response.status === 'OK') {\n        logout();\n      }\n    }\n\n  },\n  reducers: {\n    saveCaptchaID(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captchaID: payload\n      });\n    },\n\n    saveCaptcha(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captcha: payload\n      });\n    },\n\n    saveStatus(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: payload\n      });\n    },\n\n    saveTip(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tip: payload\n      });\n    },\n\n    changeSubmitting(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n\n  }\n};","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/models/login.js"],"names":["parse","setToken","logout","loginService","namespace","state","status","tip","submitting","captchaID","captcha","effects","loadCaptcha","_","call","put","response","captcha_id","type","payload","reloadCaptcha","select","login","Math","random","submit","data","error","message","params","window","location","href","split","redirect","reducers","saveCaptchaID","saveCaptcha","saveStatus","saveTip","changeSubmitting"],"mappings":"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","sourcesContent":["// import { history } from 'umi';\nimport { parse } from 'qs';\nimport { setToken, logout } from '@/utils/request';\nimport * as loginService from '@/services/login';\n\nexport default {\n  namespace: 'login',\n\n  state: {\n    status: '',\n    tip: '',\n    submitting: false,\n    captchaID: '',\n    captcha: '',\n  },\n\n  effects: {\n    *loadCaptcha(_, { call, put }) {\n      const response = yield call(loginService.captchaID);\n      const { captcha_id: captchaID } = response;\n\n      yield put({\n        type: 'saveCaptchaID',\n        payload: captchaID,\n      });\n      yield put({\n        type: 'saveCaptcha',\n        payload: loginService.captcha(captchaID),\n      });\n    },\n    *reloadCaptcha(_, { put, select }) {\n      const captchaID = yield select(state => state.login.captchaID);\n      yield put({\n        type: 'saveCaptcha',\n        payload: `${loginService.captcha(captchaID)}&reload=${Math.random()}`,\n      });\n    },\n    *submit({ payload }, { call, put }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true,\n      });\n      const response = yield call(loginService.login, payload);\n      if (response.data && response.data.error) {\n        const {\n          data: {\n            error: { message },\n          },\n          status,\n        } = response;\n        yield [\n          put({\n            type: 'saveTip',\n            payload: message,\n          }),\n          put({\n            type: 'saveStatus',\n            payload: status >= 500 ? 'ERROR' : 'FAIL',\n          }),\n          put({\n            type: 'changeSubmitting',\n            payload: false,\n          }),\n          put({\n            type: 'loadCaptcha',\n          }),\n        ];\n        return;\n      }\n\n      // 保存访问令牌\n      setToken(response);\n\n      yield [\n        put({\n          type: 'saveTip',\n          payload: '',\n        }),\n        put({\n          type: 'saveStatus',\n          payload: '',\n        }),\n        put({\n          type: 'changeSubmitting',\n          payload: false,\n        }),\n      ];\n\n      const params = parse(window.location.href.split('?')[1]);\n      const { redirect } = params;\n      if (redirect) {\n        window.location.href = redirect;\n        return;\n      }\n      // history.replace('/');\n    },\n    *logout(_, { call }) {\n      const response = yield call(loginService.logout);\n      if (response.status === 'OK') {\n        logout();\n      }\n    },\n  },\n\n  reducers: {\n    saveCaptchaID(state, { payload }) {\n      return {\n        ...state,\n        captchaID: payload,\n      };\n    },\n    saveCaptcha(state, { payload }) {\n      return {\n        ...state,\n        captcha: payload,\n      };\n    },\n    saveStatus(state, { payload }) {\n      return {\n        ...state,\n        status: payload,\n      };\n    },\n    saveTip(state, { payload }) {\n      return {\n        ...state,\n        tip: payload,\n      };\n    },\n    changeSubmitting(state, { payload }) {\n      return {\n        ...state,\n        submitting: payload,\n      };\n    },\n  },\n};\n"]},"metadata":{},"sourceType":"module"}