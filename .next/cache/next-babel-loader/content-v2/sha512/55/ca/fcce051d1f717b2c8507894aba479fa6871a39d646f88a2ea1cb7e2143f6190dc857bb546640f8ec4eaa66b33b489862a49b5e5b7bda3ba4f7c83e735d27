{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import { history } from 'umi';\nimport { parse } from 'qs';\nimport { setToken, logout as _logout } from '@/utils/request';\nimport * as loginService from '@/services/login';\nexport default {\n  namespace: 'login',\n  state: {\n    status: '',\n    tip: '',\n    submitting: false,\n    captchaID: '',\n    captcha: ''\n  },\n  effects: {\n    loadCaptcha: /*#__PURE__*/_regeneratorRuntime.mark(function loadCaptcha(_, _ref) {\n      var call, put, response, captchaID;\n      return _regeneratorRuntime.wrap(function loadCaptcha$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              call = _ref.call, put = _ref.put;\n              _context.next = 3;\n              return call(loginService.captchaID);\n\n            case 3:\n              response = _context.sent;\n              captchaID = response.captcha_id;\n              _context.next = 7;\n              return put({\n                type: 'saveCaptchaID',\n                payload: captchaID\n              });\n\n            case 7:\n              _context.next = 9;\n              return put({\n                type: 'saveCaptcha',\n                payload: loginService.captcha(captchaID)\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, loadCaptcha);\n    }),\n    reloadCaptcha: /*#__PURE__*/_regeneratorRuntime.mark(function reloadCaptcha(_, _ref2) {\n      var put, select, captchaID;\n      return _regeneratorRuntime.wrap(function reloadCaptcha$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              put = _ref2.put, select = _ref2.select;\n              _context2.next = 3;\n              return select(function (state) {\n                return state.login.captchaID;\n              });\n\n            case 3:\n              captchaID = _context2.sent;\n              _context2.next = 6;\n              return put({\n                type: 'saveCaptcha',\n                payload: \"\".concat(loginService.captcha(captchaID), \"&reload=\").concat(Math.random())\n              });\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, reloadCaptcha);\n    }),\n    submit: /*#__PURE__*/_regeneratorRuntime.mark(function submit(_ref3, _ref4) {\n      var payload, call, put, response, message, status, params, redirect;\n      return _regeneratorRuntime.wrap(function submit$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              payload = _ref3.payload;\n              call = _ref4.call, put = _ref4.put;\n              _context3.next = 4;\n              return put({\n                type: 'changeSubmitting',\n                payload: true\n              });\n\n            case 4:\n              _context3.next = 6;\n              return call(loginService.login, payload);\n\n            case 6:\n              response = _context3.sent;\n\n              if (!(response.data && response.data.error)) {\n                _context3.next = 12;\n                break;\n              }\n\n              message = response.data.error.message, status = response.status;\n              _context3.next = 11;\n              return [put({\n                type: 'saveTip',\n                payload: message\n              }), put({\n                type: 'saveStatus',\n                payload: status >= 500 ? 'ERROR' : 'FAIL'\n              }), put({\n                type: 'changeSubmitting',\n                payload: false\n              }), put({\n                type: 'loadCaptcha'\n              })];\n\n            case 11:\n              return _context3.abrupt(\"return\");\n\n            case 12:\n              // Save the access token\n              setToken(response);\n              _context3.next = 15;\n              return [put({\n                type: 'saveTip',\n                payload: ''\n              }), put({\n                type: 'saveStatus',\n                payload: ''\n              }), put({\n                type: 'changeSubmitting',\n                payload: false\n              })];\n\n            case 15:\n              params = parse(window.location.href.split('?')[1]);\n              redirect = params.redirect;\n\n              if (!redirect) {\n                _context3.next = 20;\n                break;\n              }\n\n              window.location.href = redirect;\n              return _context3.abrupt(\"return\");\n\n            case 20:\n              history.replace('/');\n\n            case 21:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, submit);\n    }),\n    logout: /*#__PURE__*/_regeneratorRuntime.mark(function logout(_, _ref5) {\n      var call;\n      return _regeneratorRuntime.wrap(function logout$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              call = _ref5.call;\n              console.log(\"Model process logout\");\n\n              _logout(); // const response = yield call(loginService.logout);\n              // if (response.status === 'OK') {\n              // logout();\n              // }\n\n\n            case 3:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, logout);\n    })\n  },\n  reducers: {\n    saveCaptchaID: function saveCaptchaID(state, _ref6) {\n      var payload = _ref6.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captchaID: payload\n      });\n    },\n    saveCaptcha: function saveCaptcha(state, _ref7) {\n      var payload = _ref7.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captcha: payload\n      });\n    },\n    saveStatus: function saveStatus(state, _ref8) {\n      var payload = _ref8.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: payload\n      });\n    },\n    saveTip: function saveTip(state, _ref9) {\n      var payload = _ref9.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tip: payload\n      });\n    },\n    changeSubmitting: function changeSubmitting(state, _ref10) {\n      var payload = _ref10.payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/models/login.js"],"names":["parse","setToken","logout","loginService","namespace","state","status","tip","submitting","captchaID","captcha","effects","loadCaptcha","_","call","put","response","captcha_id","type","payload","reloadCaptcha","select","login","Math","random","submit","data","error","message","params","window","location","href","split","redirect","history","replace","console","log","reducers","saveCaptchaID","saveCaptcha","saveStatus","saveTip","changeSubmitting"],"mappings":"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","sourcesContent":["// import { history } from 'umi';\r\nimport { parse } from 'qs';\r\nimport { setToken, logout } from '@/utils/request';\r\nimport * as loginService from '@/services/login';\r\n\r\nexport default {\r\n  namespace: 'login',\r\n\r\n  state: {\r\n    status: '',\r\n    tip: '',\r\n    submitting: false,\r\n    captchaID: '',\r\n    captcha: '',\r\n  },\r\n\r\n  effects: {\r\n    *loadCaptcha(_, { call, put }) {\r\n      const response = yield call(loginService.captchaID);\r\n      const { captcha_id: captchaID } = response;\r\n\r\n      yield put({\r\n        type: 'saveCaptchaID',\r\n        payload: captchaID,\r\n      });\r\n      yield put({\r\n        type: 'saveCaptcha',\r\n        payload: loginService.captcha(captchaID),\r\n      });\r\n    },\r\n    *reloadCaptcha(_, { put, select }) {\r\n      const captchaID = yield select(state => state.login.captchaID);\r\n      yield put({\r\n        type: 'saveCaptcha',\r\n        payload: `${loginService.captcha(captchaID)}&reload=${Math.random()}`,\r\n      });\r\n    },\r\n    *submit({ payload }, { call, put }) {\r\n      //binhnt: Change button \r\n      yield put({\r\n        type: 'changeSubmitting',\r\n        payload: true,\r\n      });\r\n\r\n      //binhnt: Call service to submit login \r\n      const response = yield call(loginService.login, payload);\r\n      if (response.data && response.data.error) {\r\n        const {\r\n          data: {\r\n            error: { message },\r\n          },\r\n          status,\r\n        } = response;\r\n        yield [\r\n          put({\r\n            type: 'saveTip',\r\n            payload: message,\r\n          }),\r\n          put({\r\n            type: 'saveStatus',\r\n            payload: status >= 500 ? 'ERROR' : 'FAIL',\r\n          }),\r\n          put({\r\n            type: 'changeSubmitting',\r\n            payload: false,\r\n          }),\r\n          put({\r\n            type: 'loadCaptcha',\r\n          }),\r\n        ];\r\n        return;\r\n      }\r\n\r\n      // Save the access token\r\n      setToken(response);\r\n\r\n      yield [\r\n        put({\r\n          type: 'saveTip',\r\n          payload: '',\r\n        }),\r\n        put({\r\n          type: 'saveStatus',\r\n          payload: '',\r\n        }),\r\n        put({\r\n          type: 'changeSubmitting',\r\n          payload: false,\r\n        }),\r\n      ];\r\n\r\n      const params = parse(window.location.href.split('?')[1]);\r\n      const { redirect } = params;\r\n      if (redirect) {\r\n        window.location.href = redirect;\r\n        return;\r\n      }\r\n      history.replace('/');\r\n    },\r\n    *logout(_, { call }) {\r\n      console.log(\"Model process logout\")\r\n      logout();\r\n      // const response = yield call(loginService.logout);\r\n      // if (response.status === 'OK') {\r\n      // logout();\r\n      // }\r\n    },\r\n  },\r\n\r\n  reducers: {\r\n    saveCaptchaID(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        captchaID: payload,\r\n      };\r\n    },\r\n    saveCaptcha(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        captcha: payload,\r\n      };\r\n    },\r\n    saveStatus(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        status: payload,\r\n      };\r\n    },\r\n    saveTip(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        tip: payload,\r\n      };\r\n    },\r\n    changeSubmitting(state, { payload }) {\r\n      return {\r\n        ...state,\r\n        submitting: payload,\r\n      };\r\n    },\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}