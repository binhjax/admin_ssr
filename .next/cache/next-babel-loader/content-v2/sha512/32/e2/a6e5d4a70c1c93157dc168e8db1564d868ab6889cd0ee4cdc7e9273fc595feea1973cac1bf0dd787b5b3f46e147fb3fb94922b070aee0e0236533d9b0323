{"ast":null,"code":"import _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { SelectingState, State, Action, InputType, DragCanvasState } from '@projectstorm/react-canvas-core';\nimport { PortModel, DragDiagramItemsState } from '@projectstorm/react-diagrams-core';\nimport { CreateLinkState } from './CreateLinkState';\nexport var DefaultState = /*#__PURE__*/function (_State) {\n  _inherits(DefaultState, _State);\n\n  var _super = _createSuper(DefaultState);\n\n  function DefaultState() {\n    var _this;\n\n    _classCallCheck(this, DefaultState);\n\n    _this = _super.call(this, {\n      name: 'starting-state'\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dragCanvas\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"createLink\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"dragItems\", void 0);\n\n    _this.childStates = [new SelectingState()];\n    _this.dragCanvas = new DragCanvasState();\n    _this.createLink = new CreateLinkState();\n    _this.dragItems = new DragDiagramItemsState(); // determine what was clicked on\n\n    _this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: function fire(event) {\n        var element = _this.engine.getActionEventBus().getModelForEvent(event); // the canvas was clicked on, transition to the dragging canvas state\n\n\n        if (!element) {\n          _this.transitionWithEvent(_this.dragCanvas, event);\n        } // initiate dragging a new link\n        else if (element instanceof PortModel) {\n            return;\n          } // move the items (and potentially link points)\n          else {\n              _this.transitionWithEvent(_this.dragItems, event);\n            }\n      }\n    }));\n\n    _this.registerAction(new Action({\n      type: InputType.MOUSE_UP,\n      fire: function fire(event) {\n        var element = _this.engine.getActionEventBus().getModelForEvent(event);\n\n        if (element instanceof PortModel) _this.transitionWithEvent(_this.createLink, event);\n      }\n    }));\n\n    return _this;\n  }\n\n  return DefaultState;\n}(State);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/DefaultState.ts"],"names":["SelectingState","State","Action","InputType","DragCanvasState","PortModel","DragDiagramItemsState","CreateLinkState","DefaultState","name","childStates","dragCanvas","createLink","dragItems","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent","MOUSE_UP"],"mappings":";;;;;;;;;;;AACA,SACCA,cADD,EAECC,KAFD,EAGCC,MAHD,EAICC,SAJD,EAMCC,eAND,QAOO,iCAPP;AAQA,SAASC,SAAT,EAAmCC,qBAAnC,QAAgE,mCAAhE;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,WAAaC,YAAb;AAAA;;AAAA;;AAKC,0BAAc;AAAA;;AAAA;;AACb,8BAAM;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAN;;AADa;;AAAA;;AAAA;;AAEb,UAAKC,WAAL,GAAmB,CAAC,IAAIV,cAAJ,EAAD,CAAnB;AACA,UAAKW,UAAL,GAAkB,IAAIP,eAAJ,EAAlB;AACA,UAAKQ,UAAL,GAAkB,IAAIL,eAAJ,EAAlB;AACA,UAAKM,SAAL,GAAiB,IAAIP,qBAAJ,EAAjB,CALa,CAOb;;AACA,UAAKQ,cAAL,CACC,IAAIZ,MAAJ,CAAW;AACVa,MAAAA,IAAI,EAAEZ,SAAS,CAACa,UADN;AAEVC,MAAAA,IAAI,EAAE,cAACC,KAAD,EAAoC;AACzC,YAAMC,OAAO,GAAG,MAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB,CADyC,CAGzC;;;AACA,YAAI,CAACC,OAAL,EAAc;AACb,gBAAKI,mBAAL,CAAyB,MAAKZ,UAA9B,EAA0CO,KAA1C;AACA,SAFD,CAGA;AAHA,aAIK,IAAIC,OAAO,YAAYd,SAAvB,EAAkC;AACtC;AACA,WAFI,CAGL;AAHK,eAIA;AACJ,oBAAKkB,mBAAL,CAAyB,MAAKV,SAA9B,EAAyCK,KAAzC;AACA;AACD;AAjBS,KAAX,CADD;;AAsBA,UAAKJ,cAAL,CACC,IAAIZ,MAAJ,CAAW;AACVa,MAAAA,IAAI,EAAEZ,SAAS,CAACqB,QADN;AAEVP,MAAAA,IAAI,EAAE,cAACC,KAAD,EAAoC;AACzC,YAAMC,OAAO,GAAG,MAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB;;AAEA,YAAIC,OAAO,YAAYd,SAAvB,EAAkC,MAAKkB,mBAAL,CAAyB,MAAKX,UAA9B,EAA0CM,KAA1C;AAClC;AANS,KAAX,CADD;;AA9Ba;AAwCb;;AA7CF;AAAA,EAAkCjB,KAAlC","sourcesContent":["import { MouseEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel, DiagramEngine, DragDiagramItemsState } from '@projectstorm/react-diagrams-core';\nimport { CreateLinkState } from './CreateLinkState';\n\nexport class DefaultState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tcreateLink: CreateLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({ name: 'starting-state' });\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.createLink = new CreateLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\tif (element instanceof PortModel) this.transitionWithEvent(this.createLink, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}