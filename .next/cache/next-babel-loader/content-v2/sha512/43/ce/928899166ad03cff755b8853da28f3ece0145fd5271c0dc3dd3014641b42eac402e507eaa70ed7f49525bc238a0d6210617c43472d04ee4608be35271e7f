{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as _ from 'lodash';\nimport { Point } from '@projectstorm/geometry';\nimport { BasePositionModel } from '@projectstorm/react-canvas-core';\nexport let PortModelAlignment;\n\n(function (PortModelAlignment) {\n  PortModelAlignment[\"TOP\"] = \"top\";\n  PortModelAlignment[\"LEFT\"] = \"left\";\n  PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n  PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment || (PortModelAlignment = {}));\n\nexport class PortModel extends BasePositionModel {\n  // calculated post rendering so routing can be done correctly\n  constructor(options) {\n    super(options);\n\n    _defineProperty(this, \"links\", void 0);\n\n    _defineProperty(this, \"width\", void 0);\n\n    _defineProperty(this, \"height\", void 0);\n\n    _defineProperty(this, \"reportedPosition\", void 0);\n\n    this.links = {};\n    this.reportedPosition = false;\n  }\n\n  deserialize(event) {\n    super.deserialize(event);\n    this.reportedPosition = false;\n    this.options.name = event.data.name;\n    this.options.alignment = event.data.alignment;\n  }\n\n  serialize() {\n    return _objectSpread(_objectSpread({}, super.serialize()), {}, {\n      name: this.options.name,\n      alignment: this.options.alignment,\n      parentNode: this.parent.getID(),\n      links: _.map(this.links, link => {\n        return link.getID();\n      })\n    });\n  }\n\n  setPosition(x, y) {\n    let old = this.position;\n    super.setPosition(x, y);\n\n    _.forEach(this.getLinks(), link => {\n      let point = link.getPointForPort(this);\n      point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n    });\n  }\n\n  doClone(lookupTable = {}, clone) {\n    clone.links = {};\n    clone.parentNode = this.getParent().clone(lookupTable);\n  }\n\n  getNode() {\n    return this.getParent();\n  }\n\n  getName() {\n    return this.options.name;\n  }\n\n  getMaximumLinks() {\n    return this.options.maximumLinks;\n  }\n\n  setMaximumLinks(maximumLinks) {\n    this.options.maximumLinks = maximumLinks;\n  }\n\n  removeLink(link) {\n    delete this.links[link.getID()];\n  }\n\n  addLink(link) {\n    this.links[link.getID()] = link;\n  }\n\n  getLinks() {\n    return this.links;\n  }\n\n  createLinkModel() {\n    if (_.isFinite(this.options.maximumLinks)) {\n      var numberOfLinks = _.size(this.links);\n\n      if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n        return _.values(this.links)[0];\n      } else if (numberOfLinks >= this.options.maximumLinks) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n  reportPosition() {\n    _.forEach(this.getLinks(), link => {\n      link.getPointForPort(this).setPosition(this.getCenter());\n    });\n\n    this.fireEvent({\n      entity: this\n    }, 'reportInitialPosition');\n  }\n\n  getCenter() {\n    return new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n  }\n\n  updateCoords(coords) {\n    this.width = coords.getWidth();\n    this.height = coords.getHeight();\n    this.setPosition(coords.getTopLeft());\n    this.reportedPosition = true;\n    this.reportPosition();\n  }\n\n  canLinkToPort(port) {\n    return true;\n  }\n\n  isLocked() {\n    return super.isLocked() || this.getParent().isLocked();\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/CustomPortModel.ts"],"names":["_","Point","BasePositionModel","PortModelAlignment","PortModel","constructor","options","links","reportedPosition","deserialize","event","name","data","alignment","serialize","parentNode","parent","getID","map","link","setPosition","x","y","old","position","forEach","getLinks","point","getPointForPort","getX","getY","doClone","lookupTable","clone","getParent","getNode","getName","getMaximumLinks","maximumLinks","setMaximumLinks","removeLink","addLink","createLinkModel","isFinite","numberOfLinks","size","values","reportPosition","getCenter","fireEvent","entity","width","height","updateCoords","coords","getWidth","getHeight","getTopLeft","canLinkToPort","port","isLocked"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { CustomNodeModel } from \"./CustomNodeModel\";\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: CustomNodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}