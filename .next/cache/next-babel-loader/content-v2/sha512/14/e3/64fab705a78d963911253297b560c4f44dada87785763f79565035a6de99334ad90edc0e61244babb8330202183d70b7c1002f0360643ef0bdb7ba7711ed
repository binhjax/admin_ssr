{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import { history } from 'umi';\nimport { parse } from 'qs';\nimport { setToken, logout } from '@/utils/request';\nimport * as loginService from '@/services/login';\nexport default {\n  namespace: 'login',\n  state: {\n    status: '',\n    tip: '',\n    submitting: false,\n    captchaID: '',\n    captcha: ''\n  },\n  effects: {\n    *loadCaptcha(_, {\n      call,\n      put\n    }) {\n      const response = yield call(loginService.captchaID);\n      const {\n        captcha_id: captchaID\n      } = response;\n      yield put({\n        type: 'saveCaptchaID',\n        payload: captchaID\n      });\n      yield put({\n        type: 'saveCaptcha',\n        payload: loginService.captcha(captchaID)\n      });\n    },\n\n    *reloadCaptcha(_, {\n      put,\n      select\n    }) {\n      const captchaID = yield select(state => state.login.captchaID);\n      yield put({\n        type: 'saveCaptcha',\n        payload: `${loginService.captcha(captchaID)}&reload=${Math.random()}`\n      });\n    },\n\n    *submit({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true\n      });\n      const response = yield call(loginService.login, payload);\n\n      if (response.data && response.data.error) {\n        const {\n          data: {\n            error: {\n              message\n            }\n          },\n          status\n        } = response;\n        yield [put({\n          type: 'saveTip',\n          payload: message\n        }), put({\n          type: 'saveStatus',\n          payload: status >= 500 ? 'ERROR' : 'FAIL'\n        }), put({\n          type: 'changeSubmitting',\n          payload: false\n        }), put({\n          type: 'loadCaptcha'\n        })];\n        return;\n      } // 保存访问令牌\n\n\n      setToken(response);\n      yield [put({\n        type: 'saveTip',\n        payload: ''\n      }), put({\n        type: 'saveStatus',\n        payload: ''\n      }), put({\n        type: 'changeSubmitting',\n        payload: false\n      })];\n      const params = parse(window.location.href.split('?')[1]);\n      const {\n        redirect\n      } = params;\n\n      if (redirect) {\n        window.location.href = redirect;\n        return;\n      } // history.replace('/');\n\n    },\n\n    *logout(_, {\n      call\n    }) {\n      const response = yield call(loginService.logout);\n\n      if (response.status === 'OK') {\n        logout();\n      }\n    }\n\n  },\n  reducers: {\n    saveCaptchaID(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captchaID: payload\n      });\n    },\n\n    saveCaptcha(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        captcha: payload\n      });\n    },\n\n    saveStatus(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        status: payload\n      });\n    },\n\n    saveTip(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        tip: payload\n      });\n    },\n\n    changeSubmitting(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}