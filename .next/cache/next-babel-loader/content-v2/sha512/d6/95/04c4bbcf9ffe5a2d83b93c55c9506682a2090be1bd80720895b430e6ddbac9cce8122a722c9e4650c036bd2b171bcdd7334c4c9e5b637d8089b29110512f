{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { SelectingState, State, Action, InputType, DragCanvasState } from '@projectstorm/react-canvas-core';\nimport { PortModel, DragDiagramItemsState } from '@projectstorm/react-diagrams-core';\nimport { CreateLinkState } from './CreateLinkState';\nexport class DefaultState extends State {\n  constructor() {\n    super({\n      name: 'starting-state'\n    });\n\n    _defineProperty(this, \"dragCanvas\", void 0);\n\n    _defineProperty(this, \"createLink\", void 0);\n\n    _defineProperty(this, \"dragItems\", void 0);\n\n    this.childStates = [new SelectingState()];\n    this.dragCanvas = new DragCanvasState();\n    this.createLink = new CreateLinkState();\n    this.dragItems = new DragDiagramItemsState(); // determine what was clicked on\n\n    this.registerAction(new Action({\n      type: InputType.MOUSE_DOWN,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event); // the canvas was clicked on, transition to the dragging canvas state\n\n        if (!element) {\n          this.transitionWithEvent(this.dragCanvas, event);\n        } // initiate dragging a new link\n        else if (element instanceof PortModel) {\n            return;\n          } // move the items (and potentially link points)\n          else {\n              this.transitionWithEvent(this.dragItems, event);\n            }\n      }\n    }));\n    this.registerAction(new Action({\n      type: InputType.MOUSE_UP,\n      fire: event => {\n        const element = this.engine.getActionEventBus().getModelForEvent(event);\n        if (element instanceof PortModel) this.transitionWithEvent(this.createLink, event);\n      }\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/DefaultState.ts"],"names":["SelectingState","State","Action","InputType","DragCanvasState","PortModel","DragDiagramItemsState","CreateLinkState","DefaultState","constructor","name","childStates","dragCanvas","createLink","dragItems","registerAction","type","MOUSE_DOWN","fire","event","element","engine","getActionEventBus","getModelForEvent","transitionWithEvent","MOUSE_UP"],"mappings":";;AACA,SACCA,cADD,EAECC,KAFD,EAGCC,MAHD,EAICC,SAJD,EAMCC,eAND,QAOO,iCAPP;AAQA,SAASC,SAAT,EAAmCC,qBAAnC,QAAgE,mCAAhE;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,YAAN,SAA2BP,KAA3B,CAAgD;AAKtDQ,EAAAA,WAAW,GAAG;AACb,UAAM;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAN;;AADa;;AAAA;;AAAA;;AAEb,SAAKC,WAAL,GAAmB,CAAC,IAAIX,cAAJ,EAAD,CAAnB;AACA,SAAKY,UAAL,GAAkB,IAAIR,eAAJ,EAAlB;AACA,SAAKS,UAAL,GAAkB,IAAIN,eAAJ,EAAlB;AACA,SAAKO,SAAL,GAAiB,IAAIR,qBAAJ,EAAjB,CALa,CAOb;;AACA,SAAKS,cAAL,CACC,IAAIb,MAAJ,CAAW;AACVc,MAAAA,IAAI,EAAEb,SAAS,CAACc,UADN;AAEVC,MAAAA,IAAI,EAAGC,KAAD,IAAoC;AACzC,cAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB,CADyC,CAGzC;;AACA,YAAI,CAACC,OAAL,EAAc;AACb,eAAKI,mBAAL,CAAyB,KAAKZ,UAA9B,EAA0CO,KAA1C;AACA,SAFD,CAGA;AAHA,aAIK,IAAIC,OAAO,YAAYf,SAAvB,EAAkC;AACtC;AACA,WAFI,CAGL;AAHK,eAIA;AACJ,mBAAKmB,mBAAL,CAAyB,KAAKV,SAA9B,EAAyCK,KAAzC;AACA;AACD;AAjBS,KAAX,CADD;AAsBA,SAAKJ,cAAL,CACC,IAAIb,MAAJ,CAAW;AACVc,MAAAA,IAAI,EAAEb,SAAS,CAACsB,QADN;AAEVP,MAAAA,IAAI,EAAGC,KAAD,IAAoC;AACzC,cAAMC,OAAO,GAAG,KAAKC,MAAL,CAAYC,iBAAZ,GAAgCC,gBAAhC,CAAiDJ,KAAjD,CAAhB;AAEA,YAAIC,OAAO,YAAYf,SAAvB,EAAkC,KAAKmB,mBAAL,CAAyB,KAAKX,UAA9B,EAA0CM,KAA1C;AAClC;AANS,KAAX,CADD;AAUA;;AA7CqD","sourcesContent":["import { MouseEvent } from 'react';\nimport {\n\tSelectingState,\n\tState,\n\tAction,\n\tInputType,\n\tActionEvent,\n\tDragCanvasState\n} from '@projectstorm/react-canvas-core';\nimport { PortModel, DiagramEngine, DragDiagramItemsState } from '@projectstorm/react-diagrams-core';\nimport { CreateLinkState } from './CreateLinkState';\n\nexport class DefaultState extends State<DiagramEngine> {\n\tdragCanvas: DragCanvasState;\n\tcreateLink: CreateLinkState;\n\tdragItems: DragDiagramItemsState;\n\n\tconstructor() {\n\t\tsuper({ name: 'starting-state' });\n\t\tthis.childStates = [new SelectingState()];\n\t\tthis.dragCanvas = new DragCanvasState();\n\t\tthis.createLink = new CreateLinkState();\n\t\tthis.dragItems = new DragDiagramItemsState();\n\n\t\t// determine what was clicked on\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_DOWN,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\t// the canvas was clicked on, transition to the dragging canvas state\n\t\t\t\t\tif (!element) {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragCanvas, event);\n\t\t\t\t\t}\n\t\t\t\t\t// initiate dragging a new link\n\t\t\t\t\telse if (element instanceof PortModel) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// move the items (and potentially link points)\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.transitionWithEvent(this.dragItems, event);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(event);\n\n\t\t\t\t\tif (element instanceof PortModel) this.transitionWithEvent(this.createLink, event);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}