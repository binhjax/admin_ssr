{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 100%;\\n  position: relative;\\n  flex-grow: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ActionMenu from './components/ActionMenu';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nexport var Layer = styled.div(_templateObject());\n_c = Layer;\n\nvar BodyWidget = function BodyWidget(props) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      updateState = _React$useState2[1]; // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n\n  var forceUpdate = React.useCallback(function () {\n    return updateState({});\n  }, []);\n\n  var confirmDeletePort = function confirmDeletePort(port) {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, _this),\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk: function onOk() {\n        selectedNode.deletePort(port); // dispatch(action.setPorts(selectedNode.getPorts()));\n      }\n    });\n  };\n\n  var selectPort = function selectPort(value) {\n    setSelectedPort(value);\n  };\n\n  var addPort = function addPort() {\n    var port = selectedNode.addCustomPort('new_col', '', ''); // dispatch(action.setPorts(selectedNode.getPorts()));\n\n    openDetail(port);\n  }; // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 10,\n        background: '#fff'\n      },\n      children: /*#__PURE__*/_jsxDEV(ActionMenu, {\n        app: props.app\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Layer, {\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        setSelectedPort(undefined);\n      },\n      onDrop: function onDrop(event) {\n        var node;\n        node = new CustomNodeModel('Name');\n        var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        props.app.getDiagramEngine().getModel().addNode(node);\n        forceUpdate();\n      },\n      onDragOver: function onDragOver(event) {\n        event.preventDefault();\n      },\n      children: /*#__PURE__*/_jsxDEV(DemoCanvasWidget, {\n        background: \"#ffff\",\n        children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n          engine: props.app.getDiagramEngine()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BodyWidget, \"QvBHa7LeQ8pxDePlbDHq1idxhZs=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = BodyWidget;\nexport default BodyWidget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Layer\");\n$RefreshReg$(_c2, \"BodyWidget\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx"],"names":["React","ActionMenu","CanvasWidget","DemoCanvasWidget","CustomNodeModel","styled","ExclamationCircleOutlined","useDispatch","Layer","div","BodyWidget","props","dispatch","useState","updateState","forceUpdate","useCallback","confirmDeletePort","port","confirm","title","icon","content","okText","cancelText","onOk","selectedNode","deletePort","selectPort","value","setSelectedPort","addPort","addCustomPort","openDetail","height","display","justifyContent","alignItems","padding","background","app","e","stopPropagation","undefined","event","node","point","getDiagramEngine","getRelativeMousePoint","setPosition","getModel","addNode","preventDefault"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport ActionMenu from './components/ActionMenu';\n\nimport { Application } from './Application';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Card, Col, Row, Modal } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PortModel } from '@projectstorm/react-diagrams-core';\nimport { CustomPortModel } from './CustomPortModel';\n// import * as action from '../../actions/node';\nimport { CustomLinkModel } from './CustomLinkModel';\nexport interface BodyWidgetProps {\n  app: Application;\n}\n\nexport const Layer = styled.div`\n  height: 100%;\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget: React.FC<BodyWidgetProps> = props => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState();\n  // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  const confirmDeletePort = (port: PortModel) => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        selectedNode.deletePort(port as CustomPortModel);\n        // dispatch(action.setPorts(selectedNode.getPorts()));\n      },\n    });\n  };\n  const selectPort = value => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', '');\n    // dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n  return (\n    <div style={{ height: '100%' }}>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: 10,\n          background: '#fff',\n        }}\n      >\n        <ActionMenu app={props.app} />\n      </div>\n      <Layer\n        onClick={e => {\n          e.stopPropagation();\n          setSelectedPort(undefined);\n        }}\n        onDrop={event => {\n          var node: CustomNodeModel;\n          node = new CustomNodeModel('Name');\n          var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n          node.setPosition(point);\n          props.app\n            .getDiagramEngine()\n            .getModel()\n            .addNode(node);\n          forceUpdate();\n        }}\n        onDragOver={event => {\n          event.preventDefault();\n        }}\n      >\n        <DemoCanvasWidget background=\"#ffff\">\n          <CanvasWidget engine={props.app.getDiagramEngine()} />\n        </DemoCanvasWidget>\n      </Layer>\n    </div>\n  );\n};\nexport default BodyWidget;\n"]},"metadata":{},"sourceType":"module"}