{"ast":null,"code":"import _regeneratorRuntime from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState } from '@projectstorm/react-diagrams'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport var RightAnglePortModel = /*#__PURE__*/function (_SRD$DefaultPortModel) {\n  _inherits(RightAnglePortModel, _SRD$DefaultPortModel);\n\n  var _super = _createSuper(RightAnglePortModel);\n\n  function RightAnglePortModel() {\n    _classCallCheck(this, RightAnglePortModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RightAnglePortModel, [{\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      return new CustomLinkModel();\n    }\n  }]);\n\n  return RightAnglePortModel;\n}(SRD.DefaultPortModel);\nexport var Application = /*#__PURE__*/function () {\n  function Application() {\n    var _this = this;\n\n    _classCallCheck(this, Application);\n\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"dispatch\", useDispatch());\n\n    _defineProperty(this, \"saveNode\", function () {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", function () {\n      // let tables = [];\n      // let relationships = [];\n      // this.activeModel.getNodes().forEach(node => {\n      //   let table = {\n      //     name: node.getOptions().extras,\n      //     columns: [],\n      //   };\n      //   Object.values(node.getPorts()).forEach(port => {\n      //     table.columns.push({\n      //       name: port.getOptions().extras.name,\n      //       type: port.getOptions().extras.type,\n      //       key: port.getOptions().extras.key,\n      //     });\n      //   });\n      //   tables.push(table);\n      // });\n      // this.activeModel.getLinks().forEach(link => {\n      //   let relationship = {\n      //     parentTable: link\n      //       .getSourcePort()\n      //       .getNode()\n      //       .getOptions().extras,\n      //     parentColumn: link.getSourcePort().getOptions().extras.name,\n      //     childTable: link\n      //       .getTargetPort()\n      //       .getNode()\n      //       .getOptions().extras,\n      //     childColumn: link.getTargetPort().getOptions().extras.name,\n      //   };\n      //   relationships.push(relationship);\n      // });\n      // tables.push(relationships);\n      // localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n      // window.postMessage(tables, '*');\n      var tables = '';\n\n      _this.activeModel.getNodes().forEach(function (node) {\n        var table = 'Table ' + node.getOptions().extras + ' {';\n        Object.values(node.getPorts()).forEach(function (port) {\n          table = table + ' \\n \\t' + port.getOptions().extras.name + ' ' + port.getOptions().extras.type;\n\n          if (port.getOptions().extras.key == 'PK') {}\n        });\n        tables = tables + table + '\\n}\\n \\n';\n      });\n\n      localStorage.setItem('json-diagram', tables);\n      window.postMessage(tables, '*');\n    });\n\n    _defineProperty(this, \"zoomToFit\", function () {\n      _this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", function () {\n      _this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", function () {\n      _this.engine.redistribute(_this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n\n      _this.reroute();\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() + 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", function () {\n      _this.activeModel.setZoomLevel(_this.activeModel.getZoomLevel() - 10);\n\n      _this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  _createClass(Application, [{\n    key: \"reroute\",\n    value: function reroute() {\n      this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n    }\n  }, {\n    key: \"newModel\",\n    value: function () {\n      var _newModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var state, node, port1, node2, port2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.activeModel = new SRD.DiagramModel();\n                this.activeModel.getZoomLevel();\n                this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n                this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', function () {\n                  return new CustomPortModel('', '', '');\n                }));\n                this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n                state = this.diagramEngine.getStateMachine().getCurrentState();\n\n                if (state instanceof DefaultDiagramState) {\n                  state.dragNewLink.config.allowLooseLinks = false;\n                }\n\n                node = new CustomNodeModel('Quang');\n                port1 = node.addCustomPort('quang', 'char', 'PK');\n                node.addPort(new CustomPortModel('test', 'char', ''));\n                node2 = new CustomNodeModel('Test');\n                port2 = node2.addCustomPort('test', 'char', 'PK');\n                node2.addPort(new CustomPortModel('test', 'char', ''));\n                this.activeModel.addAll(node, node2);\n                this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n                // const nodes = await db.collection('saveDiagram').doc('quang').get();\n                // let data = nodes.data().data;\n                // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n                // this.diagramEngine.setModel(this.activeModel);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function newModel() {\n        return _newModel.apply(this, arguments);\n      }\n\n      return newModel;\n    }()\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}();","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","DefaultDiagramState","RightAnglePortModel","DefaultPortModel","Application","tables","activeModel","getNodes","forEach","node","table","getOptions","extras","Object","values","getPorts","port","name","type","key","localStorage","setItem","window","postMessage","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","state","getStateMachine","getCurrentState","dragNewLink","config","allowLooseLinks","port1","addCustomPort","addPort","node2","port2","addAll","setModel"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState, DefaultLabelFactory } from '@projectstorm/react-diagrams';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    // let tables = [];\n    // let relationships = [];\n    // this.activeModel.getNodes().forEach(node => {\n    //   let table = {\n    //     name: node.getOptions().extras,\n    //     columns: [],\n    //   };\n    //   Object.values(node.getPorts()).forEach(port => {\n    //     table.columns.push({\n    //       name: port.getOptions().extras.name,\n    //       type: port.getOptions().extras.type,\n    //       key: port.getOptions().extras.key,\n    //     });\n    //   });\n    //   tables.push(table);\n    // });\n    // this.activeModel.getLinks().forEach(link => {\n    //   let relationship = {\n    //     parentTable: link\n    //       .getSourcePort()\n    //       .getNode()\n    //       .getOptions().extras,\n    //     parentColumn: link.getSourcePort().getOptions().extras.name,\n    //     childTable: link\n    //       .getTargetPort()\n    //       .getNode()\n    //       .getOptions().extras,\n    //     childColumn: link.getTargetPort().getOptions().extras.name,\n    //   };\n    //   relationships.push(relationship);\n    // });\n    // tables.push(relationships);\n    // localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n    // window.postMessage(tables, '*');\n    let tables = '';\n    this.activeModel.getNodes().forEach(node => {\n      let table = 'Table ' + node.getOptions().extras + ' {';\n      Object.values(node.getPorts()).forEach(port => {\n        table =\n          table + ' \\n \\t' + port.getOptions().extras.name + ' ' + port.getOptions().extras.type;\n        if (port.getOptions().extras.key == 'PK') {\n        }\n      });\n      tables = tables + table + '\\n}\\n \\n';\n    });\n\n    localStorage.setItem('json-diagram', tables);\n    window.postMessage(tables, '*');\n  };\n\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}