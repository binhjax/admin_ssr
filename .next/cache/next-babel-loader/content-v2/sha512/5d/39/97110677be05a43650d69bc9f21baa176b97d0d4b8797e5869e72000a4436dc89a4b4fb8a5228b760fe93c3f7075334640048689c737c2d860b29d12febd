{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState } from '@projectstorm/react-diagrams'; // import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\n\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n\n}\nexport class Application {\n  constructor() {\n    _defineProperty(this, \"activeModel\", void 0);\n\n    _defineProperty(this, \"diagramEngine\", void 0);\n\n    _defineProperty(this, \"engine\", void 0);\n\n    _defineProperty(this, \"dispatch\", useDispatch());\n\n    _defineProperty(this, \"saveNode\", () => {// db.collection('saveDiagram')\n      //   .doc('quang')\n      //   .set({\n      //     data: JSON.stringify(this.activeModel.serialize()),\n      //   })\n      //   .then(function () {\n      //     message.success('Save successful!');\n      //   })\n      //   .catch(function () {\n      //     message.error('Fail to save data');\n      //   });\n      // this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"toJson\", () => {\n      var tables = ``;\n      this.activeModel.getNodes().forEach(node => {\n        let columns = ``;\n        Object.values(node.getPorts()).forEach(port => {\n          let column = `${port.getOptions().extras.name} ${port.getOptions().extras.type} ${port.getOptions().extras.key} \\n`;\n          columns.concat(column);\n          table = `\n        Table ${node.getOptions().extras} {\n            ${columns}\n        }\n      `;\n          tables.concat(table);\n        });\n      }); // let relationships = [];\n      // this.activeModel.getNodes().forEach(node => {\n      //   let table = {\n      //     name: node.getOptions().extras,\n      //     columns: [],\n      //   };\n      //   Object.values(node.getPorts()).forEach(port => {\n      //     table.columns.push({\n      //       name: port.getOptions().extras.name,\n      //       type: port.getOptions().extras.type,\n      //       key: port.getOptions().extras.key,\n      //     });\n      //   });\n      // });\n      // this.activeModel.getLinks().forEach(link => {\n      //   let relationship = {\n      //     parentTable: link\n      //       .getSourcePort()\n      //       .getNode()\n      //       .getOptions().extras,\n      //     parentColumn: link.getSourcePort().getOptions().extras.name,\n      //     childTable: link\n      //       .getTargetPort()\n      //       .getNode()\n      //       .getOptions().extras,\n      //     childColumn: link.getTargetPort().getOptions().extras.name,\n      //   };\n      //   relationships.push(relationship);\n      // });\n      // tables.push(relationships);\n\n      localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n      window.postMessage(tables, '*');\n    });\n\n    _defineProperty(this, \"zoomToFit\", () => {\n      this.diagramEngine.zoomToFit();\n    });\n\n    _defineProperty(this, \"zoomNode\", () => {\n      this.diagramEngine.zoomToFitNodes(50);\n    });\n\n    _defineProperty(this, \"autoDistribute\", () => {\n      this.engine.redistribute(this.activeModel); // only happens if pathfing is enabled (check line 25)\n\n      this.reroute();\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomIn\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    _defineProperty(this, \"zoomOut\", () => {\n      this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n      this.diagramEngine.repaintCanvas();\n    });\n\n    this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n    this.newModel();\n  }\n\n  reroute() {\n    this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n  }\n\n  async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n    this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  getActiveDiagram() {\n    return this.activeModel;\n  }\n\n  getDiagramEngine() {\n    return this.diagramEngine;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","useDispatch","DefaultDiagramState","RightAnglePortModel","DefaultPortModel","createLinkModel","Application","constructor","tables","activeModel","getNodes","forEach","node","columns","Object","values","getPorts","port","column","getOptions","extras","name","type","key","concat","table","localStorage","setItem","JSON","stringify","window","postMessage","diagramEngine","zoomToFit","zoomToFitNodes","engine","redistribute","reroute","repaintCanvas","setZoomLevel","getZoomLevel","default","registerDefaultZoomCanvasAction","DiagramModel","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getNodeFactories","registerFactory","getPortFactories","state","getStateMachine","getCurrentState","dragNewLink","config","allowLooseLinks","port1","addCustomPort","addPort","node2","port2","addAll","setModel","getActiveDiagram","getDiagramEngine"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch } from 'react-redux';\nimport { DefaultDiagramState, DefaultLabelFactory } from '@projectstorm/react-diagrams';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nexport class Application {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = useDispatch();\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    var tables = ``;\n    this.activeModel.getNodes().forEach(node => {\n      let columns = ``;\n      Object.values(node.getPorts()).forEach(port => {\n        let column = `${port.getOptions().extras.name} ${port.getOptions().extras.type} ${\n          port.getOptions().extras.key\n        } \\n`;\n        columns.concat(column);\n        table = `\n        Table ${node.getOptions().extras} {\n            ${columns}\n        }\n      `;\n        tables.concat(table);\n      });\n    });\n    // let relationships = [];\n    // this.activeModel.getNodes().forEach(node => {\n    //   let table = {\n    //     name: node.getOptions().extras,\n    //     columns: [],\n    //   };\n    //   Object.values(node.getPorts()).forEach(port => {\n    //     table.columns.push({\n    //       name: port.getOptions().extras.name,\n    //       type: port.getOptions().extras.type,\n    //       key: port.getOptions().extras.key,\n    //     });\n    //   });\n    // });\n    // this.activeModel.getLinks().forEach(link => {\n    //   let relationship = {\n    //     parentTable: link\n    //       .getSourcePort()\n    //       .getNode()\n    //       .getOptions().extras,\n    //     parentColumn: link.getSourcePort().getOptions().extras.name,\n    //     childTable: link\n    //       .getTargetPort()\n    //       .getNode()\n    //       .getOptions().extras,\n    //     childColumn: link.getTargetPort().getOptions().extras.name,\n    //   };\n    //   relationships.push(relationship);\n    // });\n    // tables.push(relationships);\n    localStorage.setItem('json-diagram', JSON.stringify(tables, null, 2));\n    window.postMessage(tables, '*');\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n    const state = this.diagramEngine.getStateMachine().getCurrentState();\n    if (state instanceof DefaultDiagramState) {\n      state.dragNewLink.config.allowLooseLinks = false;\n    }\n    const node = new CustomNodeModel('Quang');\n    const port1 = node.addCustomPort('quang', 'char', 'PK');\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    const port2 = node2.addCustomPort('test', 'char', 'PK');\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}