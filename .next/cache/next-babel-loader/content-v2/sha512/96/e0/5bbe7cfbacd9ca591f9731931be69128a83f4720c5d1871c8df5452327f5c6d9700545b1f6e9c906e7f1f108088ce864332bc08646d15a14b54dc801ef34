{"ast":null,"code":"import \"antd/lib/skeleton/style\";\nimport _Skeleton from \"antd/lib/skeleton\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport \"antd/lib/tabs/style\";\nimport _Tabs from \"antd/lib/tabs\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport classNames from 'classnames';\nimport styles from './index.less';\nimport BreadcrumbView from './breadcrumb';\nvar TabPane = _Tabs.TabPane;\n\nvar PageHeader = /*#__PURE__*/function (_PureComponent) {\n  _inherits(PageHeader, _PureComponent);\n\n  var _super = _createSuper(PageHeader);\n\n  function PageHeader() {\n    var _this;\n\n    _classCallCheck(this, PageHeader);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (key) {\n      var onTabChange = _this.props.onTabChange;\n\n      if (onTabChange) {\n        onTabChange(key);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(PageHeader, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          title = _this$props.title,\n          logo = _this$props.logo,\n          action = _this$props.action,\n          content = _this$props.content,\n          extraContent = _this$props.extraContent,\n          tabList = _this$props.tabList,\n          className = _this$props.className,\n          tabActiveKey = _this$props.tabActiveKey,\n          tabDefaultActiveKey = _this$props.tabDefaultActiveKey,\n          tabBarExtraContent = _this$props.tabBarExtraContent,\n          _this$props$loading = _this$props.loading,\n          loading = _this$props$loading === void 0 ? false : _this$props$loading,\n          _this$props$wide = _this$props.wide,\n          wide = _this$props$wide === void 0 ? false : _this$props$wide,\n          _this$props$hiddenBre = _this$props.hiddenBreadcrumb,\n          hiddenBreadcrumb = _this$props$hiddenBre === void 0 ? false : _this$props$hiddenBre;\n      var clsString = classNames(styles.pageHeader, className);\n      var activeKeyProps = {};\n\n      if (tabDefaultActiveKey !== undefined) {\n        activeKeyProps.defaultActiveKey = tabDefaultActiveKey;\n      }\n\n      if (tabActiveKey !== undefined) {\n        activeKeyProps.activeKey = tabActiveKey;\n      }\n\n      return __jsx(\"div\", {\n        className: clsString\n      }, __jsx(\"div\", {\n        className: wide ? styles.wide : ''\n      }, __jsx(_Skeleton, {\n        loading: loading,\n        title: false,\n        active: true,\n        paragraph: {\n          rows: 3\n        },\n        avatar: {\n          size: 'large',\n          shape: 'circle'\n        }\n      }, hiddenBreadcrumb ? null : __jsx(BreadcrumbView, this.props), __jsx(\"div\", {\n        className: styles.detail\n      }, logo && __jsx(\"div\", {\n        className: styles.logo\n      }, logo), __jsx(\"div\", {\n        className: styles.main\n      }, __jsx(\"div\", {\n        className: styles.row\n      }, title && __jsx(\"h1\", {\n        className: styles.title\n      }, title), action && __jsx(\"div\", {\n        className: styles.action\n      }, action)), __jsx(\"div\", {\n        className: styles.row\n      }, content && __jsx(\"div\", {\n        className: styles.content\n      }, content), extraContent && __jsx(\"div\", {\n        className: styles.extraContent\n      }, extraContent)))), tabList && tabList.length ? __jsx(_Tabs, _extends({\n        className: styles.tabs\n      }, activeKeyProps, {\n        onChange: this.onChange,\n        tabBarExtraContent: tabBarExtraContent\n      }), tabList.map(function (item) {\n        return __jsx(TabPane, {\n          tab: item.tab,\n          key: item.key\n        });\n      })) : null)));\n    }\n  }]);\n\n  return PageHeader;\n}(PureComponent);\n\nexport { PageHeader as default };","map":null,"metadata":{},"sourceType":"module"}