{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { newUUID } from '@/utils/utils';\nimport FormDialog from '../../../components/FormDialog';\nimport TplDialog from '../../../components/TplDialog';\nimport styles from './index.less';\n\nfunction fillKey(data) {\n  if (!data) {\n    return [];\n  }\n\n  return data.map(item => {\n    const nitem = _objectSpread({}, item);\n\n    if (!nitem.key) {\n      nitem.key = newUUID();\n    }\n\n    return nitem;\n  });\n}\n\nexport default class MenuAction extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      dataSource: [],\n      formVisible: false,\n      formData: {},\n      tplVisible: false\n    });\n\n    _defineProperty(this, \"handleDelete\", key => {\n      const {\n        dataSource\n      } = this.state;\n      const data = dataSource.filter(item => item.key !== key);\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleEdit\", item => {\n      this.setState({\n        formVisible: true,\n        formData: item\n      });\n    });\n\n    _defineProperty(this, \"handleFormCancel\", () => {\n      this.setState({\n        formVisible: false\n      });\n    });\n\n    _defineProperty(this, \"handleFormSubmit\", formData => {\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n      let exists = false;\n\n      for (let i = 0; i < data.length; i += 1) {\n        if (data[i].code === formData.code) {\n          exists = true;\n          data[i] = _objectSpread({\n            key: formData.code\n          }, formData);\n          break;\n        }\n      }\n\n      if (!exists) {\n        data.push(_objectSpread({\n          key: formData.code\n        }, formData));\n      }\n\n      this.setState({\n        dataSource: data,\n        formVisible: false\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleAdd\", () => {\n      this.setState({\n        formVisible: true,\n        formData: {}\n      });\n    });\n\n    _defineProperty(this, \"handleTplCancel\", () => {\n      this.setState({\n        tplVisible: false\n      });\n    });\n\n    _defineProperty(this, \"handleTplSubmit\", formData => {\n      const {\n        path\n      } = formData;\n      const tplData = [{\n        code: 'add',\n        name: 'Add',\n        resources: [{\n          method: 'POST',\n          path\n        }]\n      }, {\n        code: 'edit',\n        name: 'Edit',\n        resources: [{\n          method: 'GET',\n          path: `${path}/:id`\n        }, {\n          method: 'PUT',\n          path: `${path}/:id`\n        }]\n      }, {\n        code: 'del',\n        name: 'Delete',\n        resources: [{\n          method: 'DELETE',\n          path: `${path}/:id`\n        }]\n      }, {\n        code: 'view',\n        name: 'View',\n        resources: [{\n          method: 'GET',\n          path: `${path}/:id`\n        }]\n      }, {\n        code: 'query',\n        name: 'Query',\n        resources: [{\n          method: 'GET',\n          path\n        }]\n      }];\n      const newData = tplData.map(v => _objectSpread({\n        key: v.code\n      }, v));\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n      const mDataSource = data.reduce((m, cur) => {\n        const nm = _objectSpread({}, m);\n\n        nm[cur.code] = cur;\n        return nm;\n      }, {});\n\n      for (let i = 0; i < newData.length; i += 1) {\n        if (!mDataSource[newData[i].key]) {\n          data.push(_objectSpread({}, newData[i]));\n        }\n      }\n\n      this.setState({\n        dataSource: data,\n        tplVisible: false\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"handleTplAdd\", () => {\n      this.setState({\n        tplVisible: true\n      });\n    });\n\n    _defineProperty(this, \"handleSave\", row => {\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n      const index = data.findIndex(item => row.key === item.key);\n      const item = data[index];\n      data.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"triggerChange\", data => {\n      const {\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        onChange(data);\n      }\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if ('value' in nextProps) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dataSource: fillKey(nextProps.value)\n      });\n    }\n\n    return state;\n  }\n\n  render() {\n    const {\n      dataSource,\n      tplVisible,\n      formData,\n      formVisible\n    } = this.state;\n    const columns = [{\n      title: 'Code',\n      dataIndex: 'code',\n      width: '35%'\n    }, {\n      title: 'Action Name',\n      dataIndex: 'name',\n      width: '35%'\n    }, {\n      title: 'Key',\n      dataIndex: 'key',\n      width: '30%',\n      render: (_, record) => {\n        return [__jsx(\"a\", {\n          href: \"#\",\n          onClick: () => this.handleEdit(record)\n        }, \"Edit\"), __jsx(_Divider, {\n          type: \"vertical\"\n        }), __jsx(_Popconfirm, {\n          title: \"Are you sure you want to delete this data?\",\n          onConfirm: () => this.handleDelete(record.key)\n        }, __jsx(\"a\", {\n          href: \"#\"\n        }, \"Delete\"))];\n      }\n    }];\n    return __jsx(\"div\", {\n      className: styles.tableList\n    }, __jsx(\"div\", {\n      className: styles.tableListOperator\n    }, __jsx(_Button, {\n      onClick: this.handleAdd,\n      size: \"small\",\n      type: \"primary\"\n    }, \"Add\"), __jsx(_Button, {\n      onClick: this.handleTplAdd,\n      size: \"small\",\n      type: \"primary\"\n    }, \"Quick template\")), __jsx(_Table, {\n      rowKey: record => record.key,\n      bordered: true,\n      dataSource: dataSource,\n      columns: columns,\n      pagination: false\n    }), __jsx(TplDialog, {\n      visible: tplVisible,\n      onSubmit: this.handleTplSubmit,\n      onCancel: this.handleTplCancel\n    }), __jsx(FormDialog, {\n      visible: formVisible,\n      formData: formData,\n      onSubmit: this.handleFormSubmit,\n      onCancel: this.handleFormCancel\n    }));\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}