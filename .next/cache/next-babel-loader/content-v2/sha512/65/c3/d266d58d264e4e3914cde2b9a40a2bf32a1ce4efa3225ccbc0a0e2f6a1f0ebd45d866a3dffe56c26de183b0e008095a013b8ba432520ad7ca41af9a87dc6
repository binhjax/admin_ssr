{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport PageHeaderLayout from '@/layouts/PageHeaderLayout';\nimport PButton from '@/components/PermButton';\nimport { formatDate } from '@/utils/utils';\nimport RoleCard from '../../components/Role/RoleCard';\nimport WithDva from '../../utils/store';\nimport styles from './role.less';\nlet RoleList = (_dec = Form.create(), _dec(_class = (_temp = class RoleList extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      selectedRowKeys: [],\n      selectedRows: []\n    });\n\n    _defineProperty(this, \"onItemDisableClick\", item => {\n      this.dispatch({\n        type: 'role/changeStatus',\n        payload: {\n          id: item.id,\n          status: 2\n        }\n      });\n    });\n\n    _defineProperty(this, \"onItemEnableClick\", item => {\n      this.dispatch({\n        type: 'role/changeStatus',\n        payload: {\n          id: item.id,\n          status: 1\n        }\n      });\n    });\n\n    _defineProperty(this, \"clearSelectRows\", () => {\n      const {\n        selectedRowKeys\n      } = this.state;\n\n      if (selectedRowKeys.length === 0) {\n        return;\n      }\n\n      this.setState({\n        selectedRowKeys: [],\n        selectedRows: []\n      });\n    });\n\n    _defineProperty(this, \"dispatch\", action => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(action);\n    });\n\n    _defineProperty(this, \"handleAddClick\", () => {\n      this.dispatch({\n        type: 'role/loadForm',\n        payload: {\n          type: 'A'\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleEditClick\", item => {\n      this.dispatch({\n        type: 'role/loadForm',\n        payload: {\n          type: 'E',\n          id: item.id\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleDelClick\", item => {\n      _Modal.confirm({\n        title: `Confirm to delete [role data：${item.name}】？`,\n        okText: 'Confirm',\n        okType: 'danger',\n        cancelText: 'Cancel',\n        onOk: this.handleDelOKClick.bind(this, item.id)\n      });\n    });\n\n    _defineProperty(this, \"handleTableSelectRow\", (record, selected) => {\n      const keys = [];\n      const rows = [];\n\n      if (selected) {\n        keys.push(record.id);\n        rows.push(record);\n      }\n\n      this.setState({\n        selectedRowKeys: keys,\n        selectedRows: rows\n      });\n    });\n\n    _defineProperty(this, \"handleTableChange\", pagination => {\n      this.dispatch({\n        type: 'role/fetch',\n        pagination: {\n          current: pagination.current,\n          pageSize: pagination.pageSize\n        }\n      });\n      this.clearSelectRows();\n    });\n\n    _defineProperty(this, \"onResetFormClick\", () => {\n      const {\n        form\n      } = this.props;\n      form.resetFields();\n      this.dispatch({\n        type: 'role/fetch',\n        search: {},\n        pagination: {}\n      });\n    });\n\n    _defineProperty(this, \"handleSearchFormSubmit\", e => {\n      if (e) {\n        e.preventDefault();\n      }\n\n      const {\n        form\n      } = this.props;\n      form.validateFields({\n        force: true\n      }, (err, values) => {\n        if (err) {\n          return;\n        }\n\n        this.dispatch({\n          type: 'role/fetch',\n          search: values,\n          pagination: {}\n        });\n        this.clearSelectRows();\n      });\n    });\n\n    _defineProperty(this, \"handleDataFormSubmit\", data => {\n      this.dispatch({\n        type: 'role/submit',\n        payload: data\n      });\n      this.clearSelectRows();\n    });\n\n    _defineProperty(this, \"handleDataFormCancel\", () => {\n      this.dispatch({\n        type: 'role/changeFormVisible',\n        payload: false\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.dispatch({\n      type: 'role/fetch',\n      search: {},\n      pagination: {}\n    });\n  }\n\n  handleDelOKClick(id) {\n    this.dispatch({\n      type: 'role/del',\n      payload: {\n        id\n      }\n    });\n    this.clearSelectRows();\n  }\n\n  renderDataForm() {\n    return __jsx(RoleCard, {\n      onCancel: this.handleDataFormCancel,\n      onSubmit: this.handleDataFormSubmit\n    });\n  }\n\n  renderSearchForm() {\n    const {\n      form: {\n        getFieldDecorator\n      }\n    } = this.props;\n    return __jsx(Form, {\n      onSubmit: this.handleSearchFormSubmit\n    }, __jsx(_Row, {\n      gutter: 16\n    }, __jsx(_Col, {\n      span: 8\n    }, __jsx(Form.Item, null, getFieldDecorator('queryValue')(__jsx(_Input, {\n      placeholder: \"Please enter the content to be queried\"\n    })))), __jsx(_Col, {\n      span: 8\n    }, __jsx(\"div\", {\n      style: {\n        overflow: 'hidden',\n        paddingTop: 4\n      }\n    }, __jsx(_Button, {\n      type: \"primary\",\n      htmlType: \"submit\"\n    }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n      style: {\n        marginLeft: 8\n      },\n      onClick: this.onResetFormClick\n    }, \"\\u91CD\\u7F6E\")))));\n  }\n\n  render() {\n    const {\n      loading,\n      role: {\n        data: {\n          list,\n          pagination\n        }\n      }\n    } = this.props;\n    const {\n      selectedRowKeys,\n      selectedRows\n    } = this.state;\n    const columns = [{\n      title: 'Role Name',\n      dataIndex: 'name'\n    }, {\n      title: 'Sort Value',\n      dataIndex: 'sequence'\n    }, {\n      title: 'Status',\n      dataIndex: 'status',\n      render: val => {\n        if (val === 1) {\n          return __jsx(_Badge, {\n            status: \"success\",\n            text: \"Enable\"\n          });\n        }\n\n        return __jsx(_Badge, {\n          status: \"error\",\n          text: \"Deactivate\"\n        });\n      }\n    }, {\n      title: 'Create Time',\n      dataIndex: 'created_at',\n      render: val => __jsx(\"span\", null, formatDate(val, 'YYYY-MM-DD'))\n    }, {\n      title: 'Remarks',\n      dataIndex: 'memo'\n    }];\n\n    const paginationProps = _objectSpread({\n      showSizeChanger: true,\n      showQuickJumper: true,\n      showTotal: total => __jsx(\"span\", null, \"Total \", total, \" pages\")\n    }, pagination);\n\n    const breadcrumbList = [{\n      title: 'System Management'\n    }, {\n      title: 'Role Management',\n      href: '/system/role'\n    }];\n    return __jsx(PageHeaderLayout, {\n      title: \"Role Management\",\n      breadcrumbList: breadcrumbList\n    }, __jsx(_Card, {\n      bordered: false\n    }, __jsx(\"div\", {\n      className: styles.tableList\n    }, __jsx(\"div\", {\n      className: styles.tableListForm\n    }, this.renderSearchForm()), __jsx(\"div\", {\n      className: styles.tableListOperator\n    }, __jsx(PButton, {\n      code: \"add\",\n      type: \"primary\",\n      onClick: () => this.handleAddClick()\n    }, \"New\"), selectedRows.length === 1 && [__jsx(PButton, {\n      key: \"edit\",\n      code: \"edit\",\n      onClick: () => this.handleEditClick(selectedRows[0])\n    }, \"Edit\"), __jsx(PButton, {\n      key: \"del\",\n      code: \"del\",\n      type: \"danger\",\n      onClick: () => this.handleDelClick(selectedRows[0])\n    }, \"Delete\"), selectedRows[0].status === 2 && __jsx(PButton, {\n      key: \"enable\",\n      code: \"enable\",\n      onClick: () => this.onItemEnableClick(selectedRows[0])\n    }, \"Enable\"), selectedRows[0].status === 1 && __jsx(PButton, {\n      key: \"disable\",\n      code: \"disable\",\n      type: \"danger\",\n      onClick: () => this.onItemDisableClick(selectedRows[0])\n    }, \"Disable\")]), __jsx(\"div\", null, __jsx(_Table, {\n      rowSelection: {\n        selectedRowKeys,\n        onSelect: this.handleTableSelectRow\n      },\n      loading: loading,\n      rowKey: record => record.id,\n      dataSource: list,\n      columns: columns,\n      pagination: paginationProps,\n      onChange: this.handleTableChange,\n      size: \"small\"\n    })))), this.renderDataForm());\n  }\n\n}, _temp)) || _class);\nexport default WithDva(state => ({\n  role: state.role,\n  loading: state.loading.models.role\n}))(RoleList);","map":null,"metadata":{},"sourceType":"module"}