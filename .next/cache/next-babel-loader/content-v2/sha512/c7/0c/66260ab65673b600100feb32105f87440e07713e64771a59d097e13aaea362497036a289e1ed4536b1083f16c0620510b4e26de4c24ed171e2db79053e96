{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/popconfirm/style\";\nimport _Popconfirm from \"antd/lib/popconfirm\";\nimport \"antd/lib/divider/style\";\nimport _Divider from \"antd/lib/divider\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { PureComponent } from 'react';\nimport { newUUID } from '@/utils/utils';\nimport FormDialog from '../../../components/FormDialog';\nimport TplDialog from '../../../components/TplDialog';\nimport styles from './index.less';\n\nfunction fillKey(data) {\n  if (!data) {\n    return [];\n  }\n\n  return data.map(function (item) {\n    var nitem = _objectSpread({}, item);\n\n    if (!nitem.key) {\n      nitem.key = newUUID();\n    }\n\n    return nitem;\n  });\n}\n\nvar MenuAction = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MenuAction, _PureComponent);\n\n  var _super = _createSuper(MenuAction);\n\n  function MenuAction() {\n    var _this;\n\n    _classCallCheck(this, MenuAction);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      dataSource: [],\n      formVisible: false,\n      formData: {},\n      tplVisible: false\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDelete\", function (key) {\n      var dataSource = _this.state.dataSource;\n      var data = dataSource.filter(function (item) {\n        return item.key !== key;\n      });\n\n      _this.setState({\n        dataSource: data\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEdit\", function (item) {\n      _this.setState({\n        formVisible: true,\n        formData: item\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFormCancel\", function () {\n      _this.setState({\n        formVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFormSubmit\", function (formData) {\n      var dataSource = _this.state.dataSource;\n\n      var data = _toConsumableArray(dataSource);\n\n      var exists = false;\n\n      for (var i = 0; i < data.length; i += 1) {\n        if (data[i].code === formData.code) {\n          exists = true;\n          data[i] = _objectSpread({\n            key: formData.code\n          }, formData);\n          break;\n        }\n      }\n\n      if (!exists) {\n        data.push(_objectSpread({\n          key: formData.code\n        }, formData));\n      }\n\n      _this.setState({\n        dataSource: data,\n        formVisible: false\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAdd\", function () {\n      _this.setState({\n        formVisible: true,\n        formData: {}\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTplCancel\", function () {\n      _this.setState({\n        tplVisible: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTplSubmit\", function (formData) {\n      var path = formData.path;\n      var tplData = [{\n        code: 'add',\n        name: 'Add',\n        resources: [{\n          method: 'POST',\n          path: path\n        }]\n      }, {\n        code: 'edit',\n        name: 'Edit',\n        resources: [{\n          method: 'GET',\n          path: \"\".concat(path, \"/:id\")\n        }, {\n          method: 'PUT',\n          path: \"\".concat(path, \"/:id\")\n        }]\n      }, {\n        code: 'del',\n        name: 'Delete',\n        resources: [{\n          method: 'DELETE',\n          path: \"\".concat(path, \"/:id\")\n        }]\n      }, {\n        code: 'view',\n        name: 'View',\n        resources: [{\n          method: 'GET',\n          path: \"\".concat(path, \"/:id\")\n        }]\n      }, {\n        code: 'query',\n        name: 'Query',\n        resources: [{\n          method: 'GET',\n          path: path\n        }]\n      }];\n      var newData = tplData.map(function (v) {\n        return _objectSpread({\n          key: v.code\n        }, v);\n      });\n      var dataSource = _this.state.dataSource;\n\n      var data = _toConsumableArray(dataSource);\n\n      var mDataSource = data.reduce(function (m, cur) {\n        var nm = _objectSpread({}, m);\n\n        nm[cur.code] = cur;\n        return nm;\n      }, {});\n\n      for (var i = 0; i < newData.length; i += 1) {\n        if (!mDataSource[newData[i].key]) {\n          data.push(_objectSpread({}, newData[i]));\n        }\n      }\n\n      _this.setState({\n        dataSource: data,\n        tplVisible: false\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTplAdd\", function () {\n      _this.setState({\n        tplVisible: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleSave\", function (row) {\n      var dataSource = _this.state.dataSource;\n\n      var data = _toConsumableArray(dataSource);\n\n      var index = data.findIndex(function (item) {\n        return row.key === item.key;\n      });\n      var item = data[index];\n      data.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n\n      _this.setState({\n        dataSource: data\n      }, function () {\n        _this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (data) {\n      var onChange = _this.props.onChange;\n\n      if (onChange) {\n        onChange(data);\n      }\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuAction, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          dataSource = _this$state.dataSource,\n          tplVisible = _this$state.tplVisible,\n          formData = _this$state.formData,\n          formVisible = _this$state.formVisible;\n      var columns = [{\n        title: 'Code',\n        dataIndex: 'code',\n        width: '35%'\n      }, {\n        title: 'Action Name',\n        dataIndex: 'name',\n        width: '35%'\n      }, {\n        title: 'Key',\n        dataIndex: 'key',\n        width: '30%',\n        render: function render(_, record) {\n          return [__jsx(\"a\", {\n            href: \"#\",\n            onClick: function onClick() {\n              return _this2.handleEdit(record);\n            }\n          }, \"Edit\"), __jsx(_Divider, {\n            type: \"vertical\"\n          }), __jsx(_Popconfirm, {\n            title: \"Are you sure you want to delete this data?\",\n            onConfirm: function onConfirm() {\n              return _this2.handleDelete(record.key);\n            }\n          }, __jsx(\"a\", {\n            href: \"#\"\n          }, \"Delete\"))];\n        }\n      }];\n      return __jsx(\"div\", {\n        className: styles.tableList\n      }, __jsx(\"div\", {\n        className: styles.tableListOperator\n      }, __jsx(_Button, {\n        onClick: this.handleAdd,\n        size: \"small\",\n        type: \"primary\"\n      }, \"Add\"), __jsx(_Button, {\n        onClick: this.handleTplAdd,\n        size: \"small\",\n        type: \"primary\"\n      }, \"Quick template\")), __jsx(_Table, {\n        rowKey: function rowKey(record) {\n          return record.key;\n        },\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: false\n      }), __jsx(TplDialog, {\n        visible: tplVisible,\n        onSubmit: this.handleTplSubmit,\n        onCancel: this.handleTplCancel\n      }), __jsx(FormDialog, {\n        visible: formVisible,\n        formData: formData,\n        onSubmit: this.handleFormSubmit,\n        onCancel: this.handleFormCancel\n      }));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, state) {\n      if ('value' in nextProps) {\n        return _objectSpread(_objectSpread({}, state), {}, {\n          dataSource: fillKey(nextProps.value)\n        });\n      }\n\n      return state;\n    }\n  }]);\n\n  return MenuAction;\n}(PureComponent);\n\nexport { MenuAction as default };","map":null,"metadata":{},"sourceType":"module"}