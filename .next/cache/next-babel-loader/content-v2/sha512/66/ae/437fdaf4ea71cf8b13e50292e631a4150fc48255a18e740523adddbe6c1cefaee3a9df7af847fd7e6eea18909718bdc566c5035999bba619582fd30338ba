{"ast":null,"code":"import \"antd/lib/spin/style\";\nimport _Spin from \"antd/lib/spin\";\nimport \"antd/lib/dropdown/style\";\nimport _Dropdown from \"antd/lib/dropdown\";\nimport \"antd/lib/avatar/style\";\nimport _Avatar from \"antd/lib/avatar\";\nimport \"antd/lib/menu/style\";\nimport _Menu from \"antd/lib/menu\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\n\nvar _dec, _class, _descriptor, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport React from 'react'; // import { Icon as LegacyIcon } from '@ant-design/compatible';\n\nimport { LockOutlined, LogoutOutlined, UserOutlined, MenuFoldOutlined, MenuUnfoldOutlined } from '@ant-design/icons';\nimport DocumentTitle from 'react-document-title'; // import { connect } from 'dva';\n\nimport WithDva from '../utils/store';\nimport { withRouter } from 'next/router'; // import { useRouter } from 'next/router'\n// eslint-disable-next-line import/no-extraneous-dependencies\n\nimport Link from 'next/link';\nimport { ContainerQuery } from 'react-container-query';\nimport classNames from 'classnames';\nimport Debounce from 'lodash-decorators/debounce';\nimport GlobalFooter from '@/components/GlobalFooter';\nimport CopyRight from '@/components/CopyRight';\nimport UpdatePasswordDialog from '@/components/UpdatePasswordDialog';\nimport context from '@/utils/context';\nimport './AdminLayout.less';\nimport logo from '../assets/logo.svg';\nconst {\n  Header,\n  Sider,\n  Content\n} = _Layout;\nconst {\n  SubMenu\n} = _Menu;\nconst query = {\n  'screen-xs': {\n    maxWidth: 575\n  },\n  'screen-sm': {\n    minWidth: 576,\n    maxWidth: 767\n  },\n  'screen-md': {\n    minWidth: 768,\n    maxWidth: 991\n  },\n  'screen-lg': {\n    minWidth: 992,\n    maxWidth: 1199\n  },\n  'screen-xl': {\n    minWidth: 1200\n  }\n};\nlet AdminLayout = (_dec = Debounce(600), (_class = (_temp = class AdminLayout extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      updatePwdVisible: false\n    });\n\n    _defineProperty(this, \"dispatch\", action => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(action);\n    });\n\n    _defineProperty(this, \"onCollapse\", () => {\n      const {\n        collapsed\n      } = this.props;\n      this.dispatch({\n        type: 'global/changeLayoutCollapsed',\n        payload: !collapsed\n      });\n    });\n\n    _defineProperty(this, \"onMenuClick\", ({\n      key\n    }) => {\n      if (key === 'logout') {\n        this.dispatch({\n          type: 'login/logout'\n        });\n      } else if (key === 'updatepwd') {\n        this.setState({\n          updatePwdVisible: true\n        });\n      }\n    });\n\n    _defineProperty(this, \"onMenuOpenChange\", openKeys => {\n      const {\n        menuMap\n      } = this.props;\n\n      if (openKeys.length > 1) {\n        const lastKey = openKeys[openKeys.length - 1];\n        const lastItem = menuMap[lastKey];\n\n        if (!lastItem) {\n          this.dispatch({\n            type: 'global/changeOpenKeys',\n            payload: []\n          });\n          return;\n        }\n\n        let isParent = false;\n\n        for (let i = 0; i < openKeys.length - 1; i += 1) {\n          const item = menuMap[openKeys[i]] || {};\n          let path = item.id;\n\n          if (item.parent_path !== '') {\n            path = `${item.parent_path}/${path}`;\n          }\n\n          if (lastItem.parent_path === path) {\n            isParent = true;\n            break;\n          }\n        }\n\n        if (!isParent) {\n          this.dispatch({\n            type: 'global/changeOpenKeys',\n            payload: [lastKey]\n          });\n          return;\n        }\n      }\n\n      this.dispatch({\n        type: 'global/changeOpenKeys',\n        payload: [...openKeys]\n      });\n    });\n\n    _defineProperty(this, \"onToggleClick\", () => {\n      const {\n        collapsed\n      } = this.props;\n      this.dispatch({\n        type: 'global/changeLayoutCollapsed',\n        payload: !collapsed\n      });\n      this.onTriggerResizeEvent();\n    });\n\n    _initializerDefineProperty(this, \"onTriggerResizeEvent\", _descriptor, this);\n\n    _defineProperty(this, \"handleUpdatePwdCancel\", () => {\n      this.setState({\n        updatePwdVisible: false\n      });\n    });\n  }\n\n  static async getInitialProps(props) {\n    // first time run in server side\n    // other times run in client side ( client side init with default props\n    // console.log('get init props', props);\n    const {\n      pathname,\n      query,\n      isServer,\n      store\n    } = props; // dispatch effects to fetch data here\n\n    return {\n      // dont use store as property name, it will confilct with initial store\n      pathname,\n      query,\n      isServer,\n      dvaStore: store\n    };\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount: ', this.props);\n    const {\n      router: {\n        pathname\n      }\n    } = this.props;\n    this.dispatch({\n      type: 'global/fetchUser'\n    });\n    this.dispatch({\n      type: 'global/fetchMenuTree',\n      pathname\n    });\n  }\n\n  renderNavMenuItems(menusData) {\n    if (!menusData) {\n      return [];\n    }\n\n    return menusData.map(item => {\n      if (!item.name || item.show_status !== 1) {\n        return null;\n      }\n\n      if (item.children && item.children.some(child => child.name && child.show_status === 1)) {\n        return __jsx(SubMenu, {\n          title: item.icon ? __jsx(\"span\", null, __jsx(\"span\", null, item.name)) : item.name,\n          key: item.id\n        }, this.renderNavMenuItems(item.children));\n      }\n\n      const {\n        router\n      } = item; // const icon = item.icon && <LegacyIcon type={item.icon} />;\n      // console.log(\"renderNavMenuItems: \", this.props);\n\n      const {\n        router: {\n          pathname\n        }\n      } = this.props;\n      return __jsx(_Menu.Item, {\n        key: item.id\n      }, router.startsWith('http') ? __jsx(\"a\", {\n        href: router,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\"\n      }, icon, __jsx(\"span\", null, item.name)) : __jsx(Link, {\n        href: router,\n        replace: router === pathname\n      }, __jsx(\"div\", null, __jsx(\"span\", null, item.name))));\n    });\n  }\n\n  renderPageTitle() {\n    const {\n      router: {\n        pathname\n      },\n      menuPaths,\n      title\n    } = this.props; // console.log('AdminLayout: => renderPageTitle: pathname', pathname);\n\n    let ptitle = title;\n    const item = menuPaths[pathname];\n\n    if (item) {\n      ptitle = `${item.name} - ${title}`;\n    }\n\n    return ptitle;\n  }\n\n  render() {\n    const {\n      children,\n      user,\n      collapsed,\n      menus,\n      copyRight,\n      openKeys,\n      title,\n      selectedKeys,\n      global\n    } = this.props;\n    const {\n      updatePwdVisible\n    } = this.state;\n\n    const menu = __jsx(_Menu, {\n      className: \"menu\",\n      selectedKeys: [],\n      onClick: this.onMenuClick\n    }, __jsx(_Menu.Item, {\n      key: \"updatepwd\"\n    }, __jsx(LockOutlined, null), \"Change Password\"), __jsx(_Menu.Divider, null), __jsx(_Menu.Item, {\n      key: \"logout\"\n    }, __jsx(LogoutOutlined, null), \"Sign Out\")); // Don't show popup menu when it is been collapsed\n\n\n    const menuProps = collapsed ? {} : {\n      openKeys\n    };\n    const siderWidth = 256;\n\n    const layout = __jsx(_Layout, null, __jsx(Sider, {\n      trigger: null,\n      collapsible: true,\n      collapsed: collapsed,\n      breakpoint: \"lg\",\n      onCollapse: this.onCollapse,\n      width: siderWidth,\n      className: \"sider\"\n    }, __jsx(\"div\", {\n      className: \"logo\"\n    }, __jsx(Link, {\n      href: \"/\"\n    }, __jsx(\"div\", null, __jsx(\"img\", {\n      src: logo,\n      alt: \"logo\"\n    }), __jsx(\"h1\", null, title)))), __jsx(_Menu, _extends({\n      theme: \"dark\",\n      mode: \"inline\"\n    }, menuProps, {\n      onOpenChange: this.onMenuOpenChange,\n      selectedKeys: selectedKeys,\n      style: {\n        margin: '16px 0',\n        width: '100%'\n      }\n    }), this.renderNavMenuItems(menus))), __jsx(_Layout, null, __jsx(Header, {\n      className: classNames('header'),\n      style: {\n        paddingLeft: 12,\n        paddingRight: 12\n      }\n    }, __jsx(\"div\", {\n      className: classNames('foldout'),\n      onClick: () => this.onCollapse()\n    }, collapsed ? __jsx(MenuUnfoldOutlined, null) : __jsx(MenuFoldOutlined, null)), __jsx(\"div\", {\n      className: classNames('right')\n    }, user.user_name ? __jsx(_Dropdown, {\n      overlay: menu\n    }, __jsx(\"span\", {\n      className: classNames(['action', 'account'])\n    }, __jsx(_Avatar, {\n      size: \"small\",\n      className: classNames('avatar'),\n      icon: __jsx(UserOutlined, null)\n    }), // user.real_name !== ''\n    // ? `${user.user_name}(${user.real_name})`\n    // : user.user_name\n    user.user_name)) : __jsx(_Spin, {\n      size: \"small\",\n      style: {\n        marginLeft: 8\n      }\n    }))), __jsx(Content, {\n      className: classNames('content')\n    }, __jsx(\"div\", {\n      style: {\n        minHeight: 'calc(100vh - 150px)'\n      }\n    }, __jsx(context.GlobalContext.Provider, {\n      value: global\n    }, children)), __jsx(GlobalFooter, {\n      copyright: __jsx(CopyRight, {\n        title: copyRight\n      })\n    }))), __jsx(UpdatePasswordDialog, {\n      visible: updatePwdVisible,\n      onCancel: this.handleUpdatePwdCancel\n    }));\n\n    return __jsx(DocumentTitle, {\n      title: this.renderPageTitle()\n    }, __jsx(ContainerQuery, {\n      query: query\n    }, params => __jsx(\"div\", {\n      className: classNames(params)\n    }, layout)));\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"onTriggerResizeEvent\", [_dec], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return () => {\n      const event = document.createEvent('HTMLEvents');\n      event.initEvent('resize', true, false);\n      window.dispatchEvent(event);\n    };\n  }\n})), _class)); // export default AdminLayout;\n\nexport default WithDva(state => ({\n  title: state.global.title,\n  copyRight: state.global.copyRight,\n  collapsed: state.global.collapsed,\n  openKeys: state.global.openKeys,\n  selectedKeys: state.global.selectedKeys,\n  user: state.global.user,\n  menuPaths: state.global.menuPaths,\n  menuMap: state.global.menuMap,\n  menus: state.global.menus,\n  global: state.global\n}))(withRouter(AdminLayout));","map":null,"metadata":{},"sourceType":"module"}