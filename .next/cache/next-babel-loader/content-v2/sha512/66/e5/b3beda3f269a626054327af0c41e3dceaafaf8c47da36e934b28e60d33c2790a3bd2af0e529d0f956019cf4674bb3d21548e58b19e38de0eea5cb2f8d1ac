{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/LabelWidget.tsx\";\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nlet S;\n\n(function (_S) {\n  const Label = _S.Label = styled.div`\n    display: inline-block;\n    position: absolute;\n  `;\n  const Foreign = _S.Foreign = styled.foreignObject`\n    pointer-events: none;\n    overflow: visible;\n  `;\n})(S || (S = {}));\n\nexport class LabelWidget extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"ref\", void 0);\n\n    _defineProperty(this, \"findPathAndRelativePositionToRenderLabel\", index => {\n      // an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n      const link = this.props.label.getParent(); // calculate the point where we want to display the label\n\n      let labelPosition = lengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) * (index / (link.getLabels().length + 1)); // find the path where the label will be rendered and calculate the relative position\n\n      let pathIndex = 0;\n\n      while (pathIndex < link.getRenderedPath().length) {\n        if (labelPosition - lengths[pathIndex] < 0) {\n          return {\n            path: link.getRenderedPath()[pathIndex],\n            position: labelPosition\n          };\n        } // keep searching\n\n\n        labelPosition -= lengths[pathIndex];\n        pathIndex++;\n      }\n    });\n\n    _defineProperty(this, \"calculateLabelPosition\", () => {\n      const found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n\n      if (!found) {\n        return;\n      }\n\n      const {\n        path,\n        position\n      } = found;\n      const labelDimensions = {\n        width: this.ref.current.offsetWidth,\n        height: this.ref.current.offsetHeight\n      };\n      const pathCentre = path.getPointAtLength(position);\n      const labelCoordinates = {\n        x: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n        y: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY\n      };\n      this.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n    });\n\n    this.ref = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidUpdate() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  render() {\n    const canvas = this.props.engine.getCanvas();\n    return /*#__PURE__*/_jsxDEV(S.Foreign, {\n      width: canvas.offsetWidth,\n      height: canvas.offsetHeight,\n      children: /*#__PURE__*/_jsxDEV(S.Label, {\n        ref: this.ref,\n        children: this.props.engine.getFactoryForLabel(this.props.label).generateReactWidget({\n          model: this.props.label\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)\n    }, this.props.label.getID(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/LabelWidget.tsx"],"names":["React","styled","Label","div","Foreign","foreignObject","S","LabelWidget","Component","constructor","props","index","link","label","getParent","labelPosition","lengths","reduce","previousValue","currentValue","getLabels","length","pathIndex","getRenderedPath","path","position","found","findPathAndRelativePositionToRenderLabel","labelDimensions","width","ref","current","offsetWidth","height","offsetHeight","pathCentre","getPointAtLength","labelCoordinates","x","getOptions","offsetX","y","offsetY","style","transform","createRef","componentDidUpdate","window","requestAnimationFrame","calculateLabelPosition","componentDidMount","render","canvas","engine","getCanvas","getFactoryForLabel","generateReactWidget","model","getID"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DiagramEngine } from '@projectstorm/react-diagrams';\nimport { LabelModel } from './LabelModel';\nimport styled from '@emotion/styled';\n\nexport interface LabelWidgetProps {\n  engine: DiagramEngine;\n  label: LabelModel;\n  index: number;\n}\n\nnamespace S {\n  export const Label = styled.div`\n    display: inline-block;\n    position: absolute;\n  `;\n\n  export const Foreign = styled.foreignObject`\n    pointer-events: none;\n    overflow: visible;\n  `;\n}\n\nexport class LabelWidget extends React.Component<LabelWidgetProps> {\n  ref: React.RefObject<HTMLDivElement>;\n\n  constructor(props: LabelWidgetProps) {\n    super(props);\n    this.ref = React.createRef();\n  }\n\n  componentDidUpdate() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.calculateLabelPosition);\n  }\n\n  findPathAndRelativePositionToRenderLabel = (\n    index: number\n  ): { path: SVGPathElement; position: number } => {\n    // an array to hold all path lengths, making sure we hit the DOM only once to fetch this information\n    const link = this.props.label.getParent();\n\n    // calculate the point where we want to display the label\n    let labelPosition =\n      lengths.reduce((previousValue, currentValue) => previousValue + currentValue, 0) *\n      (index / (link.getLabels().length + 1));\n\n    // find the path where the label will be rendered and calculate the relative position\n    let pathIndex = 0;\n    while (pathIndex < link.getRenderedPath().length) {\n      if (labelPosition - lengths[pathIndex] < 0) {\n        return {\n          path: link.getRenderedPath()[pathIndex],\n          position: labelPosition,\n        };\n      }\n\n      // keep searching\n      labelPosition -= lengths[pathIndex];\n      pathIndex++;\n    }\n  };\n\n  calculateLabelPosition = () => {\n    const found = this.findPathAndRelativePositionToRenderLabel(this.props.index + 1);\n    if (!found) {\n      return;\n    }\n\n    const { path, position } = found;\n\n    const labelDimensions = {\n      width: this.ref.current.offsetWidth,\n      height: this.ref.current.offsetHeight,\n    };\n\n    const pathCentre = path.getPointAtLength(position);\n\n    const labelCoordinates = {\n      x: pathCentre.x - labelDimensions.width / 2 + this.props.label.getOptions().offsetX,\n      y: pathCentre.y - labelDimensions.height / 2 + this.props.label.getOptions().offsetY,\n    };\n\n    this.ref.current.style.transform = `translate(${labelCoordinates.x}px, ${labelCoordinates.y}px)`;\n  };\n\n  render() {\n    const canvas = this.props.engine.getCanvas();\n    return (\n      <S.Foreign\n        key={this.props.label.getID()}\n        width={canvas.offsetWidth}\n        height={canvas.offsetHeight}\n      >\n        <S.Label ref={this.ref}>\n          {this.props.engine\n            .getFactoryForLabel(this.props.label)\n            .generateReactWidget({ model: this.props.label })}\n        </S.Label>\n      </S.Foreign>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}