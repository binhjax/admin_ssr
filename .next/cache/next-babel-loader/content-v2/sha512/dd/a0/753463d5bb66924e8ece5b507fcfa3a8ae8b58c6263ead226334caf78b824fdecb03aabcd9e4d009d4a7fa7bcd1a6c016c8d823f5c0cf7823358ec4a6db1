{"ast":null,"code":"import \"antd/lib/breadcrumb/style\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent, createElement } from 'react';\nimport pathToRegexp from 'path-to-regexp';\nimport styles from './index.less';\nimport { urlToList } from '../_utils/pathTools';\nexport const getBreadcrumb = (breadcrumbNameMap, url) => {\n  let breadcrumb = breadcrumbNameMap[url];\n\n  if (!breadcrumb) {\n    Object.keys(breadcrumbNameMap).forEach(item => {\n      if (pathToRegexp(item).test(url)) {\n        breadcrumb = breadcrumbNameMap[item];\n      }\n    });\n  }\n\n  return breadcrumb || {};\n};\nexport default class BreadcrumbView extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      breadcrumb: null\n    });\n\n    _defineProperty(this, \"getBreadcrumbDom\", () => {\n      const breadcrumb = this.conversionBreadcrumbList();\n      this.setState({\n        breadcrumb\n      });\n    });\n\n    _defineProperty(this, \"getBreadcrumbProps\", () => {\n      const {\n        routes,\n        params,\n        location,\n        breadcrumbNameMap\n      } = this.props;\n      return {\n        routes,\n        params,\n        routerLocation: location,\n        breadcrumbNameMap\n      };\n    });\n\n    _defineProperty(this, \"conversionFromProps\", () => {\n      const {\n        breadcrumbList,\n        breadcrumbSeparator,\n        itemRender,\n        linkElement = 'a'\n      } = this.props;\n      return __jsx(_Breadcrumb, {\n        className: styles.breadcrumb,\n        separator: breadcrumbSeparator\n      }, breadcrumbList.map(item => {\n        const title = itemRender ? itemRender(item) : item.title;\n        return __jsx(_Breadcrumb.Item, {\n          key: item.title\n        }, item.href ? /*#__PURE__*/createElement(linkElement, {\n          [linkElement === 'a' ? 'href' : 'to']: item.href\n        }, title) : title);\n      }));\n    });\n\n    _defineProperty(this, \"conversionFromLocation\", (routerLocation, breadcrumbNameMap) => {\n      const {\n        breadcrumbSeparator,\n        home,\n        itemRender,\n        linkElement = 'a'\n      } = this.props; // Convert the url to an array\n\n      const pathSnippets = urlToList(routerLocation.pathname); // Loop data mosaic routing\n\n      const extraBreadcrumbItems = pathSnippets.map((url, index) => {\n        const currentBreadcrumb = getBreadcrumb(breadcrumbNameMap, url);\n\n        if (currentBreadcrumb.inherited) {\n          return null;\n        }\n\n        const isLinkable = index !== pathSnippets.length - 1 && currentBreadcrumb.component;\n        const name = itemRender ? itemRender(currentBreadcrumb) : currentBreadcrumb.name;\n        return currentBreadcrumb.name && !currentBreadcrumb.hideInBreadcrumb ? __jsx(_Breadcrumb.Item, {\n          key: url\n        }, /*#__PURE__*/createElement(isLinkable ? linkElement : 'span', {\n          [linkElement === 'a' ? 'href' : 'to']: url\n        }, name)) : null;\n      }); // Add home breadcrumbs to your head\n\n      extraBreadcrumbItems.unshift(__jsx(_Breadcrumb.Item, {\n        key: \"home\"\n      }, /*#__PURE__*/createElement(linkElement, {\n        [linkElement === 'a' ? 'href' : 'to']: '/'\n      }, home || 'Home')));\n      return __jsx(_Breadcrumb, {\n        className: styles.breadcrumb,\n        separator: breadcrumbSeparator\n      }, extraBreadcrumbItems);\n    });\n\n    _defineProperty(this, \"conversionBreadcrumbList\", () => {\n      const {\n        breadcrumbList,\n        breadcrumbSeparator\n      } = this.props;\n      const {\n        routes,\n        params,\n        routerLocation,\n        breadcrumbNameMap\n      } = this.getBreadcrumbProps();\n\n      if (breadcrumbList && breadcrumbList.length) {\n        return this.conversionFromProps();\n      } // 如果传入 routes 和 params 属性\n      // If pass routes and params attributes\n\n\n      if (routes && params) {\n        return __jsx(_Breadcrumb, {\n          className: styles.breadcrumb,\n          routes: routes.filter(route => route.breadcrumbName),\n          params: params,\n          itemRender: this.itemRender,\n          separator: breadcrumbSeparator\n        });\n      } // 根据 location 生成 面包屑\n      // Generate breadcrumbs based on location\n\n\n      if (routerLocation && routerLocation.pathname) {\n        return this.conversionFromLocation(routerLocation, breadcrumbNameMap);\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"itemRender\", (route, params, routes, paths) => {\n      const {\n        linkElement = 'a'\n      } = this.props;\n      const last = routes.indexOf(route) === routes.length - 1;\n      return last || !route.component ? __jsx(\"span\", null, route.breadcrumbName) : /*#__PURE__*/createElement(linkElement, {\n        href: paths.join('/') || '/',\n        to: paths.join('/') || '/'\n      }, route.breadcrumbName);\n    });\n  }\n\n  componentDidMount() {\n    this.getBreadcrumbDom();\n  }\n\n  componentDidUpdate(preProps) {\n    const {\n      location\n    } = this.props;\n\n    if (!location || !preProps.location) {\n      return;\n    }\n\n    const prePathname = preProps.location.pathname;\n\n    if (prePathname !== location.pathname) {\n      this.getBreadcrumbDom();\n    }\n  }\n\n  render() {\n    const {\n      breadcrumb\n    } = this.state;\n    return breadcrumb;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}