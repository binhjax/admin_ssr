{"ast":null,"code":"import \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/popover/style\";\nimport _Popover from \"antd/lib/popover\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/select/style\";\nimport _Select from \"antd/lib/select\";\nimport \"antd/lib/typography/style\";\nimport _Typography from \"antd/lib/typography\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/CustomNode/CustomNodeWidget.tsx\";\nimport * as React from 'react';\nimport { useDispatch } from 'react-redux'; // import * as action from '../../actions/node';\n\nimport { PortWidget } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined, PlusOutlined, EditOutlined, KeyOutlined, MoreOutlined, DeleteOutlined } from '@ant-design/icons';\nconst {\n  Text\n} = _Typography;\nconst {\n  Option\n} = _Select;\n\n/**\n * @author Nguyen Tuan Quang\n */\nexport const Port = styled.div`\n  width: 20px;\n  height: 20px;\n  background: #f6f6f6;\n  cursor: pointer;\n  margin-top: 5px;\n\n  &:hover {\n    background: #deecf3;\n  }\n`;\nconst styles = {\n  cardHeader: {\n    color: 'white',\n    border: ' 0 solid #e2e8f0',\n    fontWeight: 400,\n    fontSize: '20px',\n    padding: '5px 20px',\n    height: '40px',\n    background: '#316896',\n    marginBottom: '-2px'\n  },\n  rightPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '380px'\n  },\n  leftPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '0'\n  },\n  fieldText: {\n    fontSize: '20px'\n  }\n};\n\nconst CustomNodeWidget = props => {\n  // const { dispatch } = props;\n  const [editNode, setEditNode] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [hover, setHover] = React.useState(''); // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const dispatch = useDispatch();\n\n  const save = () => {\n    props.node.addCustomPort('new_col', '', '');\n    props.engine.repaintCanvas();\n  };\n\n  const confirm = () => {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this),\n      content: 'Confirm delete table',\n      okText: 'Yes',\n      cancelText: 'No',\n\n      onOk() {\n        props.node.remove();\n        props.engine.repaintCanvas();\n      }\n\n    });\n  }; // const confirmDeletePort = (port: PortModel) => {\n  //   Modal.confirm({\n  //     title: 'Confirm',\n  //     icon: <ExclamationCircleOutlined />,\n  //     content: 'Confirm delete port',\n  //     okText: 'Yes',\n  //     cancelText: 'No',\n  //     onOk() {\n  //       props.node.removePort(port);\n  //       dispatch(action.setPorts(props.node.getPorts()));\n  //       props.engine.repaintCanvas();\n  //     },\n  //   });\n  // };\n  // const openEdit = () => {\n  //   setEditNode(true);\n  //   setName(props.node.getOptions().extras);\n  //   dispatch(action.setPorts(props.node.getPorts()));\n  // };\n  // const closeEdit = () => {\n  //   setEditNode(false);\n  //   setName('');\n  // };\n  // const handelChangeName = (e: any) => {\n  //   setName(e.target.value);\n  // };\n  // const handleChangePort = (e) => {\n  //   const { id, name, value } = e.target;\n  //   ports[name].getOptions().extras[id] = value;\n  //   // dispatch(action.setPorts({ ...ports }));\n  // };\n\n\n  const submit = () => {\n    props.node.setName(name);\n    closeEdit();\n  };\n\n  const handleDeleteButton = (e, value) => {\n    e.stopPropagation();\n\n    if (e.key === 'Delete') {\n      confirmDeletePort(value);\n    }\n  };\n\n  const handleRowClick = (e, key, value) => {\n    setHover(key); // dispatch(action.setPort(value));\n\n    props.node.setSelected(false);\n  };\n\n  const selectTable = e => {\n    props.node.setSelected(false); // dispatch(action.setSelectedNode(props.node));\n    // dispatch(action.setActive('table'));\n  };\n\n  const content = /*#__PURE__*/_jsxDEV(_Row, {\n    children: [/*#__PURE__*/_jsxDEV(_Button, {\n      type: \"ghost\",\n      icon: /*#__PURE__*/_jsxDEV(PlusOutlined, {\n        style: {\n          color: 'green'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 15\n      }, this),\n      onClick: () => save()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Button, {\n      type: \"ghost\",\n      icon: /*#__PURE__*/_jsxDEV(EditOutlined, {\n        style: {\n          color: 'cyan'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 15\n      }, this),\n      onClick: () => openEdit()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(_Button, {\n      type: \"ghost\",\n      icon: /*#__PURE__*/_jsxDEV(DeleteOutlined, {\n        style: {\n          color: 'red'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }, this),\n      onClick: () => confirm()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: 'custom-node',\n      style: {\n        position: 'relative',\n        minWidth: props.size * 4,\n        minHeight: props.size\n      },\n      onKeyDown: e => {\n        e.stopPropagation();\n\n        if (e.key === 'Delete') {\n          confirm();\n        }\n      },\n      onClick: e => {\n        selectTable(e);\n      },\n      tabIndex: -1,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.cardHeader,\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: props.node.getOptions().extras\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          background: '#F6F6F6',\n          padding: '20px',\n          border: 'none'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '0',\n            right: '0'\n          },\n          children: /*#__PURE__*/_jsxDEV(_Popover, {\n            placement: \"rightBottom\",\n            content: content,\n            trigger: \"focus\",\n            children: /*#__PURE__*/_jsxDEV(_Button, {\n              type: \"ghost\",\n              style: {\n                border: 'none'\n              },\n              icon: /*#__PURE__*/_jsxDEV(MoreOutlined, {\n                style: {\n                  color: 'white',\n                  fontSize: '20px',\n                  paddingTop: '5px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 312,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), Object.entries(props.node.getPorts()).map(([key, value], index) => value.getOptions().extras.key === 'PRIMARY KEY' ? /*#__PURE__*/_jsxDEV(_Row, {\n          onFocus: () => setHover(key),\n          onBlur: () => setHover(''),\n          style: {\n            backgroundColor: hover === key ? '#4770FF' : '',\n            fontWeight: 'bold',\n            fontSize: '20px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(PortWidget, {\n            port: value,\n            engine: props.engine,\n            style: styles.leftPort,\n            children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 330,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PortWidget, {\n            port: value,\n            engine: props.engine,\n            style: styles.rightPort,\n            children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 333,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            span: 10,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: value.getOptions().extras.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 335,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            span: 8,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              style: {\n                color: '#dbdd4d'\n              },\n              children: value.getOptions().extras.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            span: 3,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              children: \"PK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            span: 3,\n            children: /*#__PURE__*/_jsxDEV(KeyOutlined, {\n              style: {\n                color: 'yellow',\n                fontSize: 20\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 15\n        }, this) : ''), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), Object.entries(props.node.getPorts()).map(([key, value], index) => value.getOptions().extras.key !== 'PRIMARY KEY' ? /*#__PURE__*/_jsxDEV(_Row, {\n          onClick: e => handleRowClick(e, key, value),\n          onBlur: () => setHover(''),\n          style: {\n            backgroundColor: hover === key ? '#deecf3' : ''\n          },\n          onKeyDown: e => handleDeleteButton(e, value),\n          tabIndex: -1,\n          children: [/*#__PURE__*/_jsxDEV(PortWidget, {\n            port: value,\n            engine: props.engine,\n            style: styles.leftPort,\n            children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 365,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(PortWidget, {\n            port: value,\n            engine: props.engine,\n            style: styles.rightPort,\n            children: /*#__PURE__*/_jsxDEV(Port, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            lg: 10,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              style: styles.fieldText,\n              children: value.getOptions().extras.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            lg: 8,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              style: styles.fieldText,\n              children: value.getOptions().extras.type\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 374,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(_Col, {\n            lg: 3,\n            children: /*#__PURE__*/_jsxDEV(Text, {\n              style: styles.fieldText,\n              children: value.getOptions().extras.key\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 376,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 15\n        }, this) : '')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\nexport default CustomNodeWidget;","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/CustomNode/CustomNodeWidget.tsx"],"names":["React","useDispatch","PortWidget","styled","ExclamationCircleOutlined","PlusOutlined","EditOutlined","KeyOutlined","MoreOutlined","DeleteOutlined","Text","Option","Port","div","styles","cardHeader","color","border","fontWeight","fontSize","padding","height","background","marginBottom","rightPort","width","position","left","leftPort","fieldText","CustomNodeWidget","props","editNode","setEditNode","useState","name","setName","hover","setHover","dispatch","save","node","addCustomPort","engine","repaintCanvas","confirm","title","icon","content","okText","cancelText","onOk","remove","submit","closeEdit","handleDeleteButton","e","value","stopPropagation","key","confirmDeletePort","handleRowClick","setSelected","selectTable","openEdit","minWidth","size","minHeight","getOptions","extras","top","right","paddingTop","Object","entries","getPorts","map","index","backgroundColor","type"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { useDispatch, useSelector } from 'react-redux';\n// import * as action from '../../actions/node';\nimport { DiagramEngine, PortWidget, PortModel } from '@projectstorm/react-diagrams';\nimport styled from '@emotion/styled';\nimport { TYPE } from '../../const';\nimport {\n  ExclamationCircleOutlined,\n  PlusOutlined,\n  EditOutlined,\n  KeyOutlined,\n  MoreOutlined,\n  DeleteOutlined,\n} from '@ant-design/icons';\nimport { Col, Modal, Input, Button, Typography, Row, Popover, AutoComplete, Select } from 'antd';\nconst { Text } = Typography;\nconst { Option } = Select;\nexport interface CustomNodeWidgetProps {\n  node: CustomNodeModel;\n  engine: DiagramEngine;\n  size?: number | undefined;\n}\n\n/**\n * @author Nguyen Tuan Quang\n */\nexport const Port = styled.div`\n  width: 20px;\n  height: 20px;\n  background: #f6f6f6;\n  cursor: pointer;\n  margin-top: 5px;\n\n  &:hover {\n    background: #deecf3;\n  }\n`;\n\nconst styles = {\n  cardHeader: {\n    color: 'white',\n    border: ' 0 solid #e2e8f0',\n    fontWeight: 400,\n    fontSize: '20px',\n    padding: '5px 20px',\n    height: '40px',\n    background: '#316896',\n    marginBottom: '-2px',\n  },\n  rightPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '380px',\n  },\n  leftPort: {\n    width: '20px',\n    height: '20px',\n    position: 'absolute',\n    left: '0',\n  },\n  fieldText: { fontSize: '20px' },\n};\nconst CustomNodeWidget: React.FC<CustomNodeWidgetProps> = (props) => {\n  // const { dispatch } = props;\n\n  const [editNode, setEditNode] = React.useState(false);\n  const [name, setName] = React.useState('');\n  const [hover, setHover] = React.useState('');\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n  const dispatch = useDispatch();\n  const save = () => {\n    props.node.addCustomPort('new_col', '', '');\n    props.engine.repaintCanvas();\n  };\n  const confirm = () => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete table',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        props.node.remove();\n        props.engine.repaintCanvas();\n      },\n    });\n  };\n  // const confirmDeletePort = (port: PortModel) => {\n  //   Modal.confirm({\n  //     title: 'Confirm',\n  //     icon: <ExclamationCircleOutlined />,\n  //     content: 'Confirm delete port',\n  //     okText: 'Yes',\n  //     cancelText: 'No',\n  //     onOk() {\n  //       props.node.removePort(port);\n  //       dispatch(action.setPorts(props.node.getPorts()));\n  //       props.engine.repaintCanvas();\n  //     },\n  //   });\n  // };\n  // const openEdit = () => {\n  //   setEditNode(true);\n  //   setName(props.node.getOptions().extras);\n  //   dispatch(action.setPorts(props.node.getPorts()));\n  // };\n  // const closeEdit = () => {\n  //   setEditNode(false);\n  //   setName('');\n  // };\n  // const handelChangeName = (e: any) => {\n  //   setName(e.target.value);\n  // };\n  // const handleChangePort = (e) => {\n  //   const { id, name, value } = e.target;\n\n  //   ports[name].getOptions().extras[id] = value;\n  //   // dispatch(action.setPorts({ ...ports }));\n  // };\n  const submit = () => {\n    props.node.setName(name);\n    closeEdit();\n  };\n  const handleDeleteButton = (e, value) => {\n    e.stopPropagation();\n    if (e.key === 'Delete') {\n      confirmDeletePort(value);\n    }\n  };\n  const handleRowClick = (e, key, value) => {\n    setHover(key);\n    // dispatch(action.setPort(value));\n    props.node.setSelected(false);\n  };\n  const selectTable = (e) => {\n    props.node.setSelected(false);\n    // dispatch(action.setSelectedNode(props.node));\n    // dispatch(action.setActive('table'));\n  };\n  const content = (\n    <Row>\n      <Button\n        type='ghost'\n        icon={<PlusOutlined style={{ color: 'green' }} />}\n        onClick={() => save()}\n      />\n      <Button\n        type='ghost'\n        icon={<EditOutlined style={{ color: 'cyan' }} />}\n        onClick={() => openEdit()}\n      />\n      <Button\n        type='ghost'\n        icon={<DeleteOutlined style={{ color: 'red' }} />}\n        onClick={() => confirm()}\n      />\n    </Row>\n  );\n\n  return (\n    <div>\n      {/* <Modal\n        visible={editNode}\n        onCancel={() => closeEdit()}\n        okText='Save'\n        cancelText='Cancel'\n        onOk={() => submit()}\n      >\n        Name:\n        <Input value={name} name='name' key='name' onChange={handelChangeName} />\n        Body:\n        {ports !== undefined\n          ? Object.entries(ports).map(([key, value], index: any) =>\n              value.getOptions().extras.key === 'PRIMARY KEY' ? (\n                <Row gutter={16} key={index}>\n                  <Col span='10'>\n                    <Input\n                      id='name'\n                      value={value.getOptions().extras.name}\n                      name={key}\n                      key={index}\n                      onChange={handleChangePort}\n                    />\n                  </Col>\n                  <Col span='8'>\n                    <AutoComplete\n                      style={{ width: 150 }}\n                      options={TYPE}\n                      filterOption={(inputValue, option) =>\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                      }\n                      value={value.getOptions().extras.type}\n                      onChange={(type) => {\n                        value.getOptions().extras.type = type;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                      onSelect={(type) => {\n                        value.getOptions().extras.type = type;\n\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    ></AutoComplete>\n                  </Col>\n                  <Col span='6'>\n                    <Select\n                      defaultValue={value.getOptions().extras.key}\n                      style={{ width: 120 }}\n                      onChange={(key) => {\n                        value.getOptions().extras.key = key;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    >\n                      <Option value=''>null</Option>\n                      <Option value='PRIMARY KEY'>PRIMARY KEY</Option>\n                    </Select>\n                  </Col>\n                </Row>\n              ) : (\n                ''\n              )\n            )\n          : ''}\n        <hr />\n        {ports !== undefined\n          ? Object.entries(ports).map(([key, value], index: any) =>\n              value.getOptions().extras.key !== 'PRIMARY KEY' ? (\n                <Row gutter={16} key={index} style={{ paddingTop: '5px' }}>\n                  <Col span='10'>\n                    <Input\n                      id='name'\n                      value={value.getOptions().extras.name}\n                      name={key}\n                      key={index}\n                      onChange={handleChangePort}\n                    />\n                  </Col>\n                  <Col span='8'>\n                    <AutoComplete\n                      style={{ width: 150 }}\n                      options={TYPE}\n                      filterOption={(inputValue, option) =>\n                        option.value.toUpperCase().indexOf(inputValue.toUpperCase()) !== -1\n                      }\n                      value={value.getOptions().extras.type}\n                      onChange={(type) => {\n                        value.getOptions().extras.type = type;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                      onSelect={(type) => {\n                        value.getOptions().extras.type = type;\n\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    ></AutoComplete>\n                  </Col>\n                  <Col span='6'>\n                    <Select\n                      defaultValue={value.getOptions().extras.key}\n                      style={{ width: 120 }}\n                      onChange={(key) => {\n                        value.getOptions().extras.key = key;\n                        // dispatch(action.setPorts({ ...ports }));\n                      }}\n                    >\n                      <Option value=''>null</Option>\n                      <Option value='PRIMARY KEY'>PRIMARY KEY</Option>\n                    </Select>\n                  </Col>\n                </Row>\n              ) : (\n                ''\n              )\n            )\n          : ''}\n      </Modal> */}\n      <div\n        className={'custom-node'}\n        style={{\n          position: 'relative',\n          minWidth: props.size * 4,\n          minHeight: props.size,\n        }}\n        onKeyDown={(e) => {\n          e.stopPropagation();\n          if (e.key === 'Delete') {\n            confirm();\n          }\n        }}\n        onClick={(e) => {\n          selectTable(e);\n        }}\n        tabIndex={-1}\n      >\n        <div style={styles.cardHeader}>\n          <p>{props.node.getOptions().extras}</p>\n        </div>\n        <div\n          style={{\n            background: '#F6F6F6',\n            padding: '20px',\n            border: 'none',\n          }}\n        >\n          <div style={{ position: 'absolute', top: '0', right: '0' }}>\n            <Popover placement='rightBottom' content={content} trigger='focus'>\n              <Button\n                type='ghost'\n                style={{ border: 'none' }}\n                icon={\n                  <MoreOutlined style={{ color: 'white', fontSize: '20px', paddingTop: '5px' }} />\n                }\n              />\n            </Popover>\n          </div>\n          {Object.entries(props.node.getPorts()).map(([key, value], index: any) =>\n            value.getOptions().extras.key === 'PRIMARY KEY' ? (\n              <Row\n                key={index}\n                onFocus={() => setHover(key)}\n                onBlur={() => setHover('')}\n                style={{\n                  backgroundColor: hover === key ? '#4770FF' : '',\n                  fontWeight: 'bold',\n                  fontSize: '20px',\n                }}\n              >\n                <PortWidget port={value} engine={props.engine} style={styles.leftPort}>\n                  <Port />\n                </PortWidget>\n                <PortWidget port={value} engine={props.engine} style={styles.rightPort}>\n                  <Port />\n                </PortWidget>\n                <Col span={10}>\n                  <Text>{value.getOptions().extras.name}</Text>\n                </Col>\n                <Col span={8}>\n                  <Text style={{ color: '#dbdd4d' }}>{value.getOptions().extras.type}</Text>\n                </Col>\n                <Col span={3}>\n                  <Text>PK</Text>\n                </Col>\n                <Col span={3}>\n                  <KeyOutlined style={{ color: 'yellow', fontSize: 20 }} />\n                </Col>\n              </Row>\n            ) : (\n              ''\n            )\n          )}\n          <hr />\n\n          {Object.entries(props.node.getPorts()).map(([key, value], index: any) =>\n            value.getOptions().extras.key !== 'PRIMARY KEY' ? (\n              <Row\n                key={index}\n                onClick={(e) => handleRowClick(e, key, value)}\n                onBlur={() => setHover('')}\n                style={{ backgroundColor: hover === key ? '#deecf3' : '' }}\n                onKeyDown={(e) => handleDeleteButton(e, value)}\n                tabIndex={-1}\n              >\n                <PortWidget port={value} engine={props.engine} style={styles.leftPort}>\n                  <Port />\n                </PortWidget>\n                <PortWidget port={value} engine={props.engine} style={styles.rightPort}>\n                  <Port />\n                </PortWidget>\n                <Col lg={10}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.name}</Text>\n                </Col>\n                <Col lg={8}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.type}</Text>\n                </Col>\n                <Col lg={3}>\n                  <Text style={styles.fieldText}>{value.getOptions().extras.key}</Text>\n                </Col>\n              </Row>\n            ) : (\n              ''\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default CustomNodeWidget;\n"]},"metadata":{},"sourceType":"module"}