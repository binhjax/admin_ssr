{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/layout/style\";\nimport _Layout from \"antd/lib/layout\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/tree/style\";\nimport _Tree from \"antd/lib/tree\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react'; // React.useLayoutEffect = React.useEffect;\n\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport PageHeaderLayout from '@/layouts/PageHeaderLayout';\nimport PButton from '@/components/PermButton';\nimport { formatDate } from '@/utils/utils';\nimport MenuCard from '../../components/Menu/MenuCard';\nimport WithDva from '../../utils/store';\nimport styles from './menu.less'; // @connect(({ menu, loading }) => ({\n//   menu,\n//   loading: loading.models.menu,\n// }))\n\nvar MenuList = (_dec = Form.create(), _dec(_class = (_temp = /*#__PURE__*/function (_PureComponent) {\n  _inherits(MenuList, _PureComponent);\n\n  var _super = _createSuper(MenuList);\n\n  function MenuList() {\n    var _this;\n\n    _classCallCheck(this, MenuList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      selectedRowKeys: [],\n      selectedRows: [],\n      treeSelectedKeys: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemDisableClick\", function (item) {\n      _this.dispatch({\n        type: 'menu/changeStatus',\n        payload: {\n          id: item.id,\n          status: 2\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemEnableClick\", function (item) {\n      _this.dispatch({\n        type: 'menu/changeStatus',\n        payload: {\n          id: item.id,\n          status: 1\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleEditClick\", function () {\n      var selectedRows = _this.state.selectedRows;\n\n      if (selectedRows.length === 0) {\n        return;\n      }\n\n      var item = selectedRows[0];\n\n      _this.dispatch({\n        type: 'menu/loadForm',\n        payload: {\n          type: 'E',\n          id: item.id\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleAddClick\", function () {\n      _this.dispatch({\n        type: 'menu/loadForm',\n        payload: {\n          type: 'A'\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleDelClick\", function () {\n      var selectedRows = _this.state.selectedRows;\n\n      if (selectedRows.length === 0) {\n        return;\n      }\n\n      var item = selectedRows[0];\n\n      _Modal.confirm({\n        title: \"Confirm to delete\\u3010menu data: \".concat(item.name, \"\\u3011\\uFF1F\"),\n        okText: 'confirm',\n        okType: 'danger',\n        cancelText: 'cancel',\n        onOk: _this.handleDelOKClick.bind(_assertThisInitialized(_this), item.id)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableSelectRow\", function (record, selected) {\n      var keys = [];\n      var rows = [];\n\n      if (selected) {\n        keys.push(record.id);\n        rows.push(record);\n      }\n\n      _this.setState({\n        selectedRowKeys: keys,\n        selectedRows: rows\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTableChange\", function (pagination) {\n      _this.dispatch({\n        type: 'menu/fetch',\n        pagination: {\n          current: pagination.current,\n          pageSize: pagination.pageSize\n        }\n      });\n\n      _this.clearSelectRows();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetFormClick\", function () {\n      var form = _this.props.form;\n      form.resetFields();\n\n      _this.dispatch({\n        type: 'menu/fetch',\n        search: {\n          parent_id: _this.getParentID()\n        },\n        pagination: {}\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchFormSubmit\", function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      var form = _this.props.form;\n      form.validateFields(function (err, values) {\n        if (err) {\n          return;\n        }\n\n        _this.dispatch({\n          type: 'menu/fetch',\n          search: _objectSpread(_objectSpread({}, values), {}, {\n            parent_id: _this.getParentID()\n          }),\n          pagination: {}\n        });\n\n        _this.clearSelectRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFormSubmit\", function (data) {\n      _this.dispatch({\n        type: 'menu/submit',\n        payload: data\n      });\n\n      _this.clearSelectRows();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleFormCancel\", function () {\n      _this.dispatch({\n        type: 'menu/changeFormVisible',\n        payload: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearSelectRows\", function () {\n      var selectedRowKeys = _this.state.selectedRowKeys;\n\n      if (selectedRowKeys.length === 0) {\n        return;\n      }\n\n      _this.setState({\n        selectedRowKeys: [],\n        selectedRows: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispatch\", function (action) {\n      var dispatch = _this.props.dispatch;\n      dispatch(action);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getParentID\", function () {\n      var treeSelectedKeys = _this.state.treeSelectedKeys;\n      var parentID = '';\n\n      if (treeSelectedKeys.length > 0) {\n        var _treeSelectedKeys = _slicedToArray(treeSelectedKeys, 1);\n\n        parentID = _treeSelectedKeys[0];\n      }\n\n      return parentID;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"renderTreeNodes\", function (data) {\n      return data.map(function (item) {\n        if (item.children) {\n          return __jsx(_Tree.TreeNode, {\n            title: item.name,\n            key: item.id,\n            dataRef: item\n          }, _this.renderTreeNodes(item.children));\n        }\n\n        return __jsx(_Tree.TreeNode, {\n          title: item.name,\n          key: item.id,\n          dataRef: item\n        });\n      });\n    });\n\n    return _this;\n  }\n\n  _createClass(MenuList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dispatch({\n        type: 'menu/fetchTree'\n      });\n      this.dispatch({\n        type: 'menu/fetch',\n        search: {},\n        pagination: {}\n      });\n    }\n  }, {\n    key: \"handleDelOKClick\",\n    value: function handleDelOKClick(id) {\n      this.dispatch({\n        type: 'menu/del',\n        payload: {\n          id: id\n        }\n      });\n      this.clearSelectRows();\n    }\n  }, {\n    key: \"renderDataForm\",\n    value: function renderDataForm() {\n      return __jsx(MenuCard, {\n        onCancel: this.handleFormCancel,\n        onSubmit: this.handleFormSubmit\n      });\n    }\n  }, {\n    key: \"renderSearchForm\",\n    value: function renderSearchForm() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return __jsx(Form, {\n        onSubmit: this.onSearchFormSubmit\n      }, __jsx(_Row, {\n        gutter: 16\n      }, __jsx(_Col, {\n        span: 8\n      }, __jsx(Form.Item, null, getFieldDecorator('queryValue')(__jsx(_Input, {\n        placeholder: \"Please enter keyword\"\n      })))), __jsx(_Col, {\n        span: 8\n      }, __jsx(\"div\", {\n        style: {\n          overflow: 'hidden',\n          paddingTop: 4\n        }\n      }, __jsx(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\"\n      }, \"Searcn\"), __jsx(_Button, {\n        style: {\n          marginLeft: 8\n        },\n        onClick: this.onResetFormClick\n      }, \"Reset\")))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          _this$props$menu = _this$props.menu,\n          _this$props$menu$data = _this$props$menu.data,\n          list = _this$props$menu$data.list,\n          pagination = _this$props$menu$data.pagination,\n          treeData = _this$props$menu.treeData,\n          expandedKeys = _this$props$menu.expandedKeys;\n      var _this$state = this.state,\n          selectedRowKeys = _this$state.selectedRowKeys,\n          selectedRows = _this$state.selectedRows;\n      var columns = [{\n        title: 'Menu Name',\n        dataIndex: 'name',\n        width: 130,\n        render: function render(val, row) {\n          if (row.show_status !== 1) {\n            return __jsx(_Badge, {\n              status: \"default\",\n              text: val\n            });\n          }\n\n          return __jsx(\"span\", null, val);\n        }\n      }, {\n        title: 'Sort Value',\n        dataIndex: 'sequence',\n        width: 100\n      }, {\n        title: 'Menu Icon',\n        dataIndex: 'icon',\n        width: 100\n      }, {\n        title: 'Access Routing',\n        dataIndex: 'router',\n        width: 150\n      }, {\n        title: 'Status',\n        dataIndex: 'status',\n        width: 80,\n        render: function render(val) {\n          if (val === 1) {\n            return __jsx(_Badge, {\n              status: \"success\",\n              text: \"Enable\"\n            });\n          }\n\n          return __jsx(_Badge, {\n            status: \"error\",\n            text: \"Deactivate\"\n          });\n        }\n      }, {\n        title: 'Created Time',\n        width: 150,\n        dataIndex: 'created_at',\n        render: function render(val) {\n          return __jsx(\"span\", null, formatDate(val, 'YYYY-MM-DD'));\n        }\n      }, {\n        title: 'Remarks',\n        dataIndex: 'memo'\n      }];\n\n      var paginationProps = _objectSpread({\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: function showTotal(total) {\n          return __jsx(\"span\", null, \"Total \", total, \" pages\");\n        }\n      }, pagination);\n\n      var breadcrumbList = [{\n        title: 'Teko Landing Admin'\n      }, {\n        title: 'Menu management',\n        href: '/system/menu'\n      }];\n      return __jsx(PageHeaderLayout, {\n        title: \"Menu management\",\n        breadcrumbList: breadcrumbList\n      }, __jsx(_Layout, null, __jsx(_Layout.Sider, {\n        width: 180,\n        style: {\n          background: '#fff',\n          borderRight: '1px solid lightGray',\n          padding: 15,\n          overflow: 'auto'\n        }\n      }, __jsx(_Tree, {\n        expandedKeys: expandedKeys,\n        onSelect: function onSelect(keys) {\n          _this2.setState({\n            treeSelectedKeys: keys\n          });\n\n          var search = _this2.props.menu.search;\n          var item = {\n            parentID: undefined\n          };\n\n          if (keys.length > 0) {\n            var _keys = _slicedToArray(keys, 1);\n\n            item.parentID = _keys[0];\n          }\n\n          _this2.dispatch({\n            type: 'menu/fetch',\n            search: _objectSpread(_objectSpread({}, search), item),\n            pagination: {}\n          });\n        },\n        onExpand: function onExpand(keys) {\n          _this2.dispatch({\n            type: 'menu/saveExpandedKeys',\n            payload: keys\n          });\n        }\n      }, this.renderTreeNodes(treeData))), __jsx(_Layout.Content, null, __jsx(_Card, {\n        bordered: false\n      }, __jsx(\"div\", {\n        className: styles.tableList\n      }, __jsx(\"div\", {\n        className: styles.tableListForm\n      }, this.renderSearchForm()), __jsx(\"div\", {\n        className: styles.tableListOperator\n      }, __jsx(PButton, {\n        code: \"add\",\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this2.handleAddClick();\n        }\n      }, \"New\"), selectedRowKeys.length === 1 && [__jsx(PButton, {\n        key: \"edit\",\n        code: \"edit\",\n        onClick: function onClick() {\n          return _this2.handleEditClick();\n        }\n      }, \"Edit\"), __jsx(PButton, {\n        key: \"del\",\n        code: \"del\",\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.handleDelClick();\n        }\n      }, \"Delete\"), selectedRows[0].status === 2 && __jsx(PButton, {\n        key: \"enable\",\n        code: \"enable\",\n        onClick: function onClick() {\n          return _this2.onItemEnableClick(selectedRows[0]);\n        }\n      }, \"Enable\"), selectedRows[0].status === 1 && __jsx(PButton, {\n        key: \"disable\",\n        code: \"disable\",\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.onItemDisableClick(selectedRows[0]);\n        }\n      }, \"Disable\")]), __jsx(_Table, {\n        rowSelection: {\n          selectedRowKeys: selectedRowKeys,\n          onSelect: this.handleTableSelectRow\n        },\n        loading: loading,\n        rowKey: function rowKey(record) {\n          return record.id;\n        },\n        dataSource: list,\n        columns: columns,\n        pagination: paginationProps,\n        onChange: this.onTableChange,\n        size: \"small\"\n      }))))), this.renderDataForm());\n    }\n  }]);\n\n  return MenuList;\n}(PureComponent), _temp)) || _class);\nexport default WithDva(function (_ref) {\n  var menu = _ref.menu,\n      loading = _ref.loading;\n  return {\n    menu: menu,\n    loading: loading.models.menu\n  };\n})(MenuList); // export default MenuList;","map":null,"metadata":{},"sourceType":"module"}