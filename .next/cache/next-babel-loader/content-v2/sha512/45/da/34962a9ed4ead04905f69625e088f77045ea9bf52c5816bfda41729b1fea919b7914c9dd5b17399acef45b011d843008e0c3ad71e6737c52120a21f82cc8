{"ast":null,"code":"import \"antd/lib/breadcrumb/style\";\nimport _Breadcrumb from \"antd/lib/breadcrumb\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent, createElement } from 'react';\nimport pathToRegexp from 'path-to-regexp';\nimport styles from './index.less';\nimport { urlToList } from '../../components/_utils/pathTools';\nexport var getBreadcrumb = function getBreadcrumb(breadcrumbNameMap, url) {\n  var breadcrumb = breadcrumbNameMap[url];\n\n  if (!breadcrumb) {\n    Object.keys(breadcrumbNameMap).forEach(function (item) {\n      if (pathToRegexp(item).test(url)) {\n        breadcrumb = breadcrumbNameMap[item];\n      }\n    });\n  }\n\n  return breadcrumb || {};\n};\n\nvar BreadcrumbView = /*#__PURE__*/function (_PureComponent) {\n  _inherits(BreadcrumbView, _PureComponent);\n\n  var _super = _createSuper(BreadcrumbView);\n\n  function BreadcrumbView() {\n    var _this;\n\n    _classCallCheck(this, BreadcrumbView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      breadcrumb: null\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBreadcrumbDom\", function () {\n      var breadcrumb = _this.conversionBreadcrumbList();\n\n      _this.setState({\n        breadcrumb: breadcrumb\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getBreadcrumbProps\", function () {\n      var _this$props = _this.props,\n          routes = _this$props.routes,\n          params = _this$props.params,\n          location = _this$props.location,\n          breadcrumbNameMap = _this$props.breadcrumbNameMap;\n      return {\n        routes: routes,\n        params: params,\n        routerLocation: location,\n        breadcrumbNameMap: breadcrumbNameMap\n      };\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"conversionFromProps\", function () {\n      var _this$props2 = _this.props,\n          breadcrumbList = _this$props2.breadcrumbList,\n          breadcrumbSeparator = _this$props2.breadcrumbSeparator,\n          itemRender = _this$props2.itemRender,\n          _this$props2$linkElem = _this$props2.linkElement,\n          linkElement = _this$props2$linkElem === void 0 ? 'a' : _this$props2$linkElem;\n      return __jsx(_Breadcrumb, {\n        className: styles.breadcrumb,\n        separator: breadcrumbSeparator\n      }, breadcrumbList.map(function (item) {\n        var title = itemRender ? itemRender(item) : item.title;\n        return __jsx(_Breadcrumb.Item, {\n          key: item.title\n        }, item.href ? /*#__PURE__*/createElement(linkElement, _defineProperty({}, linkElement === 'a' ? 'href' : 'to', item.href), title) : title);\n      }));\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"conversionFromLocation\", function (routerLocation, breadcrumbNameMap) {\n      var _this$props3 = _this.props,\n          breadcrumbSeparator = _this$props3.breadcrumbSeparator,\n          home = _this$props3.home,\n          itemRender = _this$props3.itemRender,\n          _this$props3$linkElem = _this$props3.linkElement,\n          linkElement = _this$props3$linkElem === void 0 ? 'a' : _this$props3$linkElem; // Convert the url to an array\n\n      var pathSnippets = urlToList(routerLocation.pathname); // Loop data mosaic routing\n\n      var extraBreadcrumbItems = pathSnippets.map(function (url, index) {\n        var currentBreadcrumb = getBreadcrumb(breadcrumbNameMap, url);\n\n        if (currentBreadcrumb.inherited) {\n          return null;\n        }\n\n        var isLinkable = index !== pathSnippets.length - 1 && currentBreadcrumb.component;\n        var name = itemRender ? itemRender(currentBreadcrumb) : currentBreadcrumb.name;\n        return currentBreadcrumb.name && !currentBreadcrumb.hideInBreadcrumb ? __jsx(_Breadcrumb.Item, {\n          key: url\n        }, /*#__PURE__*/createElement(isLinkable ? linkElement : 'span', _defineProperty({}, linkElement === 'a' ? 'href' : 'to', url), name)) : null;\n      }); // Add home breadcrumbs to your head\n\n      extraBreadcrumbItems.unshift(__jsx(_Breadcrumb.Item, {\n        key: \"home\"\n      }, /*#__PURE__*/createElement(linkElement, _defineProperty({}, linkElement === 'a' ? 'href' : 'to', '/'), home || 'Home')));\n      return __jsx(_Breadcrumb, {\n        className: styles.breadcrumb,\n        separator: breadcrumbSeparator\n      }, extraBreadcrumbItems);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"conversionBreadcrumbList\", function () {\n      var _this$props4 = _this.props,\n          breadcrumbList = _this$props4.breadcrumbList,\n          breadcrumbSeparator = _this$props4.breadcrumbSeparator;\n\n      var _this$getBreadcrumbPr = _this.getBreadcrumbProps(),\n          routes = _this$getBreadcrumbPr.routes,\n          params = _this$getBreadcrumbPr.params,\n          routerLocation = _this$getBreadcrumbPr.routerLocation,\n          breadcrumbNameMap = _this$getBreadcrumbPr.breadcrumbNameMap;\n\n      if (breadcrumbList && breadcrumbList.length) {\n        return _this.conversionFromProps();\n      } // 如果传入 routes 和 params 属性\n      // If pass routes and params attributes\n\n\n      if (routes && params) {\n        return __jsx(_Breadcrumb, {\n          className: styles.breadcrumb,\n          routes: routes.filter(function (route) {\n            return route.breadcrumbName;\n          }),\n          params: params,\n          itemRender: _this.itemRender,\n          separator: breadcrumbSeparator\n        });\n      } // 根据 location 生成 面包屑\n      // Generate breadcrumbs based on location\n\n\n      if (routerLocation && routerLocation.pathname) {\n        return _this.conversionFromLocation(routerLocation, breadcrumbNameMap);\n      }\n\n      return null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"itemRender\", function (route, params, routes, paths) {\n      var _this$props$linkEleme = _this.props.linkElement,\n          linkElement = _this$props$linkEleme === void 0 ? 'a' : _this$props$linkEleme;\n      var last = routes.indexOf(route) === routes.length - 1;\n      return last || !route.component ? __jsx(\"span\", null, route.breadcrumbName) : /*#__PURE__*/createElement(linkElement, {\n        href: paths.join('/') || '/',\n        to: paths.join('/') || '/'\n      }, route.breadcrumbName);\n    });\n\n    return _this;\n  }\n\n  _createClass(BreadcrumbView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getBreadcrumbDom();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(preProps) {\n      var location = this.props.location;\n\n      if (!location || !preProps.location) {\n        return;\n      }\n\n      var prePathname = preProps.location.pathname;\n\n      if (prePathname !== location.pathname) {\n        this.getBreadcrumbDom();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var breadcrumb = this.state.breadcrumb;\n      return breadcrumb;\n    }\n  }]);\n\n  return BreadcrumbView;\n}(PureComponent);\n\nexport { BreadcrumbView as default };","map":null,"metadata":{},"sourceType":"module"}