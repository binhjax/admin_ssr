{"ast":null,"code":"import \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from 'axios';\nimport moment from 'moment';\nimport { history } from 'next/link';\nimport { stringify, parse } from 'qs';\nimport { useRouter } from 'next/router';\nimport store, { storeKeys } from './persistent-store';\nvar refreshTimeout;\nvar lastAccessTime;\nexport var baseURL = '/api';\nexport var contentType = {\n  form: 'application/x-www-form-urlencoded',\n  json: 'application/json'\n};\nexport var headerKeys = {\n  ContentType: 'Content-Type',\n  Authorization: 'Authorization'\n};\nexport var methods = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  DELETE: 'DELETE',\n  PATCH: 'PATCH',\n  HEAD: 'HEAD',\n  OPTIONS: 'OPTIONS'\n}; // 获取访问令牌\n\nexport function getAccessToken() {\n  var token = store.get(storeKeys.AccessToken);\n\n  if (!token) {\n    return '';\n  }\n\n  return token.access_token;\n  return \"\";\n} // 包装带有令牌的URL\n\nexport function wrapURLWithToken(url) {\n  var ss = url.split('?');\n  var query = parse(ss[1]);\n  query.accessToken = getAccessToken();\n  return \"\".concat(ss[0], \"?\").concat(stringify(query));\n} // 登出\n\nexport function logout() {\n  _s();\n\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  }\n\n  store.remove(storeKeys.AccessToken);\n\n  var _parse = parse(window.location.href.split('?')[1]),\n      redirect = _parse.redirect;\n\n  if (window.location.pathname !== '/user/login' && !redirect) {\n    var router = useRouter();\n    var search = JSON.stringify({\n      redirect: window.location.href\n    });\n    router.push('/user/login', search, {\n      shallow: true\n    }); // history.replace({\n    //   pathname: '/user/login',\n    //   search: stringify({\n    //     redirect: window.location.href,\n    //   }),\n    // });\n  }\n} // request 拦截器\n\n_s(logout, \"fN7XvhJ+p5oE6+Xlo0NJmXpxjC8=\", false, function () {\n  return [useRouter];\n});\n\nfunction requestInterceptors(c) {\n  var config = _objectSpread({}, c);\n\n  var token = store.get(storeKeys.AccessToken);\n\n  if (token) {\n    config.headers[headerKeys.Authorization] = \"\".concat(token.token_type, \" \").concat(token.access_token);\n  }\n\n  return config;\n} // ajax请求\n\n\nexport default function request(url) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var oldToken = store.get(storeKeys.AccessToken);\n\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n    if (refreshTimeout) {\n      clearTimeout(refreshTimeout);\n    }\n\n    logout(); // eslint-disable-next-line compat/compat\n\n    return Promise.reject(new Error('The token has expired'));\n  }\n\n  lastAccessTime = moment().unix();\n\n  var opts = _objectSpread({}, options);\n\n  var showNotify = true;\n\n  if (opts.hideNotify) {\n    showNotify = false;\n    delete opts.hideNotify;\n  }\n\n  var config = _objectSpread({\n    method: methods.GET,\n    baseURL: baseURL,\n    headers: {},\n    transformRequest: function transformRequest(data, headers) {\n      switch (headers[headerKeys.ContentType]) {\n        case contentType.json:\n          return JSON.stringify(data);\n\n        case contentType.form:\n          return stringify(data);\n\n        default:\n          return data;\n      }\n    },\n    paramsSerializer: function paramsSerializer(params) {\n      return stringify(params);\n    },\n    timeout: 60000\n  }, opts);\n\n  if (!(config.headers && config.headers[headerKeys.ContentType]) && [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1) {\n    config.headers[headerKeys.ContentType] = contentType.json;\n  }\n\n  var instance = axios.create(config);\n  instance.interceptors.request.use(requestInterceptors);\n  return instance.request({\n    url: url\n  }).then(function (res) {\n    var data = res.data;\n    return data;\n  }).catch(function (error) {\n    var response = error.response;\n    var status = response.status,\n        data = response.data;\n\n    if (status === 401 && data.error && data.error.code === 9999) {\n      logout();\n      return response;\n    }\n\n    if (showNotify) {\n      var msg = '请求发生错误';\n\n      if (status === 504) {\n        msg = '未连接到服务器';\n      } else if (data && data.error) {\n        msg = data.error.message;\n      }\n\n      _notification.error({\n        message: \"\".concat(config.baseURL).concat(url),\n        description: msg\n      });\n    }\n\n    return response;\n  });\n} // 放入访问令牌\n\nexport function setToken(token) {\n  lastAccessTime = token.expires_at;\n  store.set(storeKeys.AccessToken, token);\n\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  } // 提前10分钟更新令牌\n\n\n  var timeout = token.expires_at - moment().unix() - 10;\n\n  if (timeout > 0) {\n    refreshTimeout = setTimeout(function () {\n      var oldToken = store.get(storeKeys.AccessToken);\n\n      if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n        if (refreshTimeout) {\n          clearTimeout(refreshTimeout);\n        }\n\n        return;\n      }\n\n      request('/v1/pub/refresh-token', {\n        method: methods.POST\n      }).then(function (res) {\n        setToken(res);\n      });\n    }, timeout * 1000);\n  }\n}","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/utils/request.js"],"names":["axios","moment","history","stringify","parse","useRouter","store","storeKeys","refreshTimeout","lastAccessTime","baseURL","contentType","form","json","headerKeys","ContentType","Authorization","methods","GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS","getAccessToken","token","get","AccessToken","access_token","wrapURLWithToken","url","ss","split","query","accessToken","logout","clearTimeout","remove","window","location","href","redirect","pathname","router","search","JSON","push","shallow","requestInterceptors","c","config","headers","token_type","request","options","oldToken","expires_at","Promise","reject","Error","unix","opts","showNotify","hideNotify","method","transformRequest","data","paramsSerializer","params","timeout","indexOf","instance","create","interceptors","use","then","res","catch","error","response","status","code","msg","message","description","setToken","set","setTimeout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport moment from 'moment';\r\nimport { history } from 'next/link';\r\nimport { stringify, parse } from 'qs';\r\nimport { notification } from 'antd';\r\n\r\nimport { useRouter } from 'next/router'\r\n\r\n\r\nimport store, { storeKeys } from './persistent-store';\r\n\r\nlet refreshTimeout;\r\nlet lastAccessTime;\r\n\r\nexport const baseURL = '/api';\r\n\r\nexport const contentType = {\r\n  form: 'application/x-www-form-urlencoded',\r\n  json: 'application/json',\r\n};\r\n\r\nexport const headerKeys = {\r\n  ContentType: 'Content-Type',\r\n  Authorization: 'Authorization',\r\n};\r\n\r\nexport const methods = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n};\r\n\r\n// 获取访问令牌\r\nexport function getAccessToken() {\r\n  const token = store.get(storeKeys.AccessToken);\r\n  if (!token) {\r\n    return '';\r\n  }\r\n  return token.access_token;\r\n  return \"\";\r\n}\r\n\r\n// 包装带有令牌的URL\r\nexport function wrapURLWithToken(url) {\r\n  const ss = url.split('?');\r\n  const query = parse(ss[1]);\r\n  query.accessToken = getAccessToken();\r\n  return `${ss[0]}?${stringify(query)}`;\r\n}\r\n\r\n// 登出\r\nexport function logout() {\r\n  if (refreshTimeout) {\r\n    clearTimeout(refreshTimeout);\r\n  }\r\n\r\n  store.remove(storeKeys.AccessToken);\r\n  const { redirect } = parse(window.location.href.split('?')[1]);\r\n  if (window.location.pathname !== '/user/login' && !redirect) {\r\n    const router = useRouter()\r\n    let search = JSON.stringify({\r\n      redirect: window.location.href,\r\n    });\r\n    router.push('/user/login', search, { shallow: true })\r\n    // history.replace({\r\n    //   pathname: '/user/login',\r\n    //   search: stringify({\r\n    //     redirect: window.location.href,\r\n    //   }),\r\n    // });\r\n  }\r\n}\r\n\r\n// request 拦截器\r\nfunction requestInterceptors(c) {\r\n  const config = { ...c };\r\n  const token = store.get(storeKeys.AccessToken);\r\n  if (token) {\r\n    config.headers[headerKeys.Authorization] = `${token.token_type} ${token.access_token}`;\r\n  }\r\n  return config;\r\n}\r\n\r\n// ajax请求\r\nexport default function request(url, options = {}) {\r\n  const oldToken = store.get(storeKeys.AccessToken);\r\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\r\n    if (refreshTimeout) {\r\n      clearTimeout(refreshTimeout);\r\n    }\r\n    logout();\r\n    // eslint-disable-next-line compat/compat\r\n    return Promise.reject(new Error('The token has expired'));\r\n  }\r\n  lastAccessTime = moment().unix();\r\n\r\n  const opts = { ...options };\r\n  let showNotify = true;\r\n  if (opts.hideNotify) {\r\n    showNotify = false;\r\n    delete opts.hideNotify;\r\n  }\r\n\r\n  const config = {\r\n    method: methods.GET,\r\n    baseURL,\r\n    headers: {},\r\n    transformRequest: (data, headers) => {\r\n      switch (headers[headerKeys.ContentType]) {\r\n        case contentType.json:\r\n          return JSON.stringify(data);\r\n        case contentType.form:\r\n          return stringify(data);\r\n        default:\r\n          return data;\r\n      }\r\n    },\r\n    paramsSerializer: params => {\r\n      return stringify(params);\r\n    },\r\n    timeout: 60000,\r\n    ...opts,\r\n  };\r\n\r\n  if (\r\n    !(config.headers && config.headers[headerKeys.ContentType]) &&\r\n    [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1\r\n  ) {\r\n    config.headers[headerKeys.ContentType] = contentType.json;\r\n  }\r\n\r\n  const instance = axios.create(config);\r\n  instance.interceptors.request.use(requestInterceptors);\r\n\r\n  return instance\r\n    .request({ url })\r\n    .then(res => {\r\n      const { data } = res;\r\n      return data;\r\n    })\r\n    .catch(error => {\r\n      const { response } = error;\r\n      const { status, data } = response;\r\n\r\n      if (status === 401 && data.error && data.error.code === 9999) {\r\n        logout();\r\n        return response;\r\n      }\r\n\r\n      if (showNotify) {\r\n        let msg = '请求发生错误';\r\n        if (status === 504) {\r\n          msg = '未连接到服务器';\r\n        } else if (data && data.error) {\r\n          msg = data.error.message;\r\n        }\r\n\r\n        notification.error({\r\n          message: `${config.baseURL}${url}`,\r\n          description: msg,\r\n        });\r\n      }\r\n      return response;\r\n    });\r\n}\r\n\r\n// 放入访问令牌\r\nexport function setToken(token) {\r\n  lastAccessTime = token.expires_at;\r\n  store.set(storeKeys.AccessToken, token);\r\n  if (refreshTimeout) {\r\n    clearTimeout(refreshTimeout);\r\n  }\r\n\r\n  // 提前10分钟更新令牌\r\n  const timeout = token.expires_at - moment().unix() - 10;\r\n  if (timeout > 0) {\r\n    refreshTimeout = setTimeout(() => {\r\n      const oldToken = store.get(storeKeys.AccessToken);\r\n      if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\r\n        if (refreshTimeout) {\r\n          clearTimeout(refreshTimeout);\r\n        }\r\n        return;\r\n      }\r\n\r\n      request('/v1/pub/refresh-token', {\r\n        method: methods.POST,\r\n      }).then(res => {\r\n        setToken(res);\r\n      });\r\n    }, timeout * 1000);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}