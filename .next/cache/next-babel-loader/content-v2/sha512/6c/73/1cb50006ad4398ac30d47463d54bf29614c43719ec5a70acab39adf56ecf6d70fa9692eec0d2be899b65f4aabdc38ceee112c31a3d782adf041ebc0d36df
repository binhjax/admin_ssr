{"ast":null,"code":"import \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nimport \"antd/lib/badge/style\";\nimport _Badge from \"antd/lib/badge\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _classCallCheck from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/Volumes/ExternalData/Work/vnshop/admin/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport PButton from '@/components/PermButton';\nimport PageHeaderLayout from '../../layouts/PageHeaderLayout';\nimport UserCard from '../../components/User/UserCard';\nimport RoleSelect from '../../components/User/RoleSelect';\nimport { formatDate } from '../../utils/utils';\nimport WithDva from '../../utils/store';\nimport styles from './user.less'; // @connect(state => ({\n//   loading: state.loading.models.user,\n//   user: state.user,\n// }))\n\nvar UserList = (_dec = Form.create(), _dec(_class = (_temp = /*#__PURE__*/function (_PureComponent) {\n  _inherits(UserList, _PureComponent);\n\n  var _super = _createSuper(UserList);\n\n  function UserList() {\n    var _this;\n\n    _classCallCheck(this, UserList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      selectedRowKeys: [],\n      selectedRows: []\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemDisableClick\", function (item) {\n      _this.dispatch({\n        type: 'user/changeStatus',\n        payload: {\n          id: item.id,\n          status: 2\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemEnableClick\", function (item) {\n      _this.dispatch({\n        type: 'user/changeStatus',\n        payload: {\n          id: item.id,\n          status: 1\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemEditClick\", function (item) {\n      _this.dispatch({\n        type: 'user/loadForm',\n        payload: {\n          type: 'E',\n          id: item.id\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onAddClick\", function () {\n      _this.dispatch({\n        type: 'user/loadForm',\n        payload: {\n          type: 'A'\n        }\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"clearSelectRows\", function () {\n      var selectedRowKeys = _this.state.selectedRowKeys;\n\n      if (selectedRowKeys.length === 0) {\n        return;\n      }\n\n      _this.setState({\n        selectedRowKeys: [],\n        selectedRows: []\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onItemDelClick\", function (item) {\n      _Modal.confirm({\n        title: \"Fuzzy query confirm delete [user data: \".concat(item.user_name, \"\\u3011\\uFF1F\"),\n        okText: 'Confirm',\n        okType: 'danger',\n        cancelText: 'Cancel',\n        onOk: _this.onDelOKClick.bind(_assertThisInitialized(_this), item.id)\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"handleTableSelectRow\", function (record, selected) {\n      var keys = [];\n      var rows = [];\n\n      if (selected) {\n        keys.push(record.id);\n        rows.push(record);\n      }\n\n      _this.setState({\n        selectedRowKeys: keys,\n        selectedRows: rows\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTableChange\", function (pagination) {\n      _this.dispatch({\n        type: 'user/fetch',\n        pagination: {\n          current: pagination.current,\n          pageSize: pagination.pageSize\n        }\n      });\n\n      _this.clearSelectRows();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onResetFormClick\", function () {\n      var form = _this.props.form;\n      form.resetFields();\n\n      _this.dispatch({\n        type: 'user/fetch',\n        search: {},\n        pagination: {}\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchFormSubmit\", function (e) {\n      if (e) {\n        e.preventDefault();\n      }\n\n      var form = _this.props.form;\n      form.validateFields({\n        force: true\n      }, function (err, values) {\n        if (err) {\n          return;\n        }\n\n        var formData = _objectSpread({}, values);\n\n        if (formData.roleIDs) {\n          formData.roleIDs = formData.roleIDs.map(function (v) {\n            return v.role_id;\n          }).join(',');\n        }\n\n        _this.dispatch({\n          type: 'user/fetch',\n          search: formData,\n          pagination: {}\n        });\n\n        _this.clearSelectRows();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDataFormSubmit\", function (data) {\n      _this.dispatch({\n        type: 'user/submit',\n        payload: data\n      });\n\n      _this.clearSelectRows();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDataFormCancel\", function () {\n      _this.dispatch({\n        type: 'user/changeFormVisible',\n        payload: false\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"dispatch\", function (action) {\n      var dispatch = _this.props.dispatch;\n      dispatch(action);\n    });\n\n    return _this;\n  }\n\n  _createClass(UserList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.dispatch({\n        type: 'user/fetch',\n        search: {},\n        pagination: {}\n      });\n    }\n  }, {\n    key: \"onDelOKClick\",\n    value: function onDelOKClick(id) {\n      this.dispatch({\n        type: 'user/del',\n        payload: {\n          id: id\n        }\n      });\n      this.clearSelectRows();\n    }\n  }, {\n    key: \"renderDataForm\",\n    value: function renderDataForm() {\n      return __jsx(UserCard, {\n        onCancel: this.onDataFormCancel,\n        onSubmit: this.onDataFormSubmit\n      });\n    }\n  }, {\n    key: \"renderSearchForm\",\n    value: function renderSearchForm() {\n      var getFieldDecorator = this.props.form.getFieldDecorator;\n      return __jsx(Form, {\n        onSubmit: this.onSearchFormSubmit\n      }, __jsx(_Row, {\n        gutter: 16\n      }, __jsx(_Col, {\n        span: 8\n      }, __jsx(Form.Item, {\n        label: \"Fuzzy query\"\n      }, getFieldDecorator('queryValue')(__jsx(_Input, {\n        placeholder: \"Please enter the content to be queried\"\n      })))), __jsx(_Col, {\n        span: 8\n      }, __jsx(Form.Item, {\n        label: \"User Role\"\n      }, getFieldDecorator('roleIDs')(__jsx(RoleSelect, null)))), __jsx(_Col, {\n        span: 8\n      }, __jsx(\"div\", {\n        style: {\n          overflow: 'hidden',\n          paddingTop: 4\n        }\n      }, __jsx(_Button, {\n        type: \"primary\",\n        htmlType: \"submit\"\n      }, \"\\u67E5\\u8BE2\"), __jsx(_Button, {\n        style: {\n          marginLeft: 8\n        },\n        onClick: this.onResetFormClick\n      }, \"\\u91CD\\u7F6E\")))));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          loading = _this$props.loading,\n          _this$props$user$data = _this$props.user.data,\n          list = _this$props$user$data.list,\n          pagination = _this$props$user$data.pagination;\n      var _this$state = this.state,\n          selectedRows = _this$state.selectedRows,\n          selectedRowKeys = _this$state.selectedRowKeys;\n      var columns = [{\n        title: 'Username',\n        dataIndex: 'user_name'\n      }, {\n        title: 'Realname',\n        dataIndex: 'real_name'\n      }, {\n        title: 'Roles',\n        dataIndex: 'roles',\n        render: function render(val) {\n          if (!val || val.length === 0) {\n            return __jsx(\"span\", null, \"-\");\n          }\n\n          var names = [];\n\n          for (var i = 0; i < val.length; i += 1) {\n            names.push(val[i].name);\n          }\n\n          return __jsx(\"span\", null, names.join(' | '));\n        }\n      }, {\n        title: 'User Status',\n        dataIndex: 'status',\n        render: function render(val) {\n          if (val === 1) {\n            return __jsx(_Badge, {\n              status: \"success\",\n              text: \"Enable\"\n            });\n          }\n\n          return __jsx(_Badge, {\n            status: \"error\",\n            text: \"Deactivate\"\n          });\n        }\n      }, {\n        title: 'Email',\n        dataIndex: 'email'\n      }, {\n        title: 'Phone Number',\n        dataIndex: 'phone'\n      }, {\n        title: 'Created At',\n        dataIndex: 'created_at',\n        render: function render(val) {\n          return __jsx(\"span\", null, formatDate(val, 'YYYY-MM-DD HH:mm'));\n        }\n      }];\n\n      var paginationProps = _objectSpread({\n        showSizeChanger: true,\n        showQuickJumper: true,\n        showTotal: function showTotal(total) {\n          return __jsx(\"span\", null, \"Total \", total, \" pages\");\n        }\n      }, pagination);\n\n      return __jsx(PageHeaderLayout, {\n        title: \"User Management\"\n      }, __jsx(_Card, {\n        bordered: false\n      }, __jsx(\"div\", {\n        className: styles.tableList\n      }, __jsx(\"div\", {\n        className: styles.tableListForm\n      }, this.renderSearchForm()), __jsx(\"div\", {\n        className: styles.tableListOperator\n      }, __jsx(PButton, {\n        code: \"add\",\n        type: \"primary\",\n        onClick: function onClick() {\n          return _this2.onAddClick();\n        }\n      }, \"New\"), selectedRows.length === 1 && [__jsx(PButton, {\n        key: \"edit\",\n        code: \"edit\",\n        onClick: function onClick() {\n          return _this2.onItemEditClick(selectedRows[0]);\n        }\n      }, \"Edit\"), __jsx(PButton, {\n        key: \"del\",\n        code: \"del\",\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.onItemDelClick(selectedRows[0]);\n        }\n      }, \"Delete\"), selectedRows[0].status === 2 && __jsx(PButton, {\n        key: \"enable\",\n        code: \"enable\",\n        onClick: function onClick() {\n          return _this2.onItemEnableClick(selectedRows[0]);\n        }\n      }, \"Enable\"), selectedRows[0].status === 1 && __jsx(PButton, {\n        key: \"disable\",\n        code: \"disable\",\n        type: \"danger\",\n        onClick: function onClick() {\n          return _this2.onItemDisableClick(selectedRows[0]);\n        }\n      }, \"Disable\")]), __jsx(\"div\", null, __jsx(_Table, {\n        rowSelection: {\n          selectedRowKeys: selectedRowKeys,\n          onSelect: this.handleTableSelectRow\n        },\n        loading: loading,\n        rowKey: function rowKey(record) {\n          return record.id;\n        },\n        dataSource: list,\n        columns: columns,\n        pagination: paginationProps,\n        onChange: this.onTableChange,\n        size: \"small\"\n      })))), this.renderDataForm());\n    }\n  }]);\n\n  return UserList;\n}(PureComponent), _temp)) || _class);\nexport default WithDva(function (state) {\n  return {\n    loading: state.loading.models.user,\n    user: state.user\n  };\n})(UserList); // export default UserList;","map":null,"metadata":{},"sourceType":"module"}