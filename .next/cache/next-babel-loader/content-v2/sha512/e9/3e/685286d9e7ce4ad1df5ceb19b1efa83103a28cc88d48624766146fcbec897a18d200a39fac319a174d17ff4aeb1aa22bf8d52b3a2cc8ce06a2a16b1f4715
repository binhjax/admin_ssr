{"ast":null,"code":"import \"antd/lib/table/style\";\nimport _Table from \"antd/lib/table\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport * as menuService from '@/services/menu';\nimport EditableCell from './EditableCell';\nexport default class RoleMenu extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"fillData\", data => {\n      const newData = [...data];\n\n      for (let i = 0; i < newData.length; i += 1) {\n        const {\n          children\n        } = newData[i];\n\n        const item = _objectSpread(_objectSpread({}, newData[i]), {}, {\n          hasChild: children && children.length > 0\n        });\n\n        if (item.hasChild) {\n          item.children = this.fillData(children);\n        }\n\n        newData[i] = item;\n      }\n\n      return newData;\n    });\n\n    _defineProperty(this, \"handleSave\", (record, dataIndex, values) => {\n      const {\n        dataSource\n      } = this.state;\n      const data = [...dataSource];\n      const index = data.findIndex(item => item.menu_id === record.id);\n      let item = data[index];\n\n      if (!item) {\n        item = {\n          menu_id: record.id,\n          dataIndex: values\n        };\n      } else {\n        item[dataIndex] = values;\n      }\n\n      data.splice(index, 1, _objectSpread({}, item));\n      this.setState({\n        dataSource: data\n      }, () => {\n        this.triggerChange(data);\n      });\n    });\n\n    _defineProperty(this, \"triggerChange\", data => {\n      const {\n        onChange\n      } = this.props;\n\n      if (onChange) {\n        onChange(data);\n      }\n    });\n\n    _defineProperty(this, \"expandAllChild\", data => {\n      let child = [];\n\n      for (let i = 0; i < data.length; i += 1) {\n        child.push(data[i]);\n\n        if (data[i].children) {\n          child = [...child, ...this.expandAllChild(data[i].children)];\n        }\n      }\n\n      return child;\n    });\n\n    _defineProperty(this, \"checkAndAdd\", (data, addData) => {\n      const list = [...data];\n\n      for (let i = 0; i < addData.length; i += 1) {\n        let exists = false;\n\n        for (let j = 0; j < list.length; j += 1) {\n          if (list[j].menu_id === addData[i].id) {\n            exists = true;\n            break;\n          }\n        }\n\n        if (!exists) {\n          const item = {\n            menu_id: addData[i].id,\n            actions: addData[i].actions ? addData[i].actions.map(v => v.id) : []\n          };\n          list.push(item);\n        }\n      }\n\n      return list;\n    });\n\n    _defineProperty(this, \"cancelSelected\", (data, selectedRows) => {\n      const list = [];\n\n      for (let i = 0; i < data.length; i += 1) {\n        let exists = false;\n\n        for (let j = 0; j < selectedRows.length; j += 1) {\n          if (data[i].menu_id === selectedRows[j].id) {\n            exists = true;\n            break;\n          }\n        }\n\n        if (!exists) {\n          list.push(data[i]);\n        }\n      }\n\n      return list;\n    });\n\n    _defineProperty(this, \"handleSelectedRow\", (record, selected) => {\n      let selectedRows = [record];\n\n      if (record.children) {\n        selectedRows = [...selectedRows, ...this.expandAllChild(record.children)];\n      }\n\n      const {\n        dataSource\n      } = this.state;\n      let list = [];\n\n      if (selected) {\n        list = this.checkAndAdd(dataSource, selectedRows);\n      } else {\n        list = this.cancelSelected(dataSource, selectedRows);\n      }\n\n      this.setState({\n        dataSource: list\n      }, () => {\n        this.triggerChange(list);\n      });\n    });\n\n    _defineProperty(this, \"handleSelectAll\", (selected, selectRows) => {\n      let list = [];\n\n      if (selected) {\n        list = selectRows.map(vv => {\n          const item = {\n            menu_id: vv.id,\n            actions: vv.actions ? vv.actions.map(v => v.id) : []\n          };\n          return item;\n        });\n      }\n\n      this.setState({\n        dataSource: list\n      }, () => {\n        this.triggerChange(list);\n      });\n    });\n\n    this.columns = [{\n      title: '菜单名称',\n      dataIndex: 'name',\n      width: '35%'\n    }, {\n      title: '动作权限',\n      dataIndex: 'actions',\n      editable: true\n    }];\n    this.state = {\n      menuData: [],\n      dataSource: props.value || []\n    };\n  }\n\n  componentDidMount() {\n    menuService.queryTree().then(data => {\n      const list = data.list || [];\n      this.setState({\n        menuData: this.fillData(list)\n      });\n    });\n  }\n\n  static getDerivedStateFromProps(nextProps, state) {\n    if ('value' in nextProps) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        dataSource: nextProps.value || []\n      });\n    }\n\n    return state;\n  }\n\n  render() {\n    const {\n      dataSource,\n      menuData\n    } = this.state;\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread(_objectSpread({}, col), {}, {\n        onCell: record => ({\n          record,\n          data: dataSource,\n          dataIndex: col.dataIndex,\n          handleSave: this.handleSave\n        })\n      });\n    });\n    return menuData.length > 0 && __jsx(_Table, {\n      bordered: true,\n      defaultExpandAllRows: true,\n      rowSelection: {\n        selectedRowKeys: dataSource.map(v => v.menu_id),\n        onSelect: this.handleSelectedRow,\n        onSelectAll: this.handleSelectAll\n      },\n      rowKey: record => record.id,\n      components: components,\n      dataSource: menuData,\n      columns: columns,\n      pagination: false\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}