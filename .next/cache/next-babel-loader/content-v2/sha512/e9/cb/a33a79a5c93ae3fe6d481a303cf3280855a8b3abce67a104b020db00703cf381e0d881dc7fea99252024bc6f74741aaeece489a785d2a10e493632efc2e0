{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/index.tsx\",\n    _this = this;\n\nimport createEngine, { DefaultNodeModel, DiagramModel, PortModelAlignment } from '@projectstorm/react-diagrams';\nimport * as React from 'react'; // import the custom models\n\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../helpers1/DemoCanvasWidget';\n/**\n * @Author Dylan Vorster\n */\n\nexport default (function () {\n  //1) setup the diagram engine\n  var engine = createEngine(); // register some other factories as well\n\n  engine.getPortFactories().registerFactory(new CustomPortFactory('diamond', function (config) {\n    return new CustomPortModel('', '', '');\n  }));\n  engine.getNodeFactories().registerFactory(new CustomNodeFactory()); //2) setup the diagram model\n\n  var model = new DiagramModel(); //3-A) create a default node\n\n  var node1 = new DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n  var port1 = node1.addOutPort('Out');\n  node1.setPosition(100, 200); //3-B) create our new custom node\n\n  var node2 = new CustomNodeModel();\n  node2.setPosition(250, 108);\n  var node3 = new DefaultNodeModel('Node 3', 'red');\n  var port3 = node3.addInPort('In');\n  node3.setPosition(500, 100); //3-C) link the 2 nodes together\n\n  var node4 = new DefaultNodeModel('Node 4', 'rgb(0,192,255)');\n  var port4 = node4.addOutPort('Out');\n  node4.setPosition(200, 10);\n  var link3 = port4.link(node2.getPort(PortModelAlignment.TOP));\n  var node5 = new DefaultNodeModel('Node 5', 'mediumpurple');\n  var port5 = node5.addInPort('In');\n  node5.setPosition(400, 300);\n  var link4 = port5.link(node2.getPort(PortModelAlignment.BOTTOM)); //4) add the models to the root graph\n\n  model.addAll(node1, node2, node3, link1, link2, node4, link3, link4, node5); //5) load model into engine\n\n  engine.setModel(model); //6) render the diagram!\n\n  return /*#__PURE__*/_jsxDEV(DemoCanvasWidget, {\n    children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n      engine: engine\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, _this);\n});","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/index.tsx"],"names":["createEngine","DefaultNodeModel","DiagramModel","PortModelAlignment","React","CustomNodeModel","CustomNodeFactory","CustomPortFactory","CustomPortModel","CanvasWidget","DemoCanvasWidget","engine","getPortFactories","registerFactory","config","getNodeFactories","model","node1","port1","addOutPort","setPosition","node2","node3","port3","addInPort","node4","port4","link3","link","getPort","TOP","node5","port5","link4","BOTTOM","addAll","link1","link2","setModel"],"mappings":"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","sourcesContent":["import createEngine, {\n  DefaultNodeModel,\n  DiagramModel,\n  PortModelAlignment,\n} from '@projectstorm/react-diagrams';\nimport * as React from 'react';\n// import the custom models\nimport { CustomNodeModel } from './CustomNodeModel';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport { DemoCanvasWidget } from '../helpers1/DemoCanvasWidget';\n\n/**\n * @Author Dylan Vorster\n */\nexport default () => {\n  //1) setup the diagram engine\n  var engine = createEngine();\n\n  // register some other factories as well\n  engine\n    .getPortFactories()\n    .registerFactory(new CustomPortFactory('diamond', config => new CustomPortModel('', '', '')));\n  engine.getNodeFactories().registerFactory(new CustomNodeFactory());\n\n  //2) setup the diagram model\n  var model = new DiagramModel();\n\n  //3-A) create a default node\n  var node1 = new DefaultNodeModel('Node 1', 'rgb(0,192,255)');\n  var port1 = node1.addOutPort('Out');\n  node1.setPosition(100, 200);\n\n  //3-B) create our new custom node\n  var node2 = new CustomNodeModel();\n  node2.setPosition(250, 108);\n\n  var node3 = new DefaultNodeModel('Node 3', 'red');\n  var port3 = node3.addInPort('In');\n  node3.setPosition(500, 100);\n\n  //3-C) link the 2 nodes together\n\n  var node4 = new DefaultNodeModel('Node 4', 'rgb(0,192,255)');\n  var port4 = node4.addOutPort('Out');\n  node4.setPosition(200, 10);\n\n  var link3 = port4.link(node2.getPort(PortModelAlignment.TOP));\n\n  var node5 = new DefaultNodeModel('Node 5', 'mediumpurple');\n  var port5 = node5.addInPort('In');\n  node5.setPosition(400, 300);\n\n  var link4 = port5.link(node2.getPort(PortModelAlignment.BOTTOM));\n\n  //4) add the models to the root graph\n  model.addAll(node1, node2, node3, link1, link2, node4, link3, link4, node5);\n\n  //5) load model into engine\n  engine.setModel(model);\n\n  //6) render the diagram!\n  return (\n    <DemoCanvasWidget>\n      <CanvasWidget engine={engine} />\n    </DemoCanvasWidget>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}