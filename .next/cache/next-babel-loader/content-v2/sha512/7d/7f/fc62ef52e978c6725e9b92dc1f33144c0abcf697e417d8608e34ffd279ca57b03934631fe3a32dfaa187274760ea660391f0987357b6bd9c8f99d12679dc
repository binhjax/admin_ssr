{"ast":null,"code":"import \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport moment from 'moment';\nimport { history } from 'next/link';\nimport { stringify, parse } from 'qs';\nimport store, { storeKeys } from './persistent-store';\nlet refreshTimeout;\nlet lastAccessTime;\nexport const baseURL = '/api';\nexport const contentType = {\n  form: 'application/x-www-form-urlencoded',\n  json: 'application/json'\n};\nexport const headerKeys = {\n  ContentType: 'Content-Type',\n  Authorization: 'Authorization'\n};\nexport const methods = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  DELETE: 'DELETE',\n  PATCH: 'PATCH',\n  HEAD: 'HEAD',\n  OPTIONS: 'OPTIONS'\n}; // Get access token\n\nexport function getAccessToken() {\n  const token = store.get(storeKeys.AccessToken);\n\n  if (!token) {\n    return '';\n  }\n\n  return token.access_token;\n  return '';\n} // Wrap the URL with the token\n\nexport function wrapURLWithToken(url) {\n  const ss = url.split('?');\n  const query = parse(ss[1]);\n  query.accessToken = getAccessToken();\n  return `${ss[0]}?${stringify(query)}`;\n} // 登出\n\nexport function logout() {\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  }\n\n  store.remove(storeKeys.AccessToken);\n  const {\n    redirect\n  } = parse(window.location.href.split('?')[1]);\n\n  if (window.location.pathname !== '/login' && !redirect) {\n    // window.location = '/login';\n    window.history.replace({\n      pathname: '/user/login',\n      search: stringify({\n        redirect: window.location.href\n      })\n    });\n  }\n} // request 拦截器\n\nfunction requestInterceptors(c) {\n  const config = _objectSpread({}, c);\n\n  const token = store.get(storeKeys.AccessToken);\n\n  if (token) {\n    console.log(\"binhnt.requestInterceptors\");\n    config.headers[headerKeys.Authorization] = `${token.token_type} ${token.access_token}`;\n  }\n\n  return config;\n} // ajax请求\n\n\nexport default function request(url, options = {}) {\n  console.log('AccessToken: ', storeKeys.AccessToken);\n  const oldToken = store.get(storeKeys.AccessToken); // console.log(\"oldToken: \", oldToken);\n\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n    if (refreshTimeout) {\n      clearTimeout(refreshTimeout);\n    }\n\n    logout(); // eslint-disable-next-line compat/compat\n\n    return Promise.reject(new Error('The token has expired'));\n  }\n\n  lastAccessTime = moment().unix();\n\n  const opts = _objectSpread({}, options);\n\n  let showNotify = true;\n\n  if (opts.hideNotify) {\n    showNotify = false;\n    delete opts.hideNotify;\n  }\n\n  const config = _objectSpread({\n    method: methods.GET,\n    baseURL,\n    headers: {},\n    transformRequest: (data, headers) => {\n      switch (headers[headerKeys.ContentType]) {\n        case contentType.json:\n          return JSON.stringify(data);\n\n        case contentType.form:\n          return stringify(data);\n\n        default:\n          return data;\n      }\n    },\n    paramsSerializer: params => {\n      return stringify(params);\n    },\n    timeout: 60000\n  }, opts);\n\n  if (!(config.headers && config.headers[headerKeys.ContentType]) && [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1) {\n    config.headers[headerKeys.ContentType] = contentType.json;\n  }\n\n  const instance = axios.create(config);\n  instance.interceptors.request.use(requestInterceptors);\n  return instance.request({\n    url\n  }).then(res => {\n    const {\n      data\n    } = res;\n    console.log('Data', data, 'url', url);\n    return data;\n  }).catch(error => {\n    const {\n      response\n    } = error;\n    const {\n      status,\n      data\n    } = response;\n\n    if (status === 401 && data.error && data.error.code === 9999) {\n      logout();\n      return response;\n    }\n\n    if (showNotify) {\n      let msg = 'Request error';\n\n      if (status === 504) {\n        msg = 'Not connected to server';\n      } else if (data && data.error) {\n        msg = data.error.message;\n      }\n\n      _notification.error({\n        message: `${config.baseURL}${url}`,\n        description: msg\n      });\n    }\n\n    return response;\n  });\n} // 放入访问令牌\n\nexport function setToken(token) {\n  lastAccessTime = token.expires_at;\n  store.set(storeKeys.AccessToken, token);\n\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  } // 提前10分钟更新令牌\n\n\n  const timeout = token.expires_at - moment().unix() - 10;\n\n  if (timeout > 0) {\n    refreshTimeout = setTimeout(() => {\n      const oldToken = store.get(storeKeys.AccessToken);\n\n      if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n        if (refreshTimeout) {\n          clearTimeout(refreshTimeout);\n        }\n\n        return;\n      }\n\n      request('/v1/pub/refresh-token', {\n        method: methods.POST\n      }).then(res => {\n        setToken(res);\n      });\n    }, timeout * 1000);\n  }\n}","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/utils/request.js"],"names":["axios","moment","history","stringify","parse","store","storeKeys","refreshTimeout","lastAccessTime","baseURL","contentType","form","json","headerKeys","ContentType","Authorization","methods","GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS","getAccessToken","token","get","AccessToken","access_token","wrapURLWithToken","url","ss","split","query","accessToken","logout","clearTimeout","remove","redirect","window","location","href","pathname","replace","search","requestInterceptors","c","config","console","log","headers","token_type","request","options","oldToken","expires_at","Promise","reject","Error","unix","opts","showNotify","hideNotify","method","transformRequest","data","JSON","paramsSerializer","params","timeout","indexOf","instance","create","interceptors","use","then","res","catch","error","response","status","code","msg","message","description","setToken","set","setTimeout"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,IAAjC;AAGA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,oBAAjC;AAEA,IAAIC,cAAJ;AACA,IAAIC,cAAJ;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAhB;AAEP,OAAO,MAAMC,WAAW,GAAG;AACzBC,EAAAA,IAAI,EAAE,mCADmB;AAEzBC,EAAAA,IAAI,EAAE;AAFmB,CAApB;AAKP,OAAO,MAAMC,UAAU,GAAG;AACxBC,EAAAA,WAAW,EAAE,cADW;AAExBC,EAAAA,aAAa,EAAE;AAFS,CAAnB;AAKP,OAAO,MAAMC,OAAO,GAAG;AACrBC,EAAAA,GAAG,EAAE,KADgB;AAErBC,EAAAA,IAAI,EAAE,MAFe;AAGrBC,EAAAA,GAAG,EAAE,KAHgB;AAIrBC,EAAAA,MAAM,EAAE,QAJa;AAKrBC,EAAAA,KAAK,EAAE,OALc;AAMrBC,EAAAA,IAAI,EAAE,MANe;AAOrBC,EAAAA,OAAO,EAAE;AAPY,CAAhB,C,CAUP;;AACA,OAAO,SAASC,cAAT,GAA0B;AAC/B,QAAMC,KAAK,GAAGpB,KAAK,CAACqB,GAAN,CAAUpB,SAAS,CAACqB,WAApB,CAAd;;AACA,MAAI,CAACF,KAAL,EAAY;AACV,WAAO,EAAP;AACD;;AACD,SAAOA,KAAK,CAACG,YAAb;AACA,SAAO,EAAP;AACD,C,CAED;;AACA,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA+B;AACpC,QAAMC,EAAE,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAX;AACA,QAAMC,KAAK,GAAG7B,KAAK,CAAC2B,EAAE,CAAC,CAAD,CAAH,CAAnB;AACAE,EAAAA,KAAK,CAACC,WAAN,GAAoBV,cAAc,EAAlC;AACA,SAAQ,GAAEO,EAAE,CAAC,CAAD,CAAI,IAAG5B,SAAS,CAAC8B,KAAD,CAAQ,EAApC;AACD,C,CAED;;AACA,OAAO,SAASE,MAAT,GAAkB;AACvB,MAAI5B,cAAJ,EAAoB;AAClB6B,IAAAA,YAAY,CAAC7B,cAAD,CAAZ;AACD;;AAEDF,EAAAA,KAAK,CAACgC,MAAN,CAAa/B,SAAS,CAACqB,WAAvB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAelC,KAAK,CAACmC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBT,KAArB,CAA2B,GAA3B,EAAgC,CAAhC,CAAD,CAA1B;;AACA,MAAIO,MAAM,CAACC,QAAP,CAAgBE,QAAhB,KAA6B,QAA7B,IAAyC,CAACJ,QAA9C,EAAwD;AACtD;AACAC,IAAAA,MAAM,CAACrC,OAAP,CAAeyC,OAAf,CAAuB;AACrBD,MAAAA,QAAQ,EAAE,aADW;AAErBE,MAAAA,MAAM,EAAEzC,SAAS,CAAC;AAChBmC,QAAAA,QAAQ,EAAEC,MAAM,CAACC,QAAP,CAAgBC;AADV,OAAD;AAFI,KAAvB;AAMD;AACF,C,CAED;;AACA,SAASI,mBAAT,CAA6BC,CAA7B,EAAgC;AAC9B,QAAMC,MAAM,qBAAQD,CAAR,CAAZ;;AACA,QAAMrB,KAAK,GAAGpB,KAAK,CAACqB,GAAN,CAAUpB,SAAS,CAACqB,WAApB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACTuB,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACAF,IAAAA,MAAM,CAACG,OAAP,CAAerC,UAAU,CAACE,aAA1B,IAA4C,GAAEU,KAAK,CAAC0B,UAAW,IAAG1B,KAAK,CAACG,YAAa,EAArF;AACD;;AACD,SAAOmB,MAAP;AACD,C,CAED;;;AACA,eAAe,SAASK,OAAT,CAAiBtB,GAAjB,EAAsBuB,OAAO,GAAG,EAAhC,EAAoC;AACjDL,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B3C,SAAS,CAACqB,WAAvC;AACA,QAAM2B,QAAQ,GAAGjD,KAAK,CAACqB,GAAN,CAAUpB,SAAS,CAACqB,WAApB,CAAjB,CAFiD,CAGjD;;AACA,MAAI2B,QAAQ,IAAIA,QAAQ,CAACC,UAAT,GAAsB/C,cAAtB,IAAwC,CAAxD,EAA2D;AACzD,QAAID,cAAJ,EAAoB;AAClB6B,MAAAA,YAAY,CAAC7B,cAAD,CAAZ;AACD;;AACD4B,IAAAA,MAAM,GAJmD,CAKzD;;AACA,WAAOqB,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,uBAAV,CAAf,CAAP;AACD;;AACDlD,EAAAA,cAAc,GAAGP,MAAM,GAAG0D,IAAT,EAAjB;;AAEA,QAAMC,IAAI,qBAAQP,OAAR,CAAV;;AACA,MAAIQ,UAAU,GAAG,IAAjB;;AACA,MAAID,IAAI,CAACE,UAAT,EAAqB;AACnBD,IAAAA,UAAU,GAAG,KAAb;AACA,WAAOD,IAAI,CAACE,UAAZ;AACD;;AAED,QAAMf,MAAM;AACVgB,IAAAA,MAAM,EAAE/C,OAAO,CAACC,GADN;AAEVR,IAAAA,OAFU;AAGVyC,IAAAA,OAAO,EAAE,EAHC;AAIVc,IAAAA,gBAAgB,EAAE,CAACC,IAAD,EAAOf,OAAP,KAAmB;AACnC,cAAQA,OAAO,CAACrC,UAAU,CAACC,WAAZ,CAAf;AACE,aAAKJ,WAAW,CAACE,IAAjB;AACE,iBAAOsD,IAAI,CAAC/D,SAAL,CAAe8D,IAAf,CAAP;;AACF,aAAKvD,WAAW,CAACC,IAAjB;AACE,iBAAOR,SAAS,CAAC8D,IAAD,CAAhB;;AACF;AACE,iBAAOA,IAAP;AANJ;AAQD,KAbS;AAcVE,IAAAA,gBAAgB,EAAEC,MAAM,IAAI;AAC1B,aAAOjE,SAAS,CAACiE,MAAD,CAAhB;AACD,KAhBS;AAiBVC,IAAAA,OAAO,EAAE;AAjBC,KAkBPT,IAlBO,CAAZ;;AAqBA,MACE,EAAEb,MAAM,CAACG,OAAP,IAAkBH,MAAM,CAACG,OAAP,CAAerC,UAAU,CAACC,WAA1B,CAApB,KACA,CAACE,OAAO,CAACE,IAAT,EAAeF,OAAO,CAACG,GAAvB,EAA4BH,OAAO,CAACK,KAApC,EAA2CiD,OAA3C,CAAmDvB,MAAM,CAACgB,MAA1D,IAAoE,CAAC,CAFvE,EAGE;AACAhB,IAAAA,MAAM,CAACG,OAAP,CAAerC,UAAU,CAACC,WAA1B,IAAyCJ,WAAW,CAACE,IAArD;AACD;;AAED,QAAM2D,QAAQ,GAAGvE,KAAK,CAACwE,MAAN,CAAazB,MAAb,CAAjB;AACAwB,EAAAA,QAAQ,CAACE,YAAT,CAAsBrB,OAAtB,CAA8BsB,GAA9B,CAAkC7B,mBAAlC;AAEA,SAAO0B,QAAQ,CACZnB,OADI,CACI;AAAEtB,IAAAA;AAAF,GADJ,EAEJ6C,IAFI,CAECC,GAAG,IAAI;AACX,UAAM;AAAEX,MAAAA;AAAF,QAAWW,GAAjB;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBgB,IAApB,EAA0B,KAA1B,EAAiCnC,GAAjC;AACA,WAAOmC,IAAP;AACD,GANI,EAOJY,KAPI,CAOEC,KAAK,IAAI;AACd,UAAM;AAAEC,MAAAA;AAAF,QAAeD,KAArB;AACA,UAAM;AAAEE,MAAAA,MAAF;AAAUf,MAAAA;AAAV,QAAmBc,QAAzB;;AAEA,QAAIC,MAAM,KAAK,GAAX,IAAkBf,IAAI,CAACa,KAAvB,IAAgCb,IAAI,CAACa,KAAL,CAAWG,IAAX,KAAoB,IAAxD,EAA8D;AAC5D9C,MAAAA,MAAM;AACN,aAAO4C,QAAP;AACD;;AAED,QAAIlB,UAAJ,EAAgB;AACd,UAAIqB,GAAG,GAAG,eAAV;;AACA,UAAIF,MAAM,KAAK,GAAf,EAAoB;AAClBE,QAAAA,GAAG,GAAG,yBAAN;AACD,OAFD,MAEO,IAAIjB,IAAI,IAAIA,IAAI,CAACa,KAAjB,EAAwB;AAC7BI,QAAAA,GAAG,GAAGjB,IAAI,CAACa,KAAL,CAAWK,OAAjB;AACD;;AAED,oBAAaL,KAAb,CAAmB;AACjBK,QAAAA,OAAO,EAAG,GAAEpC,MAAM,CAACtC,OAAQ,GAAEqB,GAAI,EADhB;AAEjBsD,QAAAA,WAAW,EAAEF;AAFI,OAAnB;AAID;;AACD,WAAOH,QAAP;AACD,GA9BI,CAAP;AA+BD,C,CAED;;AACA,OAAO,SAASM,QAAT,CAAkB5D,KAAlB,EAAyB;AAC9BjB,EAAAA,cAAc,GAAGiB,KAAK,CAAC8B,UAAvB;AACAlD,EAAAA,KAAK,CAACiF,GAAN,CAAUhF,SAAS,CAACqB,WAApB,EAAiCF,KAAjC;;AACA,MAAIlB,cAAJ,EAAoB;AAClB6B,IAAAA,YAAY,CAAC7B,cAAD,CAAZ;AACD,GAL6B,CAO9B;;;AACA,QAAM8D,OAAO,GAAG5C,KAAK,CAAC8B,UAAN,GAAmBtD,MAAM,GAAG0D,IAAT,EAAnB,GAAqC,EAArD;;AACA,MAAIU,OAAO,GAAG,CAAd,EAAiB;AACf9D,IAAAA,cAAc,GAAGgF,UAAU,CAAC,MAAM;AAChC,YAAMjC,QAAQ,GAAGjD,KAAK,CAACqB,GAAN,CAAUpB,SAAS,CAACqB,WAApB,CAAjB;;AACA,UAAI2B,QAAQ,IAAIA,QAAQ,CAACC,UAAT,GAAsB/C,cAAtB,IAAwC,CAAxD,EAA2D;AACzD,YAAID,cAAJ,EAAoB;AAClB6B,UAAAA,YAAY,CAAC7B,cAAD,CAAZ;AACD;;AACD;AACD;;AAED6C,MAAAA,OAAO,CAAC,uBAAD,EAA0B;AAC/BW,QAAAA,MAAM,EAAE/C,OAAO,CAACE;AADe,OAA1B,CAAP,CAEGyD,IAFH,CAEQC,GAAG,IAAI;AACbS,QAAAA,QAAQ,CAACT,GAAD,CAAR;AACD,OAJD;AAKD,KAd0B,EAcxBP,OAAO,GAAG,IAdc,CAA3B;AAeD;AACF","sourcesContent":["import axios from 'axios';\nimport moment from 'moment';\nimport { history } from 'next/link';\nimport { stringify, parse } from 'qs';\nimport { notification } from 'antd';\n\nimport store, { storeKeys } from './persistent-store';\n\nlet refreshTimeout;\nlet lastAccessTime;\n\nexport const baseURL = '/api';\n\nexport const contentType = {\n  form: 'application/x-www-form-urlencoded',\n  json: 'application/json',\n};\n\nexport const headerKeys = {\n  ContentType: 'Content-Type',\n  Authorization: 'Authorization',\n};\n\nexport const methods = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  DELETE: 'DELETE',\n  PATCH: 'PATCH',\n  HEAD: 'HEAD',\n  OPTIONS: 'OPTIONS',\n};\n\n// Get access token\nexport function getAccessToken() {\n  const token = store.get(storeKeys.AccessToken);\n  if (!token) {\n    return '';\n  }\n  return token.access_token;\n  return '';\n}\n\n// Wrap the URL with the token\nexport function wrapURLWithToken(url) {\n  const ss = url.split('?');\n  const query = parse(ss[1]);\n  query.accessToken = getAccessToken();\n  return `${ss[0]}?${stringify(query)}`;\n}\n\n// 登出\nexport function logout() {\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  }\n\n  store.remove(storeKeys.AccessToken);\n  const { redirect } = parse(window.location.href.split('?')[1]);\n  if (window.location.pathname !== '/login' && !redirect) {\n    // window.location = '/login';\n    window.history.replace({\n      pathname: '/user/login',\n      search: stringify({\n        redirect: window.location.href,\n      }),\n    });\n  }\n}\n\n// request 拦截器\nfunction requestInterceptors(c) {\n  const config = { ...c };\n  const token = store.get(storeKeys.AccessToken);\n  if (token) {\n    console.log(\"binhnt.requestInterceptors\");\n    config.headers[headerKeys.Authorization] = `${token.token_type} ${token.access_token}`;\n  }\n  return config;\n}\n\n// ajax请求\nexport default function request(url, options = {}) {\n  console.log('AccessToken: ', storeKeys.AccessToken);\n  const oldToken = store.get(storeKeys.AccessToken);\n  // console.log(\"oldToken: \", oldToken);\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n    if (refreshTimeout) {\n      clearTimeout(refreshTimeout);\n    }\n    logout();\n    // eslint-disable-next-line compat/compat\n    return Promise.reject(new Error('The token has expired'));\n  }\n  lastAccessTime = moment().unix();\n\n  const opts = { ...options };\n  let showNotify = true;\n  if (opts.hideNotify) {\n    showNotify = false;\n    delete opts.hideNotify;\n  }\n\n  const config = {\n    method: methods.GET,\n    baseURL,\n    headers: {},\n    transformRequest: (data, headers) => {\n      switch (headers[headerKeys.ContentType]) {\n        case contentType.json:\n          return JSON.stringify(data);\n        case contentType.form:\n          return stringify(data);\n        default:\n          return data;\n      }\n    },\n    paramsSerializer: params => {\n      return stringify(params);\n    },\n    timeout: 60000,\n    ...opts,\n  };\n\n  if (\n    !(config.headers && config.headers[headerKeys.ContentType]) &&\n    [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1\n  ) {\n    config.headers[headerKeys.ContentType] = contentType.json;\n  }\n\n  const instance = axios.create(config);\n  instance.interceptors.request.use(requestInterceptors);\n\n  return instance\n    .request({ url })\n    .then(res => {\n      const { data } = res;\n      console.log('Data', data, 'url', url);\n      return data;\n    })\n    .catch(error => {\n      const { response } = error;\n      const { status, data } = response;\n\n      if (status === 401 && data.error && data.error.code === 9999) {\n        logout();\n        return response;\n      }\n\n      if (showNotify) {\n        let msg = 'Request error';\n        if (status === 504) {\n          msg = 'Not connected to server';\n        } else if (data && data.error) {\n          msg = data.error.message;\n        }\n\n        notification.error({\n          message: `${config.baseURL}${url}`,\n          description: msg,\n        });\n      }\n      return response;\n    });\n}\n\n// 放入访问令牌\nexport function setToken(token) {\n  lastAccessTime = token.expires_at;\n  store.set(storeKeys.AccessToken, token);\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  }\n\n  // 提前10分钟更新令牌\n  const timeout = token.expires_at - moment().unix() - 10;\n  if (timeout > 0) {\n    refreshTimeout = setTimeout(() => {\n      const oldToken = store.get(storeKeys.AccessToken);\n      if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n        if (refreshTimeout) {\n          clearTimeout(refreshTimeout);\n        }\n        return;\n      }\n\n      request('/v1/pub/refresh-token', {\n        method: methods.POST,\n      }).then(res => {\n        setToken(res);\n      });\n    }, timeout * 1000);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}