{"ast":null,"code":"import _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as _ from 'lodash';\nimport { Point } from '@projectstorm/geometry';\nimport { BasePositionModel } from '@projectstorm/react-canvas-core';\nexport var PortModelAlignment;\n\n(function (PortModelAlignment) {\n  PortModelAlignment[\"TOP\"] = \"top\";\n  PortModelAlignment[\"LEFT\"] = \"left\";\n  PortModelAlignment[\"BOTTOM\"] = \"bottom\";\n  PortModelAlignment[\"RIGHT\"] = \"right\";\n})(PortModelAlignment || (PortModelAlignment = {}));\n\nexport var PortModel = /*#__PURE__*/function (_BasePositionModel) {\n  _inherits(PortModel, _BasePositionModel);\n\n  var _super = _createSuper(PortModel);\n\n  // calculated post rendering so routing can be done correctly\n  function PortModel(options) {\n    var _this;\n\n    _classCallCheck(this, PortModel);\n\n    _this = _super.call(this, options);\n\n    _defineProperty(_assertThisInitialized(_this), \"links\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"width\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"height\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"reportedPosition\", void 0);\n\n    _this.links = {};\n    _this.reportedPosition = false;\n    return _this;\n  }\n\n  _createClass(PortModel, [{\n    key: \"deserialize\",\n    value: function deserialize(event) {\n      _get(_getPrototypeOf(PortModel.prototype), \"deserialize\", this).call(this, event);\n\n      this.reportedPosition = false;\n      this.options.name = event.data.name;\n      this.options.alignment = event.data.alignment;\n    }\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return _objectSpread(_objectSpread({}, _get(_getPrototypeOf(PortModel.prototype), \"serialize\", this).call(this)), {}, {\n        name: this.options.name,\n        alignment: this.options.alignment,\n        parentNode: this.parent.getID(),\n        links: _.map(this.links, function (link) {\n          return link.getID();\n        })\n      });\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(x, y) {\n      var _this2 = this;\n\n      var old = this.position;\n\n      _get(_getPrototypeOf(PortModel.prototype), \"setPosition\", this).call(this, x, y);\n\n      _.forEach(this.getLinks(), function (link) {\n        var point = link.getPointForPort(_this2);\n        point.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n      });\n    }\n  }, {\n    key: \"doClone\",\n    value: function doClone() {\n      var lookupTable = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var clone = arguments.length > 1 ? arguments[1] : undefined;\n      clone.links = {};\n      clone.parentNode = this.getParent().clone(lookupTable);\n    }\n  }, {\n    key: \"getNode\",\n    value: function getNode() {\n      return this.getParent();\n    }\n  }, {\n    key: \"getName\",\n    value: function getName() {\n      return this.options.name;\n    }\n  }, {\n    key: \"getMaximumLinks\",\n    value: function getMaximumLinks() {\n      return this.options.maximumLinks;\n    }\n  }, {\n    key: \"setMaximumLinks\",\n    value: function setMaximumLinks(maximumLinks) {\n      this.options.maximumLinks = maximumLinks;\n    }\n  }, {\n    key: \"removeLink\",\n    value: function removeLink(link) {\n      delete this.links[link.getID()];\n    }\n  }, {\n    key: \"addLink\",\n    value: function addLink(link) {\n      this.links[link.getID()] = link;\n    }\n  }, {\n    key: \"getLinks\",\n    value: function getLinks() {\n      return this.links;\n    }\n  }, {\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      if (_.isFinite(this.options.maximumLinks)) {\n        var numberOfLinks = _.size(this.links);\n\n        if (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n          return _.values(this.links)[0];\n        } else if (numberOfLinks >= this.options.maximumLinks) {\n          return null;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"reportPosition\",\n    value: function reportPosition() {\n      var _this3 = this;\n\n      _.forEach(this.getLinks(), function (link) {\n        link.getPointForPort(_this3).setPosition(_this3.getCenter());\n      });\n\n      this.fireEvent({\n        entity: this\n      }, 'reportInitialPosition');\n    }\n  }, {\n    key: \"getCenter\",\n    value: function getCenter() {\n      return new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n    }\n  }, {\n    key: \"updateCoords\",\n    value: function updateCoords(coords) {\n      this.width = coords.getWidth();\n      this.height = coords.getHeight();\n      this.setPosition(coords.getTopLeft());\n      this.reportedPosition = true;\n      this.reportPosition();\n    }\n  }, {\n    key: \"canLinkToPort\",\n    value: function canLinkToPort(port) {\n      return true;\n    }\n  }, {\n    key: \"isLocked\",\n    value: function isLocked() {\n      return _get(_getPrototypeOf(PortModel.prototype), \"isLocked\", this).call(this) || this.getParent().isLocked();\n    }\n  }]);\n\n  return PortModel;\n}(BasePositionModel);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/CustomPortModel.ts"],"names":["_","Point","BasePositionModel","PortModelAlignment","PortModel","options","links","reportedPosition","event","name","data","alignment","parentNode","parent","getID","map","link","x","y","old","position","forEach","getLinks","point","getPointForPort","setPosition","getX","getY","lookupTable","clone","getParent","maximumLinks","isFinite","numberOfLinks","size","values","getCenter","fireEvent","entity","width","height","coords","getWidth","getHeight","getTopLeft","reportPosition","port","isLocked"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Point, Rectangle } from '@projectstorm/geometry';\nimport {\n\tBaseEntityEvent,\n\tBaseModelOptions,\n\tBasePositionModel,\n\tBasePositionModelGenerics,\n\tBasePositionModelListener,\n\tDeserializeEvent\n} from '@projectstorm/react-canvas-core';\nimport { CustomNodeModel } from \"./CustomNodeModel\";\n\nexport enum PortModelAlignment {\n\tTOP = 'top',\n\tLEFT = 'left',\n\tBOTTOM = 'bottom',\n\tRIGHT = 'right'\n}\n\nexport interface PortModelListener extends BasePositionModelListener {\n\t/**\n\t * fires when it first receives positional information\n\t */\n\treportInitialPosition?: (event: BaseEntityEvent<PortModel>) => void;\n}\n\nexport interface PortModelOptions extends BaseModelOptions {\n\talignment?: PortModelAlignment;\n\tmaximumLinks?: number;\n\tname: string;\n}\n\nexport interface PortModelGenerics extends BasePositionModelGenerics {\n\tOPTIONS: PortModelOptions;\n\tPARENT: CustomNodeModel;\n\tLISTENER: PortModelListener;\n}\n\nexport class PortModel<G extends PortModelGenerics = PortModelGenerics> extends BasePositionModel<G> {\n\tlinks: { [id: string]: LinkModel };\n\n\t// calculated post rendering so routing can be done correctly\n\twidth: number;\n\theight: number;\n\treportedPosition: boolean;\n\n\tconstructor(options: G['OPTIONS']) {\n\t\tsuper(options);\n\t\tthis.links = {};\n\t\tthis.reportedPosition = false;\n\t}\n\n\tdeserialize(event: DeserializeEvent<this>) {\n\t\tsuper.deserialize(event);\n\t\tthis.reportedPosition = false;\n\t\tthis.options.name = event.data.name;\n\t\tthis.options.alignment = event.data.alignment;\n\t}\n\n\tserialize() {\n\t\treturn {\n\t\t\t...super.serialize(),\n\t\t\tname: this.options.name,\n\t\t\talignment: this.options.alignment,\n\t\t\tparentNode: this.parent.getID(),\n\t\t\tlinks: _.map(this.links, (link) => {\n\t\t\t\treturn link.getID();\n\t\t\t})\n\t\t};\n\t}\n\n\tsetPosition(point: Point);\n\tsetPosition(x: number, y: number);\n\tsetPosition(x, y?) {\n\t\tlet old = this.position;\n\t\tsuper.setPosition(x, y);\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlet point = link.getPointForPort(this);\n\t\t\tpoint.setPosition(point.getX() + x - old.x, point.getY() + y - old.y);\n\t\t});\n\t}\n\n\tdoClone(lookupTable = {}, clone) {\n\t\tclone.links = {};\n\t\tclone.parentNode = this.getParent().clone(lookupTable);\n\t}\n\n\tgetNode(): NodeModel {\n\t\treturn this.getParent();\n\t}\n\n\tgetName(): string {\n\t\treturn this.options.name;\n\t}\n\n\tgetMaximumLinks(): number {\n\t\treturn this.options.maximumLinks;\n\t}\n\n\tsetMaximumLinks(maximumLinks: number) {\n\t\tthis.options.maximumLinks = maximumLinks;\n\t}\n\n\tremoveLink(link: LinkModel) {\n\t\tdelete this.links[link.getID()];\n\t}\n\n\taddLink(link: LinkModel) {\n\t\tthis.links[link.getID()] = link;\n\t}\n\n\tgetLinks(): { [id: string]: LinkModel } {\n\t\treturn this.links;\n\t}\n\n\tpublic createLinkModel(): LinkModel | null {\n\t\tif (_.isFinite(this.options.maximumLinks)) {\n\t\t\tvar numberOfLinks: number = _.size(this.links);\n\t\t\tif (this.options.maximumLinks === 1 && numberOfLinks >= 1) {\n\t\t\t\treturn _.values(this.links)[0];\n\t\t\t} else if (numberOfLinks >= this.options.maximumLinks) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\treportPosition() {\n\t\t_.forEach(this.getLinks(), (link) => {\n\t\t\tlink.getPointForPort(this).setPosition(this.getCenter());\n\t\t});\n\t\tthis.fireEvent(\n\t\t\t{\n\t\t\t\tentity: this\n\t\t\t},\n\t\t\t'reportInitialPosition'\n\t\t);\n\t}\n\n\tgetCenter(): Point {\n\t\treturn new Point(this.getX() + this.width / 2, this.getY() + this.height / 2);\n\t}\n\n\tupdateCoords(coords: Rectangle) {\n\t\tthis.width = coords.getWidth();\n\t\tthis.height = coords.getHeight();\n\t\tthis.setPosition(coords.getTopLeft());\n\t\tthis.reportedPosition = true;\n\t\tthis.reportPosition();\n\t}\n\n\tcanLinkToPort(port: PortModel): boolean {\n\t\treturn true;\n\t}\n\n\tisLocked() {\n\t\treturn super.isLocked() || this.getParent().isLocked();\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}