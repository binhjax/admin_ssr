{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nvar _jsxFileName = \"/Users/nguyenthanhbinh/Work/vnshop/admin/src/pages/role/RoleMenu/EditableCell.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nexport default class EditableCell extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"findItem\", () => {\n      const {\n        data,\n        record\n      } = this.props;\n\n      for (let i = 0; i < data.length; i += 1) {\n        if (data[i].menu_id === record.id) {\n          return data[i];\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"handleChange\", values => {\n      const {\n        record,\n        dataIndex,\n        handleSave\n      } = this.props;\n      handleSave(record, dataIndex, values);\n    });\n\n    _defineProperty(this, \"renderAction\", () => {\n      const {\n        record\n      } = this.props;\n\n      if (!record.actions || record.actions.length === 0) {\n        return null;\n      }\n\n      const item = this.findItem();\n      return __jsx(_Checkbox.Group, {\n        disabled: !item,\n        value: item ? item.actions : [],\n        onChange: this.handleChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 7\n        }\n      }, __jsx(_Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, record.actions.map(v => __jsx(_Col, {\n        key: v.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }\n      }, __jsx(_Checkbox, {\n        value: v.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }\n      }, v.name)))));\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      dataIndex,\n      record,\n      menuData,\n      handleSave\n    } = _this$props,\n          restProps = _objectWithoutProperties(_this$props, [\"dataIndex\", \"record\", \"menuData\", \"handleSave\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }), dataIndex === 'actions' && this.renderAction(), !(dataIndex === 'actions') && restProps.children);\n  }\n\n}","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/pages/role/RoleMenu/EditableCell.js"],"names":["React","PureComponent","EditableCell","data","record","props","i","length","menu_id","id","values","dataIndex","handleSave","actions","item","findItem","handleChange","map","v","name","render","menuData","restProps","renderAction","children"],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AAGA,eAAe,MAAMC,YAAN,SAA2BD,aAA3B,CAAyC;AAAA;AAAA;;AAAA,sCAC3C,MAAM;AACf,YAAM;AAAEE,QAAAA,IAAF;AAAQC,QAAAA;AAAR,UAAmB,KAAKC,KAA9B;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,IAAI,CAAtC,EAAyC;AACvC,YAAIH,IAAI,CAACG,CAAD,CAAJ,CAAQE,OAAR,KAAoBJ,MAAM,CAACK,EAA/B,EAAmC;AACjC,iBAAON,IAAI,CAACG,CAAD,CAAX;AACD;AACF;;AACD,aAAO,IAAP;AACD,KATqD;;AAAA,0CAWvCI,MAAM,IAAI;AACvB,YAAM;AAAEN,QAAAA,MAAF;AAAUO,QAAAA,SAAV;AAAqBC,QAAAA;AAArB,UAAoC,KAAKP,KAA/C;AACAO,MAAAA,UAAU,CAACR,MAAD,EAASO,SAAT,EAAoBD,MAApB,CAAV;AACD,KAdqD;;AAAA,0CAgBvC,MAAM;AACnB,YAAM;AAAEN,QAAAA;AAAF,UAAa,KAAKC,KAAxB;;AACA,UAAI,CAACD,MAAM,CAACS,OAAR,IAAmBT,MAAM,CAACS,OAAP,CAAeN,MAAf,KAA0B,CAAjD,EAAoD;AAClD,eAAO,IAAP;AACD;;AAED,YAAMO,IAAI,GAAG,KAAKC,QAAL,EAAb;AACA,aACE,gBAAU,KAAV;AACE,QAAA,QAAQ,EAAE,CAACD,IADb;AAEE,QAAA,KAAK,EAAEA,IAAI,GAAGA,IAAI,CAACD,OAAR,GAAkB,EAF/B;AAGE,QAAA,QAAQ,EAAE,KAAKG,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGZ,MAAM,CAACS,OAAP,CAAeI,GAAf,CAAmBC,CAAC,IACnB;AAAK,QAAA,GAAG,EAAEA,CAAC,CAACT,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAU,QAAA,KAAK,EAAES,CAAC,CAACT,EAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAwBS,CAAC,CAACC,IAA1B,CADF,CADD,CADH,CALF,CADF;AAeD,KAtCqD;AAAA;;AAwCtDC,EAAAA,MAAM,GAAG;AACP,wBAAkE,KAAKf,KAAvE;AAAA,UAAM;AAAEM,MAAAA,SAAF;AAAaP,MAAAA,MAAb;AAAqBiB,MAAAA,QAArB;AAA+BT,MAAAA;AAA/B,KAAN;AAAA,UAAoDU,SAApD;;AACA,WACE,yBAAQA,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGX,SAAS,KAAK,SAAd,IAA2B,KAAKY,YAAL,EAD9B,EAEG,EAAEZ,SAAS,KAAK,SAAhB,KAA8BW,SAAS,CAACE,QAF3C,CADF;AAMD;;AAhDqD","sourcesContent":["import React, { PureComponent } from 'react';\r\nimport { Checkbox, Row, Col } from 'antd';\r\n\r\nexport default class EditableCell extends PureComponent {\r\n  findItem = () => {\r\n    const { data, record } = this.props;\r\n    for (let i = 0; i < data.length; i += 1) {\r\n      if (data[i].menu_id === record.id) {\r\n        return data[i];\r\n      }\r\n    }\r\n    return null;\r\n  };\r\n\r\n  handleChange = values => {\r\n    const { record, dataIndex, handleSave } = this.props;\r\n    handleSave(record, dataIndex, values);\r\n  };\r\n\r\n  renderAction = () => {\r\n    const { record } = this.props;\r\n    if (!record.actions || record.actions.length === 0) {\r\n      return null;\r\n    }\r\n\r\n    const item = this.findItem();\r\n    return (\r\n      <Checkbox.Group\r\n        disabled={!item}\r\n        value={item ? item.actions : []}\r\n        onChange={this.handleChange}\r\n      >\r\n        <Row>\r\n          {record.actions.map(v => (\r\n            <Col key={v.id}>\r\n              <Checkbox value={v.id}>{v.name}</Checkbox>\r\n            </Col>\r\n          ))}\r\n        </Row>\r\n      </Checkbox.Group>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { dataIndex, record, menuData, handleSave, ...restProps } = this.props;\r\n    return (\r\n      <td {...restProps}>\r\n        {dataIndex === 'actions' && this.renderAction()}\r\n        {!(dataIndex === 'actions') && restProps.children}\r\n      </td>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}