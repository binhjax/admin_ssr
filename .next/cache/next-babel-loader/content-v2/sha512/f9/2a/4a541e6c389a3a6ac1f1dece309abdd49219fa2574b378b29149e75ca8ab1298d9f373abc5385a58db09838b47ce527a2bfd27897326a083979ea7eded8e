{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx\";\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\nlet S;\n\n(function (_S) {\n  const Label = _S.Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n})(S || (S = {})); // now we can render all what we want in the label\n\n\nexport const EditableLabelWidget = props => {\n  const [str, setStr] = React.useState(props.model.value);\n  return /*#__PURE__*/_jsxDEV(S.Label, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: str,\n      onChange: event => {\n        const newVal = event.target.value; // update value both in internal component state\n\n        setStr(newVal); // and in model object\n\n        props.model.value = newVal;\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => action('model eventDidFire')('You clicked the button'),\n      children: \"Click me!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n};","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/EditableLabelWidget.tsx"],"names":["React","styled","action","Label","div","S","EditableLabelWidget","props","str","setStr","useState","model","value","event","newVal","target"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,MAAT,QAAuB,0BAAvB;;;;AAQQ,QAAMC,KAAK,cAAGF,MAAM,CAACG,GAAI;AACjC;AACA;AACA,EAHQ;GAFEC,C,KAAAA,C,SAQV;;;AACA,OAAO,MAAMC,mBAAuE,GAAIC,KAAD,IAAW;AACjG,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBT,KAAK,CAACU,QAAN,CAAeH,KAAK,CAACI,KAAN,CAAYC,KAA3B,CAAtB;AAEA,sBACC,QAAC,CAAD,CAAG,KAAH;AAAA,4BACC;AACC,MAAA,KAAK,EAAEJ,GADR;AAEC,MAAA,QAAQ,EAAGK,KAAD,IAAW;AACpB,cAAMC,MAAM,GAAGD,KAAK,CAACE,MAAN,CAAaH,KAA5B,CADoB,CAGpB;;AACAH,QAAAA,MAAM,CAACK,MAAD,CAAN,CAJoB,CAKpB;;AACAP,QAAAA,KAAK,CAACI,KAAN,CAAYC,KAAZ,GAAoBE,MAApB;AACA;AATF;AAAA;AAAA;AAAA;AAAA,YADD,eAaC;AAAQ,MAAA,OAAO,EAAE,MAAMZ,MAAM,CAAC,oBAAD,CAAN,CAA6B,wBAA7B,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAbD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAiBA,CApBM","sourcesContent":["import * as React from 'react';\n\nimport { EditableLabelModel } from './EditableLabelModel';\nimport styled from '@emotion/styled';\nimport { action } from '@storybook/addon-actions';\n\nexport interface FlowAliasLabelWidgetProps {\n\tmodel: EditableLabelModel;\n}\n\nnamespace S {\n\t// NOTE: this CSS rules allows to interact with elements in label\n\texport const Label = styled.div`\n\t\tuser-select: none;\n\t\tpointer-events: auto;\n\t`;\n}\n\n// now we can render all what we want in the label\nexport const EditableLabelWidget: React.FunctionComponent<FlowAliasLabelWidgetProps> = (props) => {\n\tconst [str, setStr] = React.useState(props.model.value);\n\n\treturn (\n\t\t<S.Label>\n\t\t\t<input\n\t\t\t\tvalue={str}\n\t\t\t\tonChange={(event) => {\n\t\t\t\t\tconst newVal = event.target.value;\n\n\t\t\t\t\t// update value both in internal component state\n\t\t\t\t\tsetStr(newVal);\n\t\t\t\t\t// and in model object\n\t\t\t\t\tprops.model.value = newVal;\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<button onClick={() => action('model eventDidFire')('You clicked the button')}>Click me!</button>\n\t\t</S.Label>\n\t);\n};\n"]},"metadata":{},"sourceType":"module"}