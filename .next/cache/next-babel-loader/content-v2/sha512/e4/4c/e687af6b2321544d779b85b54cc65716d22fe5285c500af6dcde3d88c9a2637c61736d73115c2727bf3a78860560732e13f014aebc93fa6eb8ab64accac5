{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Action, InputType, State } from '@projectstorm/react-canvas-core';\nimport { PortModel } from '@projectstorm/react-diagrams-core';\n\n/**\n * This state is controlling the creation of a link.\n */\nexport class CreateLinkState extends State {\n  constructor() {\n    super({\n      name: 'create-new-link'\n    });\n\n    _defineProperty(this, \"sourcePort\", void 0);\n\n    _defineProperty(this, \"link\", void 0);\n\n    this.registerAction(new Action({\n      type: InputType.MOUSE_UP,\n      fire: actionEvent => {\n        const element = this.engine.getActionEventBus().getModelForEvent(actionEvent);\n        const {\n          event: {\n            clientX,\n            clientY\n          }\n        } = actionEvent;\n        const ox = this.engine.getModel().getOffsetX();\n        const oy = this.engine.getModel().getOffsetY();\n\n        if (element instanceof PortModel && !this.sourcePort) {\n          this.sourcePort = element;\n          /* would be cool if link creating could be done somewhat like\n                            const link = createLink({\n                                sourcePort: this.sourcePort,\n                                points: [{ x: clientX, y: clientY }, { x: clientX, y: clientY }]\n                            })\n                            */\n\n          const link = this.sourcePort.createLinkModel();\n          link.setSourcePort(this.sourcePort);\n          link.getFirstPoint().setPosition(clientX - ox, clientY - oy);\n          link.getLastPoint().setPosition(clientX - ox + 20, clientY - oy + 20);\n          this.link = this.engine.getModel().addLink(link);\n        } else if (element instanceof PortModel && this.sourcePort && element != this.sourcePort) {\n          if (this.sourcePort.canLinkToPort(element)) {\n            this.link.setTargetPort(element);\n            element.reportPosition();\n            this.clearState();\n            this.eject();\n          }\n        } else if (element === this.link.getLastPoint()) {\n          this.link.point(clientX - ox, clientY - oy, -1);\n        }\n\n        this.engine.repaintCanvas();\n      }\n    }));\n    this.registerAction(new Action({\n      type: InputType.MOUSE_MOVE,\n      fire: actionEvent => {\n        if (!this.link) return;\n        const {\n          event\n        } = actionEvent;\n        this.link.getLastPoint().setPosition(event.clientX, event.clientY);\n        this.engine.repaintCanvas();\n      }\n    }));\n    this.registerAction(new Action({\n      type: InputType.KEY_UP,\n      fire: actionEvent => {\n        // on esc press remove any started link and pop back to default state\n        if (actionEvent.event.keyCode === 27) {\n          this.link.remove();\n          this.clearState();\n          this.eject();\n          this.engine.repaintCanvas();\n        }\n      }\n    }));\n  }\n\n  clearState() {\n    this.link = undefined;\n    this.sourcePort = undefined;\n  }\n\n}","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/CreateLinkState.ts"],"names":["Action","InputType","State","PortModel","CreateLinkState","constructor","name","registerAction","type","MOUSE_UP","fire","actionEvent","element","engine","getActionEventBus","getModelForEvent","event","clientX","clientY","ox","getModel","getOffsetX","oy","getOffsetY","sourcePort","link","createLinkModel","setSourcePort","getFirstPoint","setPosition","getLastPoint","addLink","canLinkToPort","setTargetPort","reportPosition","clearState","eject","point","repaintCanvas","MOUSE_MOVE","KEY_UP","keyCode","remove","undefined"],"mappings":"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","sourcesContent":["import { Action, ActionEvent, InputType, State } from '@projectstorm/react-canvas-core';\nimport { PortModel, LinkModel, DiagramEngine } from '@projectstorm/react-diagrams-core';\nimport { MouseEvent, KeyboardEvent } from 'react';\n\n/**\n * This state is controlling the creation of a link.\n */\nexport class CreateLinkState extends State<DiagramEngine> {\n\tsourcePort: PortModel;\n\tlink: LinkModel;\n\n\tconstructor() {\n\t\tsuper({ name: 'create-new-link' });\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (actionEvent: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst element = this.engine.getActionEventBus().getModelForEvent(actionEvent);\n\t\t\t\t\tconst {\n\t\t\t\t\t\tevent: { clientX, clientY }\n\t\t\t\t\t} = actionEvent;\n\t\t\t\t\tconst ox = this.engine.getModel().getOffsetX();\n\t\t\t\t\tconst oy = this.engine.getModel().getOffsetY();\n\n\t\t\t\t\tif (element instanceof PortModel && !this.sourcePort) {\n\t\t\t\t\t\tthis.sourcePort = element;\n\n\t\t\t\t\t\t/* would be cool if link creating could be done somewhat like\n                        const link = createLink({\n                            sourcePort: this.sourcePort,\n                            points: [{ x: clientX, y: clientY }, { x: clientX, y: clientY }]\n                        })\n                        */\n\t\t\t\t\t\tconst link = this.sourcePort.createLinkModel();\n\t\t\t\t\t\tlink.setSourcePort(this.sourcePort);\n\t\t\t\t\t\tlink.getFirstPoint().setPosition(clientX - ox, clientY - oy);\n\t\t\t\t\t\tlink.getLastPoint().setPosition(clientX - ox + 20, clientY - oy + 20);\n\n\t\t\t\t\t\tthis.link = this.engine.getModel().addLink(link);\n\t\t\t\t\t} else if (element instanceof PortModel && this.sourcePort && element != this.sourcePort) {\n\t\t\t\t\t\tif (this.sourcePort.canLinkToPort(element)) {\n\t\t\t\t\t\t\tthis.link.setTargetPort(element);\n\t\t\t\t\t\t\telement.reportPosition();\n\t\t\t\t\t\t\tthis.clearState();\n\t\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (element === this.link.getLastPoint()) {\n\t\t\t\t\t\tthis.link.point(clientX - ox, clientY - oy, -1);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_MOVE,\n\t\t\t\tfire: (actionEvent: ActionEvent<React.MouseEvent>) => {\n\t\t\t\t\tif (!this.link) return;\n\t\t\t\t\tconst { event } = actionEvent;\n\t\t\t\t\tthis.link.getLastPoint().setPosition(event.clientX, event.clientY);\n\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.KEY_UP,\n\t\t\t\tfire: (actionEvent: ActionEvent<KeyboardEvent>) => {\n\t\t\t\t\t// on esc press remove any started link and pop back to default state\n\t\t\t\t\tif (actionEvent.event.keyCode === 27) {\n\t\t\t\t\t\tthis.link.remove();\n\t\t\t\t\t\tthis.clearState();\n\t\t\t\t\t\tthis.eject();\n\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tclearState() {\n\t\tthis.link = undefined;\n\t\tthis.sourcePort = undefined;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}