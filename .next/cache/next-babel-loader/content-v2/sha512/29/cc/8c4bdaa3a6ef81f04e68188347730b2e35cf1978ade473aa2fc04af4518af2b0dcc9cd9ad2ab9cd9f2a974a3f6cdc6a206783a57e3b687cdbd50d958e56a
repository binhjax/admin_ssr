{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport _slicedToArray from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _jsxFileName = \"/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  flex-grow: 1;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport ActionMenu from './components/ActionMenu';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { useDispatch } from 'react-redux';\nexport var Layer = styled.div(_templateObject());\n_c = Layer;\n\nvar BodyWidget = function BodyWidget(props) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      updateState = _React$useState2[1]; // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n\n  var forceUpdate = React.useCallback(function () {\n    return updateState({});\n  }, []);\n\n  var _React$useState3 = React.useState(),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      port = _React$useState4[0],\n      setPort = _React$useState4[1];\n\n  var _React$useState5 = React.useState(),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      selectedNode = _React$useState6[0],\n      setSelectedNode = _React$useState6[1];\n\n  var _React$useState7 = React.useState('table'),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      active = _React$useState8[0],\n      setActive = _React$useState8[1];\n\n  var _React$useState9 = React.useState(),\n      _React$useState10 = _slicedToArray(_React$useState9, 2),\n      selectedPort = _React$useState10[0],\n      setSelectedPort = _React$useState10[1];\n\n  var _React$useState11 = React.useState(),\n      _React$useState12 = _slicedToArray(_React$useState11, 2),\n      link = _React$useState12[0],\n      setLink = _React$useState12[1]; // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n\n  var handelChangeName = function handelChangeName(e) {\n    selectedNode.getOptions().extras = e.target.value; // dispatch(action.setSelectedNode(selectedNode));\n\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  var handleChangePort = function handleChangePort(e) {\n    var _e$target = e.target,\n        id = _e$target.id,\n        value = _e$target.value;\n    port.getOptions().extras[id] = value; // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n\n  var openDetail = function openDetail(value) {\n    setPort(value);\n    setActive('detail');\n  };\n\n  var confirmDeletePort = function confirmDeletePort(port) {\n    _Modal.confirm({\n      title: 'Confirm',\n      icon: /*#__PURE__*/_jsxDEV(ExclamationCircleOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 13\n      }, _this),\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk: function onOk() {\n        selectedNode.deletePort(port); // dispatch(action.setPorts(selectedNode.getPorts()));\n      }\n    });\n  };\n\n  var selectPort = function selectPort(value) {\n    setSelectedPort(value);\n  };\n\n  var addPort = function addPort() {\n    var port = selectedNode.addCustomPort('new_col', '', ''); // dispatch(action.setPorts(selectedNode.getPorts()));\n\n    openDetail(port);\n  }; // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        padding: 10,\n        background: '#fff'\n      },\n      children: /*#__PURE__*/_jsxDEV(ActionMenu, {\n        app: props.app\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Layer, {\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        setSelectedPort(undefined);\n      },\n      onDrop: function onDrop(event) {\n        var node;\n        node = new CustomNodeModel('Name');\n        var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n        node.setPosition(point);\n        props.app.getDiagramEngine().getModel().addNode(node);\n        forceUpdate();\n      },\n      onDragOver: function onDragOver(event) {\n        event.preventDefault();\n      },\n      children: /*#__PURE__*/_jsxDEV(DemoCanvasWidget, {\n        background: \"#ffff\",\n        children: /*#__PURE__*/_jsxDEV(CanvasWidget, {\n          engine: props.app.getDiagramEngine()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, _this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(BodyWidget, \"pwdWvlutXPtao4mtB0H221CkGP4=\", false, function () {\n  return [useDispatch];\n});\n\n_c2 = BodyWidget;\nexport default BodyWidget;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Layer\");\n$RefreshReg$(_c2, \"BodyWidget\");","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/BodyWidget.tsx"],"names":["React","ActionMenu","CanvasWidget","DemoCanvasWidget","CustomNodeModel","styled","ExclamationCircleOutlined","useDispatch","Layer","div","BodyWidget","props","dispatch","useState","updateState","forceUpdate","useCallback","port","setPort","selectedNode","setSelectedNode","active","setActive","selectedPort","setSelectedPort","link","setLink","handelChangeName","e","getOptions","extras","target","value","app","getDiagramEngine","repaintCanvas","handleChangePort","id","openDetail","confirmDeletePort","confirm","title","icon","content","okText","cancelText","onOk","deletePort","selectPort","addPort","addCustomPort","display","justifyContent","alignItems","padding","background","stopPropagation","undefined","event","node","point","getRelativeMousePoint","setPosition","getModel","addNode","preventDefault"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAiC,OAAjC;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AAMA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAOC,gBAAP,MAA6B,6BAA7B;AACA,SAASC,eAAT,QAAgC,+BAAhC;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,SAASC,yBAAT,QAA0C,mBAA1C;AAEA,SAAsBC,WAAtB,QAAyC,aAAzC;AASA,OAAO,IAAMC,KAAK,GAAGH,MAAM,CAACI,GAAV,mBAAX;KAAMD,K;;AAKb,IAAME,UAAqC,GAAG,SAAxCA,UAAwC,CAAAC,KAAK,EAAI;AAAA;;AACrD,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;;AADqD,wBAE7BP,KAAK,CAACa,QAAN,EAF6B;AAAA;AAAA,MAE5CC,WAF4C,wBAGrD;AACA;;;AAEA,MAAMC,WAAW,GAAGf,KAAK,CAACgB,WAAN,CAAkB;AAAA,WAAMF,WAAW,CAAC,EAAD,CAAjB;AAAA,GAAlB,EAAyC,EAAzC,CAApB;;AANqD,yBAO7Bd,KAAK,CAACa,QAAN,EAP6B;AAAA;AAAA,MAO9CI,IAP8C;AAAA,MAOxCC,OAPwC;;AAAA,yBAQblB,KAAK,CAACa,QAAN,EARa;AAAA;AAAA,MAQ9CM,YAR8C;AAAA,MAQhCC,eARgC;;AAAA,yBASzBpB,KAAK,CAACa,QAAN,CAAe,OAAf,CATyB;AAAA;AAAA,MAS9CQ,MAT8C;AAAA,MAStCC,SATsC;;AAAA,yBAUbtB,KAAK,CAACa,QAAN,EAVa;AAAA;AAAA,MAU9CU,YAV8C;AAAA,MAUhCC,eAVgC;;AAAA,0BAW7BxB,KAAK,CAACa,QAAN,EAX6B;AAAA;AAAA,MAW9CY,IAX8C;AAAA,MAWxCC,OAXwC,yBAYrD;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,CAAD,EAAY;AACnCT,IAAAA,YAAY,CAACU,UAAb,GAA0BC,MAA1B,GAAmCF,CAAC,CAACG,MAAF,CAASC,KAA5C,CADmC,CAEnC;;AACArB,IAAAA,KAAK,CAACsB,GAAN,CAAUC,gBAAV,GAA6BC,aAA7B;AACD,GAJD;;AAMA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAR,CAAC,EAAI;AAAA,oBACNA,CAAC,CAACG,MADI;AAAA,QACpBM,EADoB,aACpBA,EADoB;AAAA,QAChBL,KADgB,aAChBA,KADgB;AAE5Bf,IAAAA,IAAI,CAACY,UAAL,GAAkBC,MAAlB,CAAyBO,EAAzB,IAA+BL,KAA/B,CAF4B,CAG5B;AACA;AACA;AACA;AACA;AACD,GARD;;AASA,MAAMM,UAAU,GAAG,SAAbA,UAAa,CAAAN,KAAK,EAAI;AAC1Bd,IAAAA,OAAO,CAACc,KAAD,CAAP;AACAV,IAAAA,SAAS,CAAC,QAAD,CAAT;AACD,GAHD;;AAIA,MAAMiB,iBAAiB,GAAG,SAApBA,iBAAoB,CAACtB,IAAD,EAAqB;AAC7C,WAAMuB,OAAN,CAAc;AACZC,MAAAA,KAAK,EAAE,SADK;AAEZC,MAAAA,IAAI,eAAE,QAAC,yBAAD;AAAA;AAAA;AAAA;AAAA,eAFM;AAGZC,MAAAA,OAAO,EAAE,qBAHG;AAIZC,MAAAA,MAAM,EAAE,KAJI;AAKZC,MAAAA,UAAU,EAAE,IALA;AAMZC,MAAAA,IANY,kBAML;AACL3B,QAAAA,YAAY,CAAC4B,UAAb,CAAwB9B,IAAxB,EADK,CAEL;AACD;AATW,KAAd;AAWD,GAZD;;AAaA,MAAM+B,UAAU,GAAG,SAAbA,UAAa,CAAAhB,KAAK,EAAI;AAC1BR,IAAAA,eAAe,CAACQ,KAAD,CAAf;AACD,GAFD;;AAIA,MAAMiB,OAAO,GAAG,SAAVA,OAAU,GAAM;AACpB,QAAIhC,IAAI,GAAGE,YAAY,CAAC+B,aAAb,CAA2B,SAA3B,EAAsC,EAAtC,EAA0C,EAA1C,CAAX,CADoB,CAEpB;;AACAZ,IAAAA,UAAU,CAACrB,IAAD,CAAV;AACD,GAJD,CAtDqD,CA4DrD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,sBACE;AAAA,4BACE;AACE,MAAA,KAAK,EAAE;AACLkC,QAAAA,OAAO,EAAE,MADJ;AAELC,QAAAA,cAAc,EAAE,QAFX;AAGLC,QAAAA,UAAU,EAAE,QAHP;AAILC,QAAAA,OAAO,EAAE,EAJJ;AAKLC,QAAAA,UAAU,EAAE;AALP,OADT;AAAA,6BASE,QAAC,UAAD;AAAY,QAAA,GAAG,EAAE5C,KAAK,CAACsB;AAAvB;AAAA;AAAA;AAAA;AAAA;AATF;AAAA;AAAA;AAAA;AAAA,aADF,eAYE;AAAA;AAAA;AAAA;AAAA,aAZF,eAaE,QAAC,KAAD;AACE,MAAA,OAAO,EAAE,iBAAAL,CAAC,EAAI;AACZA,QAAAA,CAAC,CAAC4B,eAAF;AACAhC,QAAAA,eAAe,CAACiC,SAAD,CAAf;AACD,OAJH;AAKE,MAAA,MAAM,EAAE,gBAAAC,KAAK,EAAI;AACf,YAAIC,IAAJ;AACAA,QAAAA,IAAI,GAAG,IAAIvD,eAAJ,CAAoB,MAApB,CAAP;AACA,YAAIwD,KAAK,GAAGjD,KAAK,CAACsB,GAAN,CAAUC,gBAAV,GAA6B2B,qBAA7B,CAAmDH,KAAnD,CAAZ;AACAC,QAAAA,IAAI,CAACG,WAAL,CAAiBF,KAAjB;AACAjD,QAAAA,KAAK,CAACsB,GAAN,CACGC,gBADH,GAEG6B,QAFH,GAGGC,OAHH,CAGWL,IAHX;AAIA5C,QAAAA,WAAW;AACZ,OAfH;AAgBE,MAAA,UAAU,EAAE,oBAAA2C,KAAK,EAAI;AACnBA,QAAAA,KAAK,CAACO,cAAN;AACD,OAlBH;AAAA,6BAoBE,QAAC,gBAAD;AAAkB,QAAA,UAAU,EAAC,OAA7B;AAAA,+BACE,QAAC,YAAD;AAAc,UAAA,MAAM,EAAEtD,KAAK,CAACsB,GAAN,CAAUC,gBAAV;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AApBF;AAAA;AAAA;AAAA;AAAA,aAbF;AAAA;AAAA;AAAA;AAAA;AAAA,WADF;AAwCD,CA3GD;;GAAMxB,U;UACaH,W;;;MADbG,U;AA4GN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport TrayWidget from './components/TrayWidget';\nimport ActionMenu from './components/ActionMenu';\nimport LinkDetail from './components/LinkDetail';\nimport TableDetail from './components/TableDetail';\nimport PortDetail from './components/PortDetail';\n\nimport { Application } from './Application';\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\nimport DemoCanvasWidget from '../helpers/DemoCanvasWidget';\nimport { CustomNodeModel } from '../CustomNode/CustomNodeModel';\nimport styled from '@emotion/styled';\nimport { ExclamationCircleOutlined } from '@ant-design/icons';\nimport { Card, Col, Row, Modal } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { PortModel } from '@projectstorm/react-diagrams';\nimport { CustomPortModel } from '../CustomNode/CustomPortModel';\n// import * as action from '../../actions/node';\nimport { CustomLinkModel } from '../CustomNode/CustomLinkModel';\nexport interface BodyWidgetProps {\n  app: Application;\n}\n\nexport const Layer = styled.div`\n  position: relative;\n  flex-grow: 1;\n`;\n\nconst BodyWidget: React.FC<BodyWidgetProps> = props => {\n  const dispatch = useDispatch();\n  const [, updateState] = React.useState();\n  // const node = useSelector((state) => state.node);\n  // const ports: { [s: string]: PortModel } = useSelector((state) => state.node.ports);\n\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [port, setPort] = React.useState<CustomPortModel>();\n  const [selectedNode, setSelectedNode] = React.useState<CustomNodeModel>();\n  const [active, setActive] = React.useState('table');\n  const [selectedPort, setSelectedPort] = React.useState<PortModel>();\n  const [link, setLink] = React.useState<CustomLinkModel>();\n  // useEffect(() => {\n  //   setSelectedNode(node.selectedNode);\n  //   setActive(node.active);\n  //   setLink(node.link);\n  // }, [node.selectedNode, node.active, node.link, node.name, setSelectedNode]);\n\n  const handelChangeName = (e: any) => {\n    selectedNode.getOptions().extras = e.target.value;\n    // dispatch(action.setSelectedNode(selectedNode));\n    props.app.getDiagramEngine().repaintCanvas();\n  };\n\n  const handleChangePort = e => {\n    const { id, value } = e.target;\n    port.getOptions().extras[id] = value;\n    // dispatch(\n    //   action.setPorts({\n    //     ...ports\n    //   })\n    // );\n  };\n  const openDetail = value => {\n    setPort(value as CustomPortModel);\n    setActive('detail');\n  };\n  const confirmDeletePort = (port: PortModel) => {\n    Modal.confirm({\n      title: 'Confirm',\n      icon: <ExclamationCircleOutlined />,\n      content: 'Confirm delete port',\n      okText: 'Yes',\n      cancelText: 'No',\n      onOk() {\n        selectedNode.deletePort(port as CustomPortModel);\n        // dispatch(action.setPorts(selectedNode.getPorts()));\n      },\n    });\n  };\n  const selectPort = value => {\n    setSelectedPort(value);\n  };\n\n  const addPort = () => {\n    let port = selectedNode.addCustomPort('new_col', '', '');\n    // dispatch(action.setPorts(selectedNode.getPorts()));\n    openDetail(port);\n  };\n\n  // const dispatchPorts = () => {\n  //   dispatch(\n  //     action.setPorts({\n  //       ...ports,\n  //     })\n  //   );\n  // };\n  return (\n    <div>\n      <div\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n          padding: 10,\n          background: '#fff',\n        }}\n      >\n        <ActionMenu app={props.app} />\n      </div>\n      <hr />\n      <Layer\n        onClick={e => {\n          e.stopPropagation();\n          setSelectedPort(undefined);\n        }}\n        onDrop={event => {\n          var node: CustomNodeModel;\n          node = new CustomNodeModel('Name');\n          var point = props.app.getDiagramEngine().getRelativeMousePoint(event);\n          node.setPosition(point);\n          props.app\n            .getDiagramEngine()\n            .getModel()\n            .addNode(node);\n          forceUpdate();\n        }}\n        onDragOver={event => {\n          event.preventDefault();\n        }}\n      >\n        <DemoCanvasWidget background=\"#ffff\">\n          <CanvasWidget engine={props.app.getDiagramEngine()} />\n        </DemoCanvasWidget>\n      </Layer>\n    </div>\n  );\n};\nexport default BodyWidget;\n"]},"metadata":{},"sourceType":"module"}