{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/checkbox/style\";\nimport _Checkbox from \"antd/lib/checkbox\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nexport default class EditableCell extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"findItem\", () => {\n      const {\n        data,\n        record\n      } = this.props;\n\n      for (let i = 0; i < data.length; i += 1) {\n        if (data[i].menu_id === record.id) {\n          return data[i];\n        }\n      }\n\n      return null;\n    });\n\n    _defineProperty(this, \"handleChange\", values => {\n      const {\n        record,\n        dataIndex,\n        handleSave\n      } = this.props;\n      handleSave(record, dataIndex, values);\n    });\n\n    _defineProperty(this, \"renderAction\", () => {\n      const {\n        record\n      } = this.props;\n\n      if (!record.actions || record.actions.length === 0) {\n        return null;\n      }\n\n      const item = this.findItem();\n      return __jsx(_Checkbox.Group, {\n        disabled: !item,\n        value: item ? item.actions : [],\n        onChange: this.handleChange\n      }, __jsx(_Row, null, record.actions.map(v => __jsx(_Col, {\n        key: v.id\n      }, __jsx(_Checkbox, {\n        value: v.id\n      }, v.name)))));\n    });\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      dataIndex,\n      record,\n      menuData,\n      handleSave\n    } = _this$props,\n          restProps = _objectWithoutProperties(_this$props, [\"dataIndex\", \"record\", \"menuData\", \"handleSave\"]);\n\n    return __jsx(\"td\", restProps, dataIndex === 'actions' && this.renderAction(), !(dataIndex === 'actions') && restProps.children);\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}