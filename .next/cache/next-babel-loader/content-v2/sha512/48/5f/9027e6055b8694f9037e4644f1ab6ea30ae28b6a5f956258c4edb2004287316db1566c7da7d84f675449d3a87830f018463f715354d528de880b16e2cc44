{"ast":null,"code":"import \"antd/lib/modal/style\";\nimport _Modal from \"antd/lib/modal\";\nimport \"antd/lib/card/style\";\nimport _Card from \"antd/lib/card\";\nimport \"antd/lib/input-number/style\";\nimport _InputNumber from \"antd/lib/input-number\";\nimport \"antd/lib/radio/style\";\nimport _Radio from \"antd/lib/radio\";\nimport \"antd/lib/tooltip/style\";\nimport _Tooltip from \"antd/lib/tooltip\";\nimport \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/tree-select/style\";\nimport _TreeSelect from \"antd/lib/tree-select\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\n\nvar _dec, _class, _temp;\n\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react'; // import { connect } from '@/pages/dashboard/node_modules/dva';\n\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport MenuAction from './MenuAction';\nimport WithDva from '../../utils/store'; // @connect(({ menu }) => ({\n//   menu,\n// }))\n\nlet MenuCard = (_dec = Form.create(), _dec(_class = (_temp = class MenuCard extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"onOKClick\", () => {\n      const {\n        form,\n        onSubmit\n      } = this.props;\n      form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          const formData = _objectSpread({}, values);\n\n          formData.show_status = parseInt(formData.show_status, 10);\n          formData.status = parseInt(formData.status, 10);\n          formData.sequence = parseInt(formData.sequence, 10);\n          onSubmit(formData);\n        }\n      });\n    });\n\n    _defineProperty(this, \"dispatch\", action => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(action);\n    });\n\n    _defineProperty(this, \"toTreeSelect\", data => {\n      if (!data) {\n        return [];\n      }\n\n      const newData = [];\n\n      for (let i = 0; i < data.length; i += 1) {\n        const item = _objectSpread(_objectSpread({}, data[i]), {}, {\n          title: data[i].name,\n          value: data[i].id\n        });\n\n        if (item.children && item.children.length > 0) {\n          item.children = this.toTreeSelect(item.children);\n        }\n\n        newData.push(item);\n      }\n\n      return newData;\n    });\n  }\n\n  render() {\n    const {\n      menu: {\n        formVisible,\n        formTitle,\n        formData,\n        submitting,\n        treeData\n      },\n      form: {\n        getFieldDecorator\n      },\n      onCancel\n    } = this.props;\n    const formItemLayout = {\n      labelCol: {\n        span: 6\n      },\n      wrapperCol: {\n        span: 18\n      }\n    };\n    return __jsx(_Modal, {\n      title: formTitle,\n      width: 1000,\n      visible: formVisible,\n      maskClosable: false,\n      confirmLoading: submitting,\n      destroyOnClose: true,\n      onOk: this.onOKClick,\n      onCancel: onCancel,\n      style: {\n        top: 20\n      },\n      bodyStyle: {\n        maxHeight: 'calc( 100vh - 158px )',\n        overflowY: 'auto'\n      }\n    }, __jsx(_Card, {\n      bordered: false\n    }, __jsx(Form, null, __jsx(_Row, null, __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Menu name\"\n    }), getFieldDecorator('name', {\n      initialValue: formData.name,\n      rules: [{\n        required: true,\n        message: 'Please enter the menu name'\n      }]\n    })(__jsx(_Input, {\n      placeholder: \"please enter\"\n    })))), __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Upper menu\"\n    }), getFieldDecorator('parent_id', {\n      initialValue: formData.parent_id\n    })(__jsx(_TreeSelect, {\n      showSearch: true,\n      treeNodeFilterProp: \"title\",\n      style: {\n        width: '100%'\n      },\n      dropdownStyle: {\n        maxHeight: 400,\n        overflow: 'auto'\n      },\n      treeData: this.toTreeSelect(treeData),\n      placeholder: \"please choose\"\n    }))))), __jsx(_Row, null, __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Access path\"\n    }), getFieldDecorator('router', {\n      initialValue: formData.router\n    })(__jsx(_Input, {\n      placeholder: \"please enter\"\n    })))), __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Menu icon\"\n    }), __jsx(_Row, null, __jsx(_Col, {\n      span: 20\n    }, getFieldDecorator('icon', {\n      initialValue: formData.icon\n    })(__jsx(_Input, {\n      placeholder: \"please enter\"\n    }))), __jsx(_Col, {\n      span: 4,\n      style: {\n        textAlign: 'center'\n      }\n    }, __jsx(_Tooltip, {\n      title: \"Icons only support official Icon icons\"\n    }, __jsx(QuestionCircleOutlined, null))))))), __jsx(_Row, null, __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Whether to show\"\n    }), getFieldDecorator('show_status', {\n      initialValue: formData.show_status ? formData.show_status.toString() : '1'\n    })(__jsx(_Radio.Group, null, __jsx(_Radio, {\n      value: \"1\"\n    }, \"display\"), __jsx(_Radio, {\n      value: \"2\"\n    }, \"hide\"))))), __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Status\"\n    }), getFieldDecorator('status', {\n      initialValue: formData.status ? formData.status.toString() : '1'\n    })(__jsx(_Radio.Group, null, __jsx(_Radio, {\n      value: \"1\"\n    }, \"Enable\"), __jsx(_Radio, {\n      value: \"2\"\n    }, \"Disable\")))))), __jsx(_Row, null, __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Sort value\"\n    }), getFieldDecorator('sequence', {\n      initialValue: formData.sequence ? formData.sequence.toString() : '1000000',\n      rules: [{\n        required: true,\n        message: 'Please enter a sort value'\n      }]\n    })(__jsx(_InputNumber, {\n      min: 1,\n      style: {\n        width: '100%'\n      }\n    })))), __jsx(_Col, {\n      span: 12\n    }, __jsx(Form.Item, _extends({}, formItemLayout, {\n      label: \"Remarks\"\n    }), getFieldDecorator('memo', {\n      initialValue: formData.memo\n    })(__jsx(_Input, {\n      placeholder: \"please enter\"\n    }))))), __jsx(_Row, null, __jsx(_Col, {\n      span: 24\n    }, __jsx(_Card, {\n      title: \"Action (button) management\",\n      bordered: false\n    }, getFieldDecorator('actions', {\n      initialValue: formData.actions\n    })(__jsx(MenuAction, null))))))));\n  }\n\n}, _temp)) || _class);\nexport default WithDva(({\n  menu\n}) => ({\n  menu\n}))(MenuCard); // export default MenuCard;","map":null,"metadata":{},"sourceType":"module"}