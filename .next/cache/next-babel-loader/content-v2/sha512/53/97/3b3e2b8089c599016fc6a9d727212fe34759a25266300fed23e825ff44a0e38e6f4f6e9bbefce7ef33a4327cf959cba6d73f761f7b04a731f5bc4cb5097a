{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport dva from './dva-no-router';\nimport { connect } from 'react-redux';\nimport { Provider } from 'react-redux';\nimport model from '../models/index';\nimport createLoading from 'dva-loading';\n\nconst checkServer = () => Object.prototype.toString.call(global.process) === '[object process]'; // eslint-disable-next-line\n\n\nconst __NEXT_DVA_STORE__ = '__NEXT_DVA_STORE__';\n\nfunction createDvaStore(initialState) {\n  let app;\n\n  if (initialState) {\n    app = dva({\n      initialState\n    });\n  } else {\n    app = dva({});\n  }\n\n  const isArray = Array.isArray(model);\n\n  if (isArray) {\n    model.forEach(m => {\n      app.model(m);\n    });\n  } else {\n    app.model(model);\n  }\n\n  app.router(() => {});\n  app.use(createLoading({}));\n  app.start(); // console.log(app);\n  // eslint-disable-next-line\n\n  const store = app._store;\n  return store;\n}\n\nfunction getOrCreateStore(initialState) {\n  const isServer = checkServer();\n\n  if (isServer) {\n    // run in server\n    // console.log('server');\n    return createDvaStore(initialState);\n  } // eslint-disable-next-line\n\n\n  if (!window[__NEXT_DVA_STORE__]) {\n    // console.log('client');\n    // eslint-disable-next-line\n    window[__NEXT_DVA_STORE__] = createDvaStore(initialState);\n  } // eslint-disable-next-line\n\n\n  return window[__NEXT_DVA_STORE__];\n}\n\nexport default function withDva(...args) {\n  return function CreateNextPage(Component) {\n    const ComponentWithDva = (props = {}) => {\n      const {\n        store,\n        initialState\n      } = props,\n            rest = _objectWithoutProperties(props, [\"store\", \"initialState\"]);\n\n      const ConnectedComponent = connect(...args)(Component);\n      return /*#__PURE__*/React.createElement(Provider, // in client side, it will init store with the initial state tranfer from server side\n      {\n        store: store && store.dispatch ? store : getOrCreateStore(initialState)\n      },\n      /*#__PURE__*/\n      // transfer next.js's props to the page\n      React.createElement(ConnectedComponent, rest));\n    };\n\n    ComponentWithDva.getInitialProps = async (props = {}) => {\n      // console.log('get......');\n      const isServer = checkServer();\n      const store = getOrCreateStore(props.req); // call children's getInitialProps\n      // get initProps and transfer in to the page\n\n      const initialProps = Component.getInitialProps ? await Component.getInitialProps(_objectSpread(_objectSpread({}, props), {}, {\n        isServer,\n        store\n      })) : {}; // console.log(\"WithDva: \", initialProps)\n\n      return {\n        store,\n        initialProps,\n        initialState: store.getState()\n      };\n    };\n\n    return ComponentWithDva;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}