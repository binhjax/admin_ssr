{"ast":null,"code":"import _regeneratorRuntime from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory'; // import db from '../../.firebase/firebase';\n\nimport { CustomNodeModel } from './CustomNodeModel';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport var RightAnglePortModel = /*#__PURE__*/function (_SRD$DefaultPortModel) {\n  _inherits(RightAnglePortModel, _SRD$DefaultPortModel);\n\n  var _super = _createSuper(RightAnglePortModel);\n\n  function RightAnglePortModel() {\n    _classCallCheck(this, RightAnglePortModel);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RightAnglePortModel, [{\n    key: \"createLinkModel\",\n    value: function createLinkModel() {\n      return new CustomLinkModel();\n    }\n  }]);\n\n  return RightAnglePortModel;\n}(SRD.DefaultPortModel);\n\nvar Application = /*#__PURE__*/function (_React$Component) {\n  _inherits(Application, _React$Component);\n\n  var _super2 = _createSuper(Application);\n\n  function Application() {\n    var _this;\n\n    _classCallCheck(this, Application);\n\n    _this.diagramEngine = SRD.default({\n      registerDefaultZoomCanvasAction: false\n    });\n    _this.activeModel = new SRD.DiagramModel();\n    _this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0\n      },\n      includeLinks: false\n    });\n\n    _this.newModel();\n\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(Application, [{\n    key: \"reroute\",\n    value: function reroute() {\n      this.diagramEngine.getLinkFactories().getFactory(SRD.PathFindingLinkFactory.NAME).calculateRoutingMatrix();\n    }\n  }, {\n    key: \"newModel\",\n    value: function () {\n      var _newModel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var node, node2;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.activeModel = new SRD.DiagramModel();\n                this.activeModel.getZoomLevel();\n                this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n                this.diagramEngine.getPortFactories().registerFactory(new CustomPortFactory('custom', function () {\n                  return new CustomPortModel('', '', '');\n                }));\n                this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n                node = new CustomNodeModel('Quang');\n                node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n                node.addPort(new CustomPortModel('test', 'char', ''));\n                node2 = new CustomNodeModel('Test');\n                node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n                node2.addPort(new CustomPortModel('test', 'char', ''));\n                this.activeModel.addAll(node, node2);\n                this.diagramEngine.setModel(this.activeModel); //3-A) create a default node\n                // const nodes = await db.collection('saveDiagram').doc('quang').get();\n                // let data = nodes.data().data;\n                // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n                // this.diagramEngine.setModel(this.activeModel);\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function newModel() {\n        return _newModel.apply(this, arguments);\n      }\n\n      return newModel;\n    }()\n  }, {\n    key: \"getActiveDiagram\",\n    value: function getActiveDiagram() {\n      return this.activeModel;\n    }\n  }, {\n    key: \"getDiagramEngine\",\n    value: function getDiagramEngine() {\n      return this.diagramEngine;\n    }\n  }]);\n\n  return Application;\n}(React.Component);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/Application.tsx"],"names":["React","SRD","CustomNodeFactory","CustomPortFactory","CustomPortModel","CustomLinkModel","CustomLinkFactory","CustomNodeModel","RightAnglePortModel","DefaultPortModel","Application","diagramEngine","default","registerDefaultZoomCanvasAction","activeModel","DiagramModel","engine","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","newModel","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","calculateRoutingMatrix","getZoomLevel","getNodeFactories","registerFactory","getPortFactories","node","addPort","node2","addAll","setModel","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport * as SRD from '@projectstorm/react-diagrams';\n\nimport { CustomNodeFactory } from './CustomNodeFactory';\nimport { CustomPortFactory } from './CustomPortFactory';\nimport { CustomPortModel } from './CustomPortModel';\nimport { CustomLinkModel } from './CustomLinkModel';\nimport { CustomLinkFactory } from './CustomLinkFactory';\n\n// import db from '../../.firebase/firebase';\nimport { message } from 'antd';\nimport { CustomNodeModel } from './CustomNodeModel';\nimport withDva from '@/utils/store';\n// import store from '../../store';\n// import * as action from '../../actions/node';\n// import * as sql from '../../actions/sql';\nexport class RightAnglePortModel extends SRD.DefaultPortModel {\n  createLinkModel() {\n    return new CustomLinkModel();\n  }\n}\n\nclass Application extends React.Component {\n  protected activeModel: SRD.DiagramModel;\n  protected diagramEngine: SRD.DiagramEngine;\n  protected engine: SRD.DagreEngine;\n\n  constructor() {\n    this.diagramEngine = SRD.default({ registerDefaultZoomCanvasAction: false });\n    this.activeModel = new SRD.DiagramModel();\n    this.engine = new SRD.DagreEngine({\n      graph: {\n        rankdir: 'TB',\n        ranker: 'tight-tree',\n        marginx: 0,\n        marginy: 0,\n      },\n      includeLinks: false,\n    });\n    this.newModel();\n  }\n  dispatch = action => {\n    const { dispatch } = this.props;\n    dispatch(action);\n  };\n  public saveNode = () => {\n    // db.collection('saveDiagram')\n    //   .doc('quang')\n    //   .set({\n    //     data: JSON.stringify(this.activeModel.serialize()),\n    //   })\n    //   .then(function () {\n    //     message.success('Save successful!');\n    //   })\n    //   .catch(function () {\n    //     message.error('Fail to save data');\n    //   });\n    // this.diagramEngine.repaintCanvas();\n  };\n  public toJson = () => {\n    let tables = [];\n    let relationships = [];\n    this.activeModel.getNodes().forEach(node => {\n      let table = {\n        name: node.getOptions().extras,\n        columns: [],\n      };\n      Object.values(node.getPorts()).forEach(port => {\n        table.columns.push({\n          name: port.getOptions().extras.name,\n          type: port.getOptions().extras.type,\n          key: port.getOptions().extras.key,\n        });\n      });\n      tables.push(table);\n    });\n    this.activeModel.getLinks().forEach(link => {\n      let relationship = {\n        parentTable: link\n          .getSourcePort()\n          .getNode()\n          .getOptions().extras,\n        parentColumn: link.getSourcePort().getOptions().extras.name,\n        childTable: link\n          .getTargetPort()\n          .getNode()\n          .getOptions().extras,\n        childColumn: link.getTargetPort().getOptions().extras.name,\n      };\n      relationships.push(relationship);\n    });\n\n    localStorage.setItem('json-diagram', tables.toString());\n  };\n  public zoomToFit = () => {\n    this.diagramEngine.zoomToFit();\n  };\n\n  public zoomNode = () => {\n    this.diagramEngine.zoomToFitNodes(50);\n  };\n\n  public autoDistribute = () => {\n    this.engine.redistribute(this.activeModel);\n\n    // only happens if pathfing is enabled (check line 25)\n    this.reroute();\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomIn = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() + 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  public zoomOut = () => {\n    this.activeModel.setZoomLevel(this.activeModel.getZoomLevel() - 10);\n    this.diagramEngine.repaintCanvas();\n  };\n  reroute() {\n    this.diagramEngine\n      .getLinkFactories()\n      .getFactory<SRD.PathFindingLinkFactory>(SRD.PathFindingLinkFactory.NAME)\n      .calculateRoutingMatrix();\n  }\n\n  public async newModel() {\n    this.activeModel = new SRD.DiagramModel();\n    this.activeModel.getZoomLevel();\n    this.diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n    this.diagramEngine\n      .getPortFactories()\n      .registerFactory(new CustomPortFactory('custom', () => new CustomPortModel('', '', '')));\n    this.diagramEngine.getLinkFactories().registerFactory(new CustomLinkFactory());\n\n    const node = new CustomNodeModel('Quang');\n    node.addPort(new CustomPortModel('quang', 'char', 'PK'));\n    node.addPort(new CustomPortModel('test', 'char', ''));\n    const node2 = new CustomNodeModel('Test');\n    node2.addPort(new CustomPortModel('test', 'char', 'PK'));\n    node2.addPort(new CustomPortModel('test', 'char', ''));\n    this.activeModel.addAll(node, node2);\n\n    this.diagramEngine.setModel(this.activeModel);\n    //3-A) create a default node\n    // const nodes = await db.collection('saveDiagram').doc('quang').get();\n    // let data = nodes.data().data;\n    // this.activeModel.deserializeModel(JSON.parse(data), this.diagramEngine);\n    // this.diagramEngine.setModel(this.activeModel);\n  }\n\n  public getActiveDiagram(): SRD.DiagramModel {\n    return this.activeModel;\n  }\n\n  public getDiagramEngine(): SRD.DiagramEngine {\n    return this.diagramEngine;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}