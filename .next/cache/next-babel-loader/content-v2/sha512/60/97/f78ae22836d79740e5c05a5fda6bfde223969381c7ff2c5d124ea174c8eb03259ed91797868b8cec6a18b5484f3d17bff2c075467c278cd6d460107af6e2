{"ast":null,"code":"import \"antd/lib/message/style\";\nimport _message from \"antd/lib/message\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport * as userService from '@/services/user';\nexport default {\n  namespace: 'user',\n  state: {\n    search: {},\n    data: {\n      list: [],\n      pagination: {}\n    },\n    submitting: false,\n    formTitle: '',\n    formID: '',\n    formVisible: false,\n    formData: {}\n  },\n  effects: {\n    *fetch({\n      search,\n      pagination\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let params = {};\n\n      if (search) {\n        params = _objectSpread(_objectSpread({}, params), search);\n        yield put({\n          type: 'saveSearch',\n          payload: search\n        });\n      } else {\n        const s = yield select(state => state.user.search);\n\n        if (s) {\n          params = _objectSpread(_objectSpread({}, params), s);\n        }\n      }\n\n      if (pagination) {\n        params = _objectSpread(_objectSpread({}, params), pagination);\n        yield put({\n          type: 'savePagination',\n          payload: pagination\n        });\n      } else {\n        const p = yield select(state => state.user.pagination);\n\n        if (p) {\n          params = _objectSpread(_objectSpread({}, params), p);\n        }\n      }\n\n      const response = yield call(userService.query, params);\n      yield put({\n        type: 'saveData',\n        payload: response\n      });\n    },\n\n    *loadForm({\n      payload\n    }, {\n      put\n    }) {\n      yield put({\n        type: 'changeFormVisible',\n        payload: true\n      });\n      yield [put({\n        type: 'saveFormType',\n        payload: payload.type\n      }), put({\n        type: 'saveFormTitle',\n        payload: '新建用户'\n      }), put({\n        type: 'saveFormID',\n        payload: ''\n      }), put({\n        type: 'saveFormData',\n        payload: {}\n      })];\n\n      if (payload.type === 'E') {\n        yield [put({\n          type: 'saveFormTitle',\n          payload: '编辑用户'\n        }), put({\n          type: 'saveFormID',\n          payload: payload.id\n        }), put({\n          type: 'fetchForm',\n          payload: {\n            id: payload.id\n          }\n        })];\n      }\n    },\n\n    *fetchForm({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(userService.get, payload.id);\n      yield put({\n        type: 'saveFormData',\n        payload: response\n      });\n    },\n\n    *submit({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      yield put({\n        type: 'changeSubmitting',\n        payload: true\n      });\n\n      const params = _objectSpread({}, payload);\n\n      const formType = yield select(state => state.user.formType);\n      let success = false;\n\n      if (formType === 'E') {\n        const id = yield select(state => state.user.formID);\n        const response = yield call(userService.update, id, params);\n\n        if (response.status === 'OK') {\n          success = true;\n        }\n      } else {\n        const response = yield call(userService.create, params);\n\n        if (response.id && response.id !== '') {\n          success = true;\n        }\n      }\n\n      yield put({\n        type: 'changeSubmitting',\n        payload: false\n      });\n\n      if (success) {\n        _message.success('保存成功');\n\n        yield put({\n          type: 'changeFormVisible',\n          payload: false\n        });\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *del({\n      payload\n    }, {\n      call,\n      put\n    }) {\n      const response = yield call(userService.del, payload.id);\n\n      if (response.status === 'OK') {\n        _message.success('删除成功');\n\n        yield put({\n          type: 'fetch'\n        });\n      }\n    },\n\n    *changeStatus({\n      payload\n    }, {\n      call,\n      put,\n      select\n    }) {\n      let response;\n\n      if (payload.status === 1) {\n        response = yield call(userService.enable, payload.id);\n      } else {\n        response = yield call(userService.disable, payload.id);\n      }\n\n      if (response.status === 'OK') {\n        let msg = '启用成功';\n\n        if (payload.status === 2) {\n          msg = '停用成功';\n        }\n\n        _message.success(msg);\n\n        const data = yield select(state => state.user.data);\n        const newData = {\n          list: [],\n          pagination: data.pagination\n        };\n\n        for (let i = 0; i < data.list.length; i += 1) {\n          const item = data.list[i];\n\n          if (item.id === payload.id) {\n            item.status = payload.status;\n          }\n\n          newData.list.push(item);\n        }\n\n        yield put({\n          type: 'saveData',\n          payload: newData\n        });\n      }\n    }\n\n  },\n  reducers: {\n    saveData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: payload\n      });\n    },\n\n    saveSearch(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        search: payload\n      });\n    },\n\n    changeFormVisible(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formVisible: payload\n      });\n    },\n\n    saveFormTitle(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formTitle: payload\n      });\n    },\n\n    saveFormType(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formType: payload\n      });\n    },\n\n    saveFormID(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formID: payload\n      });\n    },\n\n    saveFormData(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        formData: payload\n      });\n    },\n\n    changeSubmitting(state, {\n      payload\n    }) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        submitting: payload\n      });\n    }\n\n  }\n};","map":null,"metadata":{},"sourceType":"module"}