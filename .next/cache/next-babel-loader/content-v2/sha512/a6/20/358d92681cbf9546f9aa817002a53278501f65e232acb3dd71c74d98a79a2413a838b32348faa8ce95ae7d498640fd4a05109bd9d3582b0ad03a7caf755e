{"ast":null,"code":"import \"antd/lib/notification/style\";\nimport _notification from \"antd/lib/notification\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport moment from 'moment';\nimport { history } from 'next/link';\nimport { stringify, parse } from 'qs';\nimport store, { storeKeys } from './store';\nlet refreshTimeout;\nlet lastAccessTime;\nexport const baseURL = '/api';\nexport const contentType = {\n  form: 'application/x-www-form-urlencoded',\n  json: 'application/json'\n};\nexport const headerKeys = {\n  ContentType: 'Content-Type',\n  Authorization: 'Authorization'\n};\nexport const methods = {\n  GET: 'GET',\n  POST: 'POST',\n  PUT: 'PUT',\n  DELETE: 'DELETE',\n  PATCH: 'PATCH',\n  HEAD: 'HEAD',\n  OPTIONS: 'OPTIONS'\n}; // 获取访问令牌\n\nexport function getAccessToken() {\n  // const token = store.get(storeKeys.AccessToken);\n  // if (!token) {\n  //   return '';\n  // }\n  // return token.access_token;\n  return \"\";\n} // 包装带有令牌的URL\n\nexport function wrapURLWithToken(url) {\n  const ss = url.split('?');\n  const query = parse(ss[1]);\n  query.accessToken = getAccessToken();\n  return `${ss[0]}?${stringify(query)}`;\n} // 登出\n\nexport function logout() {\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  } // store.remove(storeKeys.AccessToken);\n\n\n  const {\n    redirect\n  } = parse(window.location.href.split('?')[1]);\n\n  if (window.location.pathname !== '/user/login' && !redirect) {\n    history.replace({\n      pathname: '/user/login',\n      search: stringify({\n        redirect: window.location.href\n      })\n    });\n  }\n} // request 拦截器\n\nfunction requestInterceptors(c) {\n  const config = _objectSpread({}, c); // const token = store.get(storeKeys.AccessToken);\n\n\n  const token = \"test\";\n\n  if (token) {\n    config.headers[headerKeys.Authorization] = `${token.token_type} ${token.access_token}`;\n  }\n\n  return config;\n} // ajax请求\n\n\nexport default function request(url, options = {}) {\n  // const oldToken = store.get(storeKeys.AccessToken);\n  oldToken = null;\n\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n    if (refreshTimeout) {\n      clearTimeout(refreshTimeout);\n    }\n\n    logout(); // eslint-disable-next-line compat/compat\n\n    return Promise.reject(new Error('The token has expired'));\n  }\n\n  lastAccessTime = moment().unix();\n\n  const opts = _objectSpread({}, options);\n\n  let showNotify = true;\n\n  if (opts.hideNotify) {\n    showNotify = false;\n    delete opts.hideNotify;\n  }\n\n  const config = _objectSpread({\n    method: methods.GET,\n    baseURL,\n    headers: {},\n    transformRequest: (data, headers) => {\n      switch (headers[headerKeys.ContentType]) {\n        case contentType.json:\n          return JSON.stringify(data);\n\n        case contentType.form:\n          return stringify(data);\n\n        default:\n          return data;\n      }\n    },\n    paramsSerializer: params => {\n      return stringify(params);\n    },\n    timeout: 60000\n  }, opts);\n\n  if (!(config.headers && config.headers[headerKeys.ContentType]) && [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1) {\n    config.headers[headerKeys.ContentType] = contentType.json;\n  }\n\n  const instance = axios.create(config);\n  instance.interceptors.request.use(requestInterceptors);\n  return instance.request({\n    url\n  }).then(res => {\n    const {\n      data\n    } = res;\n    return data;\n  }).catch(error => {\n    const {\n      response\n    } = error;\n    const {\n      status,\n      data\n    } = response;\n\n    if (status === 401 && data.error && data.error.code === 9999) {\n      logout();\n      return response;\n    }\n\n    if (showNotify) {\n      let msg = '请求发生错误';\n\n      if (status === 504) {\n        msg = '未连接到服务器';\n      } else if (data && data.error) {\n        msg = data.error.message;\n      }\n\n      _notification.error({\n        message: `${config.baseURL}${url}`,\n        description: msg\n      });\n    }\n\n    return response;\n  });\n} // 放入访问令牌\n\nexport function setToken(token) {\n  lastAccessTime = token.expires_at; // store.set(storeKeys.AccessToken, token);\n\n  if (refreshTimeout) {\n    clearTimeout(refreshTimeout);\n  } // 提前10分钟更新令牌\n\n\n  const timeout = token.expires_at - moment().unix() - 10;\n\n  if (timeout > 0) {\n    refreshTimeout = setTimeout(() => {\n      // const oldToken = store.get(storeKeys.AccessToken);\n      // if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\n      //   if (refreshTimeout) {\n      //     clearTimeout(refreshTimeout);\n      //   }\n      //   return;\n      // }\n      request('/v1/pub/refresh-token', {\n        method: methods.POST\n      }).then(res => {\n        setToken(res);\n      });\n    }, timeout * 1000);\n  }\n}","map":{"version":3,"sources":["/Users/nguyenthanhbinh/Work/vnshop/admin/src/utils/request.js"],"names":["axios","moment","history","stringify","parse","store","storeKeys","refreshTimeout","lastAccessTime","baseURL","contentType","form","json","headerKeys","ContentType","Authorization","methods","GET","POST","PUT","DELETE","PATCH","HEAD","OPTIONS","getAccessToken","wrapURLWithToken","url","ss","split","query","accessToken","logout","clearTimeout","redirect","window","location","href","pathname","replace","search","requestInterceptors","c","config","token","headers","token_type","access_token","request","options","oldToken","expires_at","Promise","reject","Error","unix","opts","showNotify","hideNotify","method","transformRequest","data","JSON","paramsSerializer","params","timeout","indexOf","instance","create","interceptors","use","then","res","catch","error","response","status","code","msg","message","description","setToken","setTimeout"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport moment from 'moment';\r\nimport { history } from 'next/link';\r\nimport { stringify, parse } from 'qs';\r\nimport { notification } from 'antd';\r\nimport store, { storeKeys } from './store';\r\n\r\nlet refreshTimeout;\r\nlet lastAccessTime;\r\n\r\nexport const baseURL = '/api';\r\n\r\nexport const contentType = {\r\n  form: 'application/x-www-form-urlencoded',\r\n  json: 'application/json',\r\n};\r\n\r\nexport const headerKeys = {\r\n  ContentType: 'Content-Type',\r\n  Authorization: 'Authorization',\r\n};\r\n\r\nexport const methods = {\r\n  GET: 'GET',\r\n  POST: 'POST',\r\n  PUT: 'PUT',\r\n  DELETE: 'DELETE',\r\n  PATCH: 'PATCH',\r\n  HEAD: 'HEAD',\r\n  OPTIONS: 'OPTIONS',\r\n};\r\n\r\n// 获取访问令牌\r\nexport function getAccessToken() {\r\n  // const token = store.get(storeKeys.AccessToken);\r\n  // if (!token) {\r\n  //   return '';\r\n  // }\r\n  // return token.access_token;\r\n  return \"\";\r\n}\r\n\r\n// 包装带有令牌的URL\r\nexport function wrapURLWithToken(url) {\r\n  const ss = url.split('?');\r\n  const query = parse(ss[1]);\r\n  query.accessToken = getAccessToken();\r\n  return `${ss[0]}?${stringify(query)}`;\r\n}\r\n\r\n// 登出\r\nexport function logout() {\r\n  if (refreshTimeout) {\r\n    clearTimeout(refreshTimeout);\r\n  }\r\n\r\n  // store.remove(storeKeys.AccessToken);\r\n  const { redirect } = parse(window.location.href.split('?')[1]);\r\n  if (window.location.pathname !== '/user/login' && !redirect) {\r\n    history.replace({\r\n      pathname: '/user/login',\r\n      search: stringify({\r\n        redirect: window.location.href,\r\n      }),\r\n    });\r\n  }\r\n}\r\n\r\n// request 拦截器\r\nfunction requestInterceptors(c) {\r\n  const config = { ...c };\r\n  // const token = store.get(storeKeys.AccessToken);\r\n  const token = \"test\"\r\n  if (token) {\r\n    config.headers[headerKeys.Authorization] = `${token.token_type} ${token.access_token}`;\r\n  }\r\n  return config;\r\n}\r\n\r\n// ajax请求\r\nexport default function request(url, options = {}) {\r\n  // const oldToken = store.get(storeKeys.AccessToken);\r\n  oldToken = null;\r\n  if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\r\n    if (refreshTimeout) {\r\n      clearTimeout(refreshTimeout);\r\n    }\r\n    logout();\r\n    // eslint-disable-next-line compat/compat\r\n    return Promise.reject(new Error('The token has expired'));\r\n  }\r\n  lastAccessTime = moment().unix();\r\n\r\n  const opts = { ...options };\r\n  let showNotify = true;\r\n  if (opts.hideNotify) {\r\n    showNotify = false;\r\n    delete opts.hideNotify;\r\n  }\r\n\r\n  const config = {\r\n    method: methods.GET,\r\n    baseURL,\r\n    headers: {},\r\n    transformRequest: (data, headers) => {\r\n      switch (headers[headerKeys.ContentType]) {\r\n        case contentType.json:\r\n          return JSON.stringify(data);\r\n        case contentType.form:\r\n          return stringify(data);\r\n        default:\r\n          return data;\r\n      }\r\n    },\r\n    paramsSerializer: params => {\r\n      return stringify(params);\r\n    },\r\n    timeout: 60000,\r\n    ...opts,\r\n  };\r\n\r\n  if (\r\n    !(config.headers && config.headers[headerKeys.ContentType]) &&\r\n    [methods.POST, methods.PUT, methods.PATCH].indexOf(config.method) > -1\r\n  ) {\r\n    config.headers[headerKeys.ContentType] = contentType.json;\r\n  }\r\n\r\n  const instance = axios.create(config);\r\n  instance.interceptors.request.use(requestInterceptors);\r\n\r\n  return instance\r\n    .request({ url })\r\n    .then(res => {\r\n      const { data } = res;\r\n      return data;\r\n    })\r\n    .catch(error => {\r\n      const { response } = error;\r\n      const { status, data } = response;\r\n\r\n      if (status === 401 && data.error && data.error.code === 9999) {\r\n        logout();\r\n        return response;\r\n      }\r\n\r\n      if (showNotify) {\r\n        let msg = '请求发生错误';\r\n        if (status === 504) {\r\n          msg = '未连接到服务器';\r\n        } else if (data && data.error) {\r\n          msg = data.error.message;\r\n        }\r\n\r\n        notification.error({\r\n          message: `${config.baseURL}${url}`,\r\n          description: msg,\r\n        });\r\n      }\r\n      return response;\r\n    });\r\n}\r\n\r\n// 放入访问令牌\r\nexport function setToken(token) {\r\n  lastAccessTime = token.expires_at;\r\n  // store.set(storeKeys.AccessToken, token);\r\n  if (refreshTimeout) {\r\n    clearTimeout(refreshTimeout);\r\n  }\r\n\r\n  // 提前10分钟更新令牌\r\n  const timeout = token.expires_at - moment().unix() - 10;\r\n  if (timeout > 0) {\r\n    refreshTimeout = setTimeout(() => {\r\n      // const oldToken = store.get(storeKeys.AccessToken);\r\n      // if (oldToken && oldToken.expires_at - lastAccessTime <= 0) {\r\n      //   if (refreshTimeout) {\r\n      //     clearTimeout(refreshTimeout);\r\n      //   }\r\n      //   return;\r\n      // }\r\n\r\n      request('/v1/pub/refresh-token', {\r\n        method: methods.POST,\r\n      }).then(res => {\r\n        setToken(res);\r\n      });\r\n    }, timeout * 1000);\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}