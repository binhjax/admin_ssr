{"ast":null,"code":"import \"antd/lib/row/style\";\nimport _Row from \"antd/lib/row\";\nimport \"antd/lib/col/style\";\nimport _Col from \"antd/lib/col\";\nimport \"antd/lib/button/style\";\nimport _Button from \"antd/lib/button\";\nimport \"antd/lib/input/style\";\nimport _Input from \"antd/lib/input\";\nimport \"antd/lib/alert/style\";\nimport _Alert from \"antd/lib/alert\";\n\nvar _jsxFileName = \"/Volumes/ExternalData/Work/vnshop/admin/src/pages/login/index.js\",\n    _dec,\n    _class,\n    _temp;\n\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { PureComponent } from 'react';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { CodeOutlined, LockOutlined, UserOutlined } from '@ant-design/icons';\nimport { md5Hash } from '../../utils/utils';\nimport { setToken } from '../../utils/request';\nimport styles from './index.less';\nimport WithDva from '../../utils/store';\nimport Router from \"next/router\";\nlet Login = (_dec = Form.create(), _dec(_class = (_temp = class Login extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleToken\", event => {\n      console.log(\"Binht. on message  = \", event);\n      const {\n        data: {\n          token\n        }\n      } = event; // alert(event.data);\n\n      if (token != 'undefined' && token !== undefined && token != null) {\n        setToken(token);\n        Router.back();\n      } else {\n        console.log(\"Cannot find token \");\n      }\n    });\n\n    _defineProperty(this, \"reloadCaptcha\", () => {\n      this.dispatch({\n        type: 'login/reloadCaptcha'\n      });\n    });\n\n    _defineProperty(this, \"handleSubmit\", e => {\n      e.preventDefault();\n      const {\n        form,\n        dispatch,\n        login\n      } = this.props;\n      form.validateFields({\n        force: true\n      }, (err, values) => {\n        if (!err) {\n          dispatch({\n            type: 'login/submit',\n            payload: {\n              user_name: values.user_name,\n              captcha_code: values.captcha_code,\n              captcha_id: login.captchaID,\n              password: md5Hash(values.password)\n            }\n          });\n        }\n      });\n    });\n\n    _defineProperty(this, \"handleClick\", e => {\n      console.log(\"Login by google \");\n      window.open('http://localhost:10088', 'Popup', 'location,status,scrollbars,resizable,width=600, height=600');\n    });\n\n    _defineProperty(this, \"dispatch\", action => {\n      const {\n        dispatch\n      } = this.props;\n      dispatch(action);\n    });\n\n    _defineProperty(this, \"renderMessage\", (type, message) => __jsx(_Alert, {\n      style: {\n        marginBottom: 24\n      },\n      message: message,\n      type: type,\n      closable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 5\n      }\n    }));\n  }\n\n  componentDidMount() {\n    // window.addEventListener('token', this.handleToken);\n    window.addEventListener(\"message\", this.handleToken);\n    this.dispatch({\n      type: 'login/loadCaptcha'\n    });\n  }\n\n  render() {\n    const {\n      form: {\n        getFieldDecorator\n      },\n      login\n    } = this.props;\n    return __jsx(_Row, {\n      type: \"flex\",\n      justify: \"center\",\n      align: \"middle\",\n      style: {\n        minHeight: '100vh'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }\n    }, __jsx(_Col, {\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: styles.main,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.handleSubmit,\n      className: \"login-form\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, login.status === 'FAIL' && login.submitting === false && this.renderMessage('warning', login.tip), login.status === 'ERROR' && login.submitting === false && this.renderMessage('error', login.tip), __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, getFieldDecorator('user_name', {\n      rules: [{\n        required: true,\n        message: 'Please enter username'\n      }]\n    })(__jsx(_Input, {\n      size: \"large\",\n      prefix: __jsx(UserOutlined, {\n        className: styles.prefixIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 29\n        }\n      }),\n      placeholder: \"Please enter username\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }))), __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 15\n      }\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please enter password'\n      }]\n    })(__jsx(_Input, {\n      size: \"large\",\n      prefix: __jsx(LockOutlined, {\n        className: styles.prefixIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 29\n        }\n      }),\n      type: \"password\",\n      placeholder: \"Please enter password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    }))), __jsx(Form.Item, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 15\n      }\n    }, __jsx(_Input.Group, {\n      compact: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }\n    }, getFieldDecorator('captcha_code', {\n      rules: [{\n        required: true,\n        message: 'Please enter verification code!'\n      }]\n    })(__jsx(_Input, {\n      style: {\n        width: '50%',\n        marginRight: 10\n      },\n      size: \"large\",\n      prefix: __jsx(CodeOutlined, {\n        className: styles.prefixIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 35\n        }\n      }),\n      placeholder: \"Please enter verification code!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 25\n      }\n    })), __jsx(\"div\", {\n      style: {\n        width: 120,\n        height: 40\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }, __jsx(\"img\", {\n      style: {\n        maxWidth: '100%',\n        maxHeight: '100%'\n      },\n      src: login.captcha,\n      alt: \"Verification Code\",\n      onClick: () => {\n        this.reloadCaptcha();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 21\n      }\n    })))), __jsx(Form.Item, {\n      className: styles.additional,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, __jsx(_Button, {\n      size: \"large\",\n      loading: login.submitting,\n      className: styles.submit,\n      type: \"primary\",\n      htmlType: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }\n    }, \"Login\"), __jsx(_Button, {\n      size: \"large\",\n      loading: login.submitting,\n      className: styles.submit,\n      type: \"primary\",\n      htmlType: \"button\",\n      onClick: this.handleClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"Google\"))))), \" \");\n  }\n\n}, _temp)) || _class);\nexport default WithDva(({\n  login\n}) => ({\n  login\n}))(Login);","map":{"version":3,"sources":["/Volumes/ExternalData/Work/vnshop/admin/src/pages/login/index.js"],"names":["React","PureComponent","Form","CodeOutlined","LockOutlined","UserOutlined","md5Hash","setToken","styles","WithDva","Router","Login","create","event","console","log","data","token","undefined","back","dispatch","type","e","preventDefault","form","login","props","validateFields","force","err","values","payload","user_name","captcha_code","captcha_id","captchaID","password","window","open","action","message","marginBottom","componentDidMount","addEventListener","handleToken","render","getFieldDecorator","minHeight","main","handleSubmit","status","submitting","renderMessage","tip","rules","required","prefixIcon","width","marginRight","height","maxWidth","maxHeight","captcha","reloadCaptcha","additional","submit","handleClick"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Row, Col } from 'antd';\nimport { Form } from '@ant-design/compatible';\nimport '@ant-design/compatible/assets/index.css';\nimport { CodeOutlined, LockOutlined, UserOutlined } from '@ant-design/icons';\n\nimport { Input, Button, Alert } from 'antd';\nimport { md5Hash } from '../../utils/utils';\nimport { setToken } from '../../utils/request';\nimport styles from './index.less';\n\nimport WithDva from '../../utils/store';\nimport Router from \"next/router\";\n\n@Form.create()\nclass Login extends PureComponent {\n  componentDidMount() {\n    // window.addEventListener('token', this.handleToken);\n    window.addEventListener(\"message\", this.handleToken);\n\n    this.dispatch({\n      type: 'login/loadCaptcha',\n    });\n\n  }\n  handleToken = (event) => {\n    console.log(\"Binht. on message  = \", event)\n\n    const { data: { token } } = event;\n\n    // alert(event.data);\n    if (token != 'undefined' && token !== undefined && token != null) {\n      setToken(token);\n      Router.back()\n    } else {\n      console.log(\"Cannot find token \")\n    }\n  }\n  reloadCaptcha = () => {\n    this.dispatch({\n      type: 'login/reloadCaptcha',\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const { form, dispatch, login } = this.props;\n    form.validateFields({ force: true }, (err, values) => {\n      if (!err) {\n        dispatch({\n          type: 'login/submit',\n          payload: {\n            user_name: values.user_name,\n            captcha_code: values.captcha_code,\n            captcha_id: login.captchaID,\n            password: md5Hash(values.password),\n          },\n        });\n      }\n    });\n  };\n  handleClick = (e) => {\n    console.log(\"Login by google \")\n    window.open('http://localhost:10088',\n      'Popup',\n      'location,status,scrollbars,resizable,width=600, height=600'\n    )\n  }\n  dispatch = action => {\n    const { dispatch } = this.props;\n    dispatch(action);\n  };\n\n  renderMessage = (type, message) => (\n    <Alert style={{ marginBottom: 24 }} message={message} type={type} closable />\n  );\n\n  render() {\n    const {\n      form: { getFieldDecorator },\n      login,\n    } = this.props;\n\n    return (\n      <Row type=\"flex\" justify=\"center\" align=\"middle\" style={{ minHeight: '100vh' }} >\n        <Col span={6}  >\n          <div className={styles.main}>\n\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n              {login.status === 'FAIL' &&\n                login.submitting === false &&\n                this.renderMessage('warning', login.tip)}\n\n              {login.status === 'ERROR' &&\n                login.submitting === false &&\n                this.renderMessage('error', login.tip)}\n\n\n              <Form.Item>\n                {getFieldDecorator('user_name', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please enter username',\n                    },\n                  ],\n                })(\n                  <Input\n                    size=\"large\"\n                    prefix={<UserOutlined className={styles.prefixIcon} />}\n                    placeholder=\"Please enter username\"\n                  />\n                )}\n              </Form.Item>\n\n              <Form.Item>\n                {getFieldDecorator('password', {\n                  rules: [\n                    {\n                      required: true,\n                      message: 'Please enter password',\n                    },\n                  ],\n                })(\n                  <Input\n                    size=\"large\"\n                    prefix={<LockOutlined className={styles.prefixIcon} />}\n                    type=\"password\"\n                    placeholder=\"Please enter password\"\n                  />\n                )}\n              </Form.Item>\n\n              <Form.Item>\n                <Input.Group compact>\n                  {\n                    getFieldDecorator('captcha_code', {\n                      rules: [\n                        {\n                          required: true,\n                          message: 'Please enter verification code!',\n                        },\n                      ],\n                    })\n                      (\n                        <Input\n                          style={{ width: '50%', marginRight: 10 }}\n                          size=\"large\"\n                          prefix={<CodeOutlined className={styles.prefixIcon} />}\n                          placeholder=\"Please enter verification code!\"\n                        />\n                      )\n                  }\n                  <div\n                    style={{\n                      width: 120,\n                      height: 40,\n                    }}\n                  >\n                    <img\n                      style={{ maxWidth: '100%', maxHeight: '100%' }}\n                      src={login.captcha}\n                      alt=\"Verification Code\"\n                      onClick={() => {\n                        this.reloadCaptcha();\n                      }}\n                    />\n                  </div>\n                </Input.Group>\n              </Form.Item>\n              <Form.Item className={styles.additional}>\n                <Button\n                  size=\"large\"\n                  loading={login.submitting}\n                  className={styles.submit}\n                  type=\"primary\"\n                  htmlType=\"submit\"\n                >\n                  Login\n              </Button>\n                <Button\n                  size=\"large\"\n                  loading={login.submitting}\n                  className={styles.submit}\n                  type=\"primary\"\n                  htmlType=\"button\"\n                  onClick={this.handleClick}\n                >\n                  Google\n                </Button>\n              </Form.Item>\n            </Form>\n          </div>\n        </Col> </Row >\n    );\n  }\n}\n\nexport default WithDva(({ login }) => ({\n  login,\n}))(Login);\n"]},"metadata":{},"sourceType":"module"}