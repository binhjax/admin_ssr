{"ast":null,"code":"import _classCallCheck from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _inherits from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/tuanquang/admin_ssr/node_modules/next/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Action, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { PortModel } from '../PortModel';\nexport var DragDiagramItemsState = /*#__PURE__*/function (_MoveItemsState) {\n  _inherits(DragDiagramItemsState, _MoveItemsState);\n\n  var _super = _createSuper(DragDiagramItemsState);\n\n  function DragDiagramItemsState() {\n    var _this;\n\n    _classCallCheck(this, DragDiagramItemsState);\n\n    _this = _super.call(this);\n\n    _this.registerAction(new Action({\n      type: InputType.MOUSE_UP,\n      fire: function fire(event) {\n        var item = _this.engine.getMouseElement(event.event);\n\n        if (item instanceof PortModel) {\n          _.forEach(_this.initialPositions, function (position) {\n            if (position.item instanceof PointModel) {\n              var link = position.item.getParent(); // only care about the last links\n\n              if (link.getLastPoint() !== position.item) {\n                return;\n              }\n\n              if (link.getSourcePort().canLinkToPort(item)) {\n                link.setTargetPort(item);\n                item.reportPosition();\n\n                _this.engine.repaintCanvas();\n              }\n            }\n          });\n        }\n      }\n    }));\n\n    return _this;\n  }\n\n  return DragDiagramItemsState;\n}(MoveItemsState);","map":{"version":3,"sources":["/home/tuanquang/admin_ssr/src/components/Test/state/DragDiagramItemsState.ts"],"names":["Action","InputType","MoveItemsState","_","PointModel","PortModel","DragDiagramItemsState","registerAction","type","MOUSE_UP","fire","event","item","engine","getMouseElement","forEach","initialPositions","position","link","getParent","getLastPoint","getSourcePort","canLinkToPort","setTargetPort","reportPosition","repaintCanvas"],"mappings":";;;;;;;;;AAAA,SAASA,MAAT,EAA8BC,SAA9B,EAAyCC,cAAzC,QAA+D,iCAA/D;AACA,OAAO,KAAKC,CAAZ,MAAmB,QAAnB;AACA,SAASC,UAAT,QAA2B,6BAA3B;AAEA,SAASC,SAAT,QAA0B,cAA1B;AAIA,WAAaC,qBAAb;AAAA;;AAAA;;AACC,mCAAc;AAAA;;AAAA;;AACb;;AACA,UAAKC,cAAL,CACC,IAAIP,MAAJ,CAAW;AACVQ,MAAAA,IAAI,EAAEP,SAAS,CAACQ,QADN;AAEVC,MAAAA,IAAI,EAAE,cAACC,KAAD,EAAoC;AACzC,YAAMC,IAAI,GAAG,MAAKC,MAAL,CAAYC,eAAZ,CAA4BH,KAAK,CAACA,KAAlC,CAAb;;AACA,YAAIC,IAAI,YAAYP,SAApB,EAA+B;AAC9BF,UAAAA,CAAC,CAACY,OAAF,CAAU,MAAKC,gBAAf,EAAiC,UAACC,QAAD,EAAc;AAC9C,gBAAIA,QAAQ,CAACL,IAAT,YAAyBR,UAA7B,EAAyC;AACxC,kBAAMc,IAAI,GAAGD,QAAQ,CAACL,IAAT,CAAcO,SAAd,EAAb,CADwC,CAGxC;;AACA,kBAAID,IAAI,CAACE,YAAL,OAAwBH,QAAQ,CAACL,IAArC,EAA2C;AAC1C;AACA;;AACD,kBAAIM,IAAI,CAACG,aAAL,GAAqBC,aAArB,CAAmCV,IAAnC,CAAJ,EAA8C;AAC7CM,gBAAAA,IAAI,CAACK,aAAL,CAAmBX,IAAnB;AACAA,gBAAAA,IAAI,CAACY,cAAL;;AACA,sBAAKX,MAAL,CAAYY,aAAZ;AACA;AACD;AACD,WAdD;AAeA;AACD;AArBS,KAAX,CADD;;AAFa;AA2Bb;;AA5BF;AAAA,EAA2CvB,cAA3C","sourcesContent":["import { Action, ActionEvent, InputType, MoveItemsState } from '@projectstorm/react-canvas-core';\nimport * as _ from 'lodash';\nimport { PointModel } from '../entities/link/PointModel';\nimport { DiagramEngine } from '../DiagramEngine';\nimport { PortModel } from '../PortModel';\nimport { MouseEvent } from 'react';\nimport { CustomLinkModel } from '../CustomLinkModel';\n\nexport class DragDiagramItemsState extends MoveItemsState<DiagramEngine> {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.registerAction(\n\t\t\tnew Action({\n\t\t\t\ttype: InputType.MOUSE_UP,\n\t\t\t\tfire: (event: ActionEvent<MouseEvent>) => {\n\t\t\t\t\tconst item = this.engine.getMouseElement(event.event);\n\t\t\t\t\tif (item instanceof PortModel) {\n\t\t\t\t\t\t_.forEach(this.initialPositions, (position) => {\n\t\t\t\t\t\t\tif (position.item instanceof PointModel) {\n\t\t\t\t\t\t\t\tconst link = position.item.getParent() as CustomLinkModel;\n\n\t\t\t\t\t\t\t\t// only care about the last links\n\t\t\t\t\t\t\t\tif (link.getLastPoint() !== position.item) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (link.getSourcePort().canLinkToPort(item)) {\n\t\t\t\t\t\t\t\t\tlink.setTargetPort(item);\n\t\t\t\t\t\t\t\t\titem.reportPosition();\n\t\t\t\t\t\t\t\t\tthis.engine.repaintCanvas();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}