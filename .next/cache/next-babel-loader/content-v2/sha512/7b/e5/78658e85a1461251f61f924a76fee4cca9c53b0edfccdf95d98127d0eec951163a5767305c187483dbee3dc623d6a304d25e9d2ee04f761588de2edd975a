{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport App from 'next/app';\nimport UserLayout from '../layouts/UserLayout';\nimport AdminLayout from '../layouts/AdminLayout';\nimport jsHttpCookie from 'cookie';\nimport Router from 'next/router';\nimport './styles.css'; //Check development environment or production to change baseUrl \n\nconst baseUrl = '/admin';\nexport function redirectUser(ctx, location) {\n  if (ctx.req) {\n    console.log('app.redirectUser: redirectUser from server: ', location);\n    ctx.res.writeHead(302, {\n      Location: baseUrl + location\n    });\n    ctx.res.end();\n  } else {\n    console.log('app.redirectUser: redirectUser from client');\n    Router.push(baseUrl + location);\n  }\n}\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      req\n    } = ctx;\n    const isServer = !!req;\n    const isBrowser = !req;\n    let initProps = {};\n    console.log('app.getInitialProps: Query pathname: ', ctx.pathname);\n\n    if (isServer) {\n      console.log('app.getInitialProps:  From server');\n\n      if (req == undefined) {\n        console.log('app.getInitialProps: req is undefined ', ctx);\n      }\n\n      if (req && req.headers) {\n        const cookies = req.headers.cookie;\n\n        if (typeof cookies === 'string') {\n          console.log('app.getInitialProps: cookies = ', cookies);\n          const cookiesJSON = jsHttpCookie.parse(cookies);\n          console.log('app.getInitialProps: cookiesJSON = ', cookiesJSON);\n          initProps.token = cookiesJSON.token;\n        } else if (cookies == undefined) {\n          console.log('app.getInitialProps: No find cookies');\n        } else {\n          console.log('app.getInitialProps: cookies is not string ');\n        }\n      } else {\n        console.log('app.getInitialProps: req.headers: ', req);\n      } // Redirect route\n\n\n      if (initProps.token === undefined) {\n        console.log('app.getInitialProps: initProps.token  not found ');\n\n        if (ctx.pathname.startsWith(\"/login\") && ctx.pathname.startsWith(\"/_error\") && ctx.pathname.startsWith(\"/404\")) {\n          console.log(' app.getInitialProps: Redirect to signin from ', ctx.pathname, initProps.token);\n          redirectUser(ctx, '/login');\n        }\n      } else {\n        console.log('app.getInitialProps: initProps.token  = ', initProps.token);\n\n        if (ctx.pathname == '/login') {\n          redirectUser(ctx, '/dashboard');\n        }\n      }\n    } else {\n      console.log('app.getInitialProps: In client');\n    } //Init component\n\n\n    if (Component.getInitialProps) {\n      initProps = await Component.getInitialProps(ctx);\n    }\n\n    console.log('app.getInitialProps:Loggin to ', ctx.pathname);\n    return _objectSpread({}, initProps);\n  }\n\n  render() {\n    const _this$props = this.props,\n          {\n      Component,\n      pageProps,\n      router\n    } = _this$props,\n          arg = _objectWithoutProperties(_this$props, [\"Component\", \"pageProps\", \"router\"]);\n\n    if (router.pathname.startsWith('user/login')) {\n      return __jsx(UserLayout, null, __jsx(Component, _extends({}, pageProps, arg)));\n    }\n\n    if (router.pathname.startsWith('login') || router.pathname.startsWith('404')) {\n      return __jsx(Component, _extends({}, pageProps, arg));\n    }\n\n    return __jsx(AdminLayout, null, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}